{"meta":{"title":"iOS @ Taipei","subtitle":"iOS and her good friends","description":"We are the guys who fall in love with iOS","author":"AKI YU","url":"http://ios.taipei"},"pages":[],"posts":[{"title":"DUNS申請以及相關問題","slug":"duns","date":"2018-06-24T15:00:00.000Z","updated":"2018-06-25T14:00:53.913Z","comments":true,"path":"2018/06/24/duns/","link":"","permalink":"http://ios.taipei/2018/06/24/duns/","excerpt":"D-U-N-S 申請以及相關問題Q: What is D-U-N-S?","text":"D-U-N-S 申請以及相關問題Q: What is D-U-N-S?A: The D‑U‑N‑S Number is a unique nine-digit identifier for businesses. It is used to establish a D&amp;B® business credit file, which is often referenced by lenders and potential business partners to help predict the reliability and/or financial stability of the company in question. “D‑U‑N‑S,” which stands for data universal numbering system, is used to maintain up-to-date and timely information on more than 300 million global businesses. 大意是說，有跨國生意需求時，可以幫你做基本的徵信，以降低風險。 不知為何，被APPLE拿來當做公司帳號的初步篩選。因此，如果想要申請公司或組織的開發者計劃，或是企業方案之前，都要先有一組D-U-N-S號碼，才能夠繼續進行。 通常在台灣，如果是成立一段時間的公司，會由台灣鄧白氏主動幫你加入，申請之前，可以先查一下，看有沒有已經有號碼了 點我 查詢 D-U-N-S Legal entity name （公司組織法律名稱） Headquarters address (總公司地址) Mailing address (郵件位址) Your work contact information (聯絡方式) 如果沒有的話，就必須要申請 D-U-N-S 了，一樣的流程，只是時間會久一點（據說要五個工作天，建議是多留點時間等等），這裡會由D&amp;B的真人來電話聯絡，用以確認是否為正常的公司。 有可能被reject的事項為 獨資的個人公司 無法查到公司正確的相關資訊 DBAs - Do Business As XXX (e.g. iOS@Taipei 不是一個合法的公司名稱) Fictitious Name - 虛擬名稱 貿易名 分公司名 （需由總公司統一申請） 這裡會用真人打電話聯絡確認，回答如果不正確的話，可是會被reject的","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"教學","slug":"教學","permalink":"http://ios.taipei/tags/教學/"}]},{"title":"寫在程式開發之前00-1","slug":"Tutorial_00_1","date":"2018-06-24T15:00:00.000Z","updated":"2018-06-25T14:01:03.369Z","comments":true,"path":"2018/06/24/Tutorial_00_1/","link":"","permalink":"http://ios.taipei/2018/06/24/Tutorial_00_1/","excerpt":"寫在程式開發之前 00-1Q: 什麼是 Apple ID? 什麼又是 Developer Program?","text":"寫在程式開發之前 00-1Q: 什麼是 Apple ID? 什麼又是 Developer Program?A: 假設你使用過apple的任一個電子設備，並且註冊過帳號，那麼這個帳號則稱為 Apple ID 假設你使用Apple ID登入開發者登入 進行操作, 若你未入加入任何一個開發者計劃，會被提示 Enroll in iOS Developer Program 若你已加入，則會顯示 Individual 和 Company/Organization 兩種不同的類型 (需支付一年$99USD的費用)，此時就可以進行後台的使用，如憑證、裝置管理、APP管理等功能，同時 itunes connect 也可以針對上架的APP進行管理 獨立個人開發者 (Individual) 可以單人使用，但是無法加入第二個、第三個開發者共同開發，如果有共同協作開發需求時，只能將自身的憑證與相關檔案交付給其他人才能同步開發，或是在xcode的偏好設定中，輸入帳號密碼給第三者。 公司、組織 (Company/Organization) 則是可以加入多人共同開發，如果有人員異動時，也方便由帳號管理中加入或移除，而非由單一帳密或憑證檔案管理的方式。 要申請為公司類別，需要 DUNS 鄧白氏號碼，若只為了apple 開發申請的話，可以加入免費版本。如何申請 DUNS，會由另一篇文章來解釋。 若有企業開發需求（B2B），或是 ( 無法 ) 不想在app store上架等等，可以申請 Enterprise Program (＄299 USD/年), 申請方式和公司類別相同，但是申請審查會更加地嚴格。申請流程會用另一篇文章來解說。 附註：Apple ID 若為Enterprise Program的話，是不能和其他 developer program混用的，在此同時，itunes connect 也會變成無法登入的狀態 最後，如果想要開發apple的配件的話，則是要啟用 MFi Program，繳的費用和上面都不一樣，這又是另一篇故事了。 Q: 什麼是 Team ID ? 什麼是 App ID ? 什麼是 Bundle ID? 什麼是 Product ID ? A: Product ID 指的是在app store裡，用來區分不同的APP之間的差異。一些功能，如推播，就是依賴Product ID來找到你的APP，好將訊息正確送到你的手機上。Product ID是由 Team ID + Bundle ID所組成的 Team ID是在加入開發者計劃後，由系統給予的一組文字，你可以在開發者網站 &gt; 會員（membership）裡找到這個值。(未來如果想要推播的話，這個值就會派得上用場了) App ID 通常會使用域名反解(reverse domain name)的規則以避免和其他人重複，未來上架時無法新增APP。 App ID 在 XCode裡又稱之為 Bundle Identifier，也有人寫成 Bundle ID， Q: 什麼是 UUID ? 什麼是 advertisingIdentifier ? A: UDID (Unique Device Identifier) 指的是iOS設備上唯一的裝置識別標籤 - 和 UUID 不同 Universally Unique Identifier） 附註：APP刪除再重裝的時候，UDID據說是會改變的，通常會寫入一份在手機的keychain裡，在做一些統計的時候派得上。 advertisingIdentifier是另一個辨別裝置的標籤，由AdSupport.Framework提供，如果沒有使用到廣告但是加入了advertisingIdentifier的呼叫的話，可是會被退件的 自已產？！！！吃飽太閒的話，也可以啦！！ 在 itunes 桌面應用程式裡，接上手機並且信任之後，可以在手機的摘要裡找到 UDID XCode裡的裝置，摘要裡也找得到。 當然，也可以下載一些來路不明的描述檔加以信任，並且連到特殊的網站後，可以查得到UDID","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"教學","slug":"教學","permalink":"http://ios.taipei/tags/教學/"}]},{"title":"Carthage-introduction","slug":"Carthage-introduction","date":"2018-06-21T15:32:12.000Z","updated":"2018-06-21T15:34:31.000Z","comments":true,"path":"2018/06/21/Carthage-introduction/","link":"","permalink":"http://ios.taipei/2018/06/21/Carthage-introduction/","excerpt":"相信大家對於CocoaPods非常的熟悉，用的愛不釋手，那麼為什麼還要看一下Carthage呢？","text":"相信大家對於CocoaPods非常的熟悉，用的愛不釋手，那麼為什麼還要看一下Carthage呢？ 在還沒有CocoaPods之類，大家都是用拖檔案，拖library進來，甚至是拖另一個專案到專案裡面來，記得還要copy items if needed，有CocoaPods，只要幾行指令，就完成了所有的工作了，就連考試都得了一百分呢！！ Carthage與CocoaPods的不同在那裡呢？ 首先，CocoaPods預設會自動產生具有dependency的workspace並且更新你的專案檔，Carthage則是使用xcodebuild來打包成framework，以方便引用，避免污染專案檔 再來，CocoaPods在每次編譯時，都會重新打包所有的pods，當使用第三方元件使用的多時，編譯就會變慢，有機會會差到幾十秒 最後，Carthage比CocoaPods好封裝多了，只要開一個Project/Framework,裡面的scheme設為shared就可以了 附帶一提的是 Carthage 的打包，可以不讓別人看到source code，這不知道要算優點還是缺點 1。安裝Carthage Carthage提供OS X平台的pkg安裝文件，可以從Github的最新release中找到，按照指示一步步安裝即可。 2。新增framework到程式裡 安裝完Carthage後，你能够使用它来新增framework到你的專案裡。注意Carthage只支持dynamic framework(iOS8以上)。 3。執行 1carthage update 和CocoaPods一樣，會將相依的資料抓到 Carthage/Checkouts 目錄下，並且編譯好 4。設定在你的專案的target的[General][Embedded Binaries]，將framework從Carthage.build裡拉進去。（如果有git，也順便push上去，醬子其他人只要執行carthage bootstrap就能使用了。 5。update如果變動了Cartfile，或者想升级到最新版本，執行carthage update命令就可以了。 6。檢查如果編譯失敗的話，試著在命令列執行 1xcodebuild -scheme SCHEME -workspace WORKSPACE build 或 1xcodebuild -scheme SCHEME -project PROJECT build 其中大寫的地方要換成你的workspace或專案名稱, 有沒有很簡單？","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"Dependency Management","slug":"Dependency-Management","permalink":"http://ios.taipei/tags/Dependency-Management/"}]},{"title":"GCD","slug":"GCD","date":"2018-06-21T15:08:55.000Z","updated":"2018-06-21T15:12:08.000Z","comments":true,"path":"2018/06/21/GCD/","link":"","permalink":"http://ios.taipei/2018/06/21/GCD/","excerpt":"GCD 有許多用法，不知道你會那幾種？","text":"GCD 有許多用法，不知道你會那幾種？ 1. 背景執行 12345678let defaultPriority = DISPATCH_QUEUE_PRIORITY_DEFAULTlet backgroundQueue = dispatch_get_global_queue(defaultPriority, 0)dispatch_async(backgroundQueue, &#123; let result = doSomeExpensiveWork() dispatch_async(dispatch_get_main_queue(), &#123; //use `result` somehow &#125;)&#125;) 2. Singleton 12345678+ (instancetype) sharedInstance &#123; static dispatch_once_t onceToken; static id sharedInstance; dispatch_once(&amp;amp;amp;onceToken, ^&#123; sharedInstance = [[self alloc] init]; &#125;); return sharedInstance;&#125; 3. with blocks 12345678910111213141516typealias DoneBlock = () -&amp;gt; ()typealias WorkBlock = (DoneBlock) -&amp;gt; ()class AsyncSerialWorker &#123; private let serialQueue = dispatch_queue_create(\"ios.taipei.queue\", DISPATCH_QUEUE_SERIAL) func enqueueWork(work: WorkBlock) &#123; dispatch_async(serialQueue) &#123; let semaphore = dispatch_semaphore_create(0) work(&#123; dispatch_semaphore_signal(semaphore) &#125;) dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER) &#125; &#125;&#125; 4. multi-task 123456789dispatch_group_t group = dispatch_group_create() for item in someArray &#123; dispatch_group_async(group, backgroundQueue, &#123; performExpensiveWork(item: item) &#125;) &#125; dispatch_group_notify(group, dispatch_get_main_queue(), &#123; // all the work is complete&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"GCD","slug":"GCD","permalink":"http://ios.taipei/tags/GCD/"}]},{"title":"SpotLight 初探","slug":"Spotlight-inspect","date":"2018-06-21T15:00:28.000Z","updated":"2018-06-21T15:32:21.000Z","comments":true,"path":"2018/06/21/Spotlight-inspect/","link":"","permalink":"http://ios.taipei/2018/06/21/Spotlight-inspect/","excerpt":"當使用者使用spotlight查詢時，總是有些app會列出內容出來，那又是怎麼樣的小技巧呢？","text":"當使用者使用spotlight查詢時，總是有些app會列出內容出來，那又是怎麼樣的小技巧呢？ 先把兩個必要的framework包進來 import CoreSpotlightimport MobileCoreServices接著，準備一個獨立的ID，避免與別的app衝突，通常會使用域名反解，與一個資料陣列,型別為 CSSearchableItem 12let domainID: String = \"com.yuaki.informationPlus\"var searchableItems: [CSSearchableItem] = [] 接著， 定義每筆資料的屬性設定 (item為資料物件) 12345let attributeSet = CSSearchableItemAttributeSet(itemContentType: kUTTypeItem as String)attributeSet.title = item.titleattributeSet.contentDescription = item.subtitleattributeSet.contentCreationDate = item.date 接著為這個屬性設定關鍵字,以方便被搜尋 1234// define search keywordsvar keywords = item.title.componentsSeparatedByString(\" \")keywords.appendContentsOf(item.subtitle.componentsSeparatedByString(\" \"))attributeSet.keywords = keywords 然後把屬性放到 CSSearchableItem裡 再加到陣列中備用 let searchItem = CSSearchableItem(uniqueIdentifier: “Parking”, domainIdentifier: domainID, attributeSet: attributeSet)searchableItems.append(searchItem)最後加到index裡 1234567CSSearchableIndex.defaultSearchableIndex().indexSearchableItems(searchableItems) &#123; (error) -&amp;gt; Void in if error != nil &#123; print(error?.localizedDescription) &#125;else&#123; print(\"items indexed witch success!\") &#125;&#125; 醬子就好了！！！ 其中uniqueIdentifier可以在 continueUserActivity 的userInfo 被撈取 有沒有很方便呀 附記：index看起來沒有容量的限制，意思是…… 我可以塞爆他嗎？","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"spotlight","slug":"spotlight","permalink":"http://ios.taipei/tags/spotlight/"}]},{"title":"XCode 搜尋小技巧","slug":"xcode-search","date":"2018-06-21T15:00:28.000Z","updated":"2018-06-21T15:22:15.000Z","comments":true,"path":"2018/06/21/xcode-search/","link":"","permalink":"http://ios.taipei/2018/06/21/xcode-search/","excerpt":"茫茫碼海中，要怎麼找到你想要找的那一段程式碼？關鍵字下的不夠精準，找不到或是搜尋的資料太多，都是種苦惱。還是想找個Hex? 找Tab? 找ip？ 找url？ 找email? 好的搜尋技巧帶你上天堂，下面幾個技巧該可以能帶你上天堂","text":"茫茫碼海中，要怎麼找到你想要找的那一段程式碼？關鍵字下的不夠精準，找不到或是搜尋的資料太多，都是種苦惱。還是想找個Hex? 找Tab? 找ip？ 找url？ 找email? 好的搜尋技巧帶你上天堂，下面幾個技巧該可以能帶你上天堂 定義搜尋（只搜尋「定義」的字串）搜尋關鍵字會把所有找到的資料帶出來（以simple為例） 在find的第二層，將搜尋改為definition 結果就只會出現「定義」裡的關鍵字搜尋了 &nbsp; 2. Pattern 在搜尋裡先打一個「”」,用以區隔 pattern之用，接著，在放大鏡裡點選 insert pattern 接著，點選「url」,再補個「”」給他 結果，就是我們想要的結果 3. 指定路徑 如果是已知路徑下搜尋，只要在 下方的「in Workspace」點一下 再點選你要搜尋的路徑就可以了 有興趣的人還有scope的進階版可以玩 Call Hierarchy 想知道有誰呼叫了某個函數？ 還有一個方法，就是當你移到函數的位置時","categories":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://ios.taipei/tags/iOS/"},{"name":"xCode","slug":"xCode","permalink":"http://ios.taipei/tags/xCode/"}]}]}