<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>String to Date, Date to String</title>
      <link href="/2019/05/19/DateToString/"/>
      <url>/2019/05/19/DateToString/</url>
      <content type="html"><![CDATA[<p>因為太常用了，所以存一份當紀念</p><a id="more"></a><pre><code>import Foundationextension DateFormatter {    convenience init (format: String) {        self.init()        dateFormat = format        locale = Locale.current    }}extension String {    func toDate (dateFormatter: DateFormatter) -&gt; Date? {        return dateFormatter.date(from: self)    }    func toDateString (dateFormatter: DateFormatter, outputFormat: String) -&gt; String? {        guard let date = toDate(dateFormatter: dateFormatter) else { return nil }        return DateFormatter(format: outputFormat).string(from: date)    }}extension Date {    func toString (dateFormatter: DateFormatter) -&gt; String? {        return dateFormatter.string(from: self)    }}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新增行事曆的事件</title>
      <link href="/2019/05/19/calenderEvent/"/>
      <url>/2019/05/19/calenderEvent/</url>
      <content type="html"><![CDATA[<p>Q: 想要加一個事件在行日曆上嗎？ </p><a id="more"></a><h4 id="OBJC"><a href="#OBJC" class="headerlink" title="OBJC"></a>OBJC</h4><pre><code>EKEventStore *eventStore = [[EKEventStore alloc] init];EKEvent *event  = [EKEvent eventWithEventStore:eventStore];event.title     = @&quot;EVENT TITLE&quot;;event.startDate = [[NSDate alloc] init];event.endDate   = [[NSDate alloc] initWithTimeInterval:600 sinceDate:event.startDate];[event setCalendar:[eventStore defaultCalendarForNewEvents]];NSError *err;[eventStore saveEvent:event span:EKSpanThisEvent error:&amp;err];  </code></pre><h4 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h4><pre><code>let store = EKEventStore()store.requestAccessToEntityType(.Event) {(granted, error) in    if !granted { return }    var event = EKEvent(eventStore: store)    event.title = &quot;Event Title&quot;    event.startDate = NSDate() //today    event.endDate = event.startDate.dateByAddingTimeInterval(60*60) //1 hour long meeting    event.calendar = store.defaultCalendarForNewEvents    do {        try store.saveEvent(event, span: .ThisEvent, commit: true)        self.savedEventId = event.eventIdentifier     } catch {        // error     }}      </code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> Calendar </tag>
            
            <tag> EventKit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Delete in UITextField</title>
      <link href="/2019/01/02/textfieldDelete/"/>
      <url>/2019/01/02/textfieldDelete/</url>
      <content type="html"><![CDATA[<p>Q: 在UITextField之中，要怎麼知道delete按下去了呢？這時候  我們可以透過delegate來判斷是不是刪除鍵按到了 </p><a id="more"></a><h3 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h3><pre><code>import UIKitprotocol MyTextFieldDelegate {    func textFieldDidDelete()}class MyTextField: UITextField {    var myDelegate: MyTextFieldDelegate?    override func deleteBackward() {        super.deleteBackward()        myDelegate?.textFieldDidDelete()    }}</code></pre><p>實作</p><pre><code>import UIKitclass ViewController: UIViewController, MyTextFieldDelegate {    override func viewDidLoad() {        super.viewDidLoad()        let input = MyTextField(frame: CGRect(x: 50, y: 50, width: 150, height: 40))        input.myDelegate = self        view.addSubview(input)        input.becomeFirstResponder()    }    func textFieldDidDelete() {        print(&quot;delete&quot;)    }}</code></pre><h4 id="OBJC"><a href="#OBJC" class="headerlink" title="OBJC"></a>OBJC</h4><pre><code>//MyTextField.h//create delegate protocol@protocol MyTextFieldDelegate &lt;NSObject&gt;@optional- (void)textFieldDidDelete;@end@interface MyTextField : UITextField&lt;UIKeyInput&gt;//create &quot;myDelegate&quot;@property (nonatomic, assign) id&lt;MyTextFieldDelegate&gt; myDelegate;@end//Implementation#import &quot;MyTextField.h&quot;@implementation MyTextField- (void)deleteBackward {    [super deleteBackward];    if ([_myDelegate respondsToSelector:@selector(textFieldDidDelete)]){        [_myDelegate textFieldDidDelete];    }}@end</code></pre><p>實作</p><pre><code>@interface ViewController : UIViewController &lt;MyTextFieldDelegate&gt;@end//View Controller Implementation- (void)viewDidLoad {    MyTextField *input =      [[MyTextField alloc] initWithFrame:CGRectMake(0, 0, 70, 30)];    input.myDelegate = self;    [self.view addSubview:input];}//MyTextField Delegate- (void)textFieldDidDelete {    NSLog(@&quot;delete&quot;);}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> TextField </tag>
            
            <tag> Delegate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>What is QA</title>
      <link href="/2018/10/14/TestStory06/"/>
      <url>/2018/10/14/TestStory06/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事06-What-is-QA"><a href="#軟體開發故事06-What-is-QA" class="headerlink" title="軟體開發故事06 - What is QA?"></a>軟體開發故事06 - What is QA?</h2><p>從上述的故事之中，你會發現好像有人一直在滑手機或是不講話？<br><br>那只是在這個故事之中特意的呈現。<br></p><p>什麼是QA? <br><br>在專案管理之中，QA是有明確的定義，Quality Assurance-品質保證工程師。<br></p><a id="more"></a><p>為了避免和 QC (Quality Control)搞混，我們把專案執行的生命週期給畫出來，如此一來就知道角色的差異。</p><p><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/project_life_cycle.png" alt="專案生命週期"></p><p>QA在執行的後期，做的工作其實是測試員 Tester 的工作<br><br>如果知道明確的測試方式與工作，那麼由誰來做Tester，似乎就沒有那麼地強迫要非QA不可，有時候PM也跳下來測也不一定。</p><p>QA有多麼苦，我們可以看一下專案規模隨者時間演進的變化</p><p><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/CRsteps.png" alt="專案CR"></p><p>圖表由左到右，藍色的部份代表這一期的功能產出，之後的藍色代表原專案的新功能（Change Requestment）<br></p><p>為了計算方便，假設每個區塊需要1個小時的測試時間，區塊與區塊間相依性的整合測試一樣也是需要一個小時的測試。<br></p><p>那麼，專案在第一期的測試時間為一個小時，專案在第二期的時候是3小時，專案在第三期的時候需要7小時，第四期的時候，要完整的測完，則是需要15小時。(有沒有很可怕？？)</p><p>不自動化，純手動測試，就會出現測試人員根本就來不及測試就上線的情況了。</p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> QA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Other Tests</title>
      <link href="/2018/10/14/TestStory07/"/>
      <url>/2018/10/14/TestStory07/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事07-其他不同的測試與驅動開發"><a href="#軟體開發故事07-其他不同的測試與驅動開發" class="headerlink" title="軟體開發故事07 - 其他不同的測試與驅動開發"></a>軟體開發故事07 - 其他不同的測試與驅動開發</h2><p>在整個軟體開發的過程中，還是會有一些可能要做的測試。</p><p>舉個例子</p><h3 id="壓力測試"><a href="#壓力測試" class="headerlink" title="壓力測試"></a>壓力測試</h3><a id="more"></a><p>有聽過server在做壓力測試的，為什麼手機APP也有機會要做壓力測試？</p><p>舉個例子吧</p><p>以兩個帳戶之間互相轉帳為例子， a 有1000元 轉給 b 200元，b也同時轉200給 a，程式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let a = Account(id: 1, balance: 1000)</span><br><span class="line">let b = Account(id: 2, balance: 0)</span><br><span class="line"></span><br><span class="line">DispatchQueue.global(qos: .background).async &#123;</span><br><span class="line">    self.transfer(from: a, to: b, amount: 200)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global(qos: .background).async &#123;</span><br><span class="line">self.transfer(from: b, to: a, amount: 200)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func transfer(from: Account, to: Account, amount: Double) &#123;</span><br><span class="line">    from.synchronized(self) &#123;  () -&gt; Void  in</span><br><span class="line">        to.synchronized(self) &#123; () -&gt; Void in</span><br><span class="line">            from.withdraw(amount: amount)</span><br><span class="line">            to.deposit(amount: amount)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此時因為我們在背景執行轉帳時，就有可能發生Race condition或dead lock的情況發生，只做一次有可能是成功的，但是連續做個一萬次再來看兩個人的balance，一沒寫好，就有可能金額是不對的。</p><p>簡單的範例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">extension NSObject &#123;</span><br><span class="line">    func synchronized&lt;T&gt;(_ lock: AnyObject, _ closure: () throws -&gt; T) rethrows -&gt; T &#123;</span><br><span class="line">    objc_sync_enter(lock)</span><br><span class="line">    defer &#123; objc_sync_exit(lock) &#125;</span><br><span class="line">        return try closure()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="記憶體監控"><a href="#記憶體監控" class="headerlink" title="記憶體監控"></a>記憶體監控</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override func didReceiveMemoryWarning() &#123;</span><br><span class="line">   //這裡要測 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，不多解釋了。<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/memory_monitor.png" alt="記憶體監控"></p><h3 id="網路監控與測試"><a href="#網路監控與測試" class="headerlink" title="網路監控與測試"></a>網路監控與測試</h3><ul><li><p>Network Link Conditioner<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/networklinkconditioner.png" alt="Network Link Conditioner"></p></li><li><p>Packet Logger<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/packetlogger.png" alt="Packet Logger"></p></li><li><p>Charles Proxy<br><img src="https://xebialabs.com/assets/files/plugins/Charles.jpg" alt="Charles Proxy"></p></li></ul>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Press Test </tag>
            
            <tag> Monkey Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UI Test, Cucumberish</title>
      <link href="/2018/10/13/TestStory05/"/>
      <url>/2018/10/13/TestStory05/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事05-UI-Test，Cucumberish"><a href="#軟體開發故事05-UI-Test，Cucumberish" class="headerlink" title="軟體開發故事05 - UI Test，Cucumberish"></a>軟體開發故事05 - UI Test，Cucumberish</h2><p>工程師2 想要做 UI Testing, 又不想買機器的話呢？<br><br>那麼就看看測試的資訊時代，用程式測試程式是怎麼做的？<br></p><a id="more"></a><h3 id="工具很多，只不過我選了-Cucumberish"><a href="#工具很多，只不過我選了-Cucumberish" class="headerlink" title="工具很多，只不過我選了 Cucumberish"></a>工具很多，只不過我選了 Cucumberish</h3><p>你也可以選別的，比方說 calabash，appium，macaca,….</p><p>原因有機會再解釋。先來看一下 cucumberish吧</p><ul><li>安裝 cucumberish</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">target &apos;TestMe&apos; do</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  target &apos;TestMeTests&apos; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    pod &apos;Cucumberish&apos;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target &apos;TestMeUITests&apos; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>pod install 完成後開啟 workspace</p><p>設定的部份請參考<br><a href="https://github.com/Ahmed-Ali/Cucumberish" target="_blank" rel="noopener">Github Cucumberish</a></p><p>主要有三個資料夾 Scenario(環境)、Steps(操作步驟)和Features(SPE文件)</p><p>完成後的檔案與資料夾(如圖)<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/cucumber01.png" alt="Cucumberish01"></p><p>在實作的一開始，工程師2拿到了一份 SPE 的 Feature 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Feature: TestMe Cucumberish Login Test Exapmle</span><br><span class="line"></span><br><span class="line">Scenario Outline: Verify Login Process</span><br><span class="line">Given the app is running</span><br><span class="line">When I enter Account &quot;&lt;acc&gt;&quot; and Password &quot;&lt;pass&gt;&quot;</span><br><span class="line">Then I should see &quot;&lt;result&gt;&quot;</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">|  acc  |  pass   |    result       |</span><br><span class="line">|  aki  |  qaz    |    success      |</span><br><span class="line">|  aki  |  123    |    帳號密碼錯誤   |</span><br></pre></td></tr></table></figure><p>接著到 Scenario 裡加上一個 LoginPage.swift 程式碼如下，大意是把操作的步驟給實作出來</p><p>Scenario 程式碼，以Login為例，Home的也要做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import XCTest</span><br><span class="line"></span><br><span class="line">class LoginPage: Page &#123;</span><br><span class="line">    private lazy var account = findElement(.textField)[&quot;textAccount&quot;]</span><br><span class="line">    private lazy var password = findElement(.secureTextField)[&quot;textPassword&quot;]</span><br><span class="line">    private lazy var btnLogin = findElement(.button)[&quot;btnLogin&quot;]</span><br><span class="line">    </span><br><span class="line">    required init() &#123;</span><br><span class="line">        waitFor(element: account)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @discardableResult func checkPage() -&gt; LoginPage&#123;</span><br><span class="line">        XCTAssertTrue(account.exists)</span><br><span class="line">        XCTAssertTrue(password.exists)</span><br><span class="line">        XCTAssertTrue(btnLogin.exists)</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @discardableResult func inputData(_ acc: String, _ pass:String) -&gt; LoginPage&#123;</span><br><span class="line">        account.tap()</span><br><span class="line">        account.typeText(acc)</span><br><span class="line">        password.tap()</span><br><span class="line">        password.typeText(pass)</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    @discardableResult func clickLogin() -&gt;LoginPage&#123;</span><br><span class="line">        btnLogin.tap()</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @discardableResult func clickAlert(_ msg:String) -&gt;LoginPage&#123;</span><br><span class="line">        let msgResult = findElement(.alert).element.staticTexts.element(boundBy: 0).label</span><br><span class="line">        </span><br><span class="line">        XCTAssertEqual(msg,msgResult)</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後，Steps 把 Feature 的文件和 Scenario 裡的操作做結合</p><p>Steps 程式碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import XCTest</span><br><span class="line">import Cucumberish</span><br><span class="line"></span><br><span class="line">class StepDefinetion: NSObject &#123;</span><br><span class="line">    </span><br><span class="line">    var application : XCUIApplication!</span><br><span class="line">    </span><br><span class="line">    func setup(_ application: XCUIApplication)</span><br><span class="line">    &#123;</span><br><span class="line">        self.application = application</span><br><span class="line">        </span><br><span class="line">        Given(&quot;the app is running&quot;) &#123; (args, userInfo) -&gt; Void in</span><br><span class="line">            LoginPage().checkPage()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        When(&quot;I enter Account \&quot;([^\\\&quot;]*)\&quot; and Password \&quot;([^\\\&quot;]*)\&quot;&quot;)&#123;(args,userInfo)-&gt;Void in</span><br><span class="line">            </span><br><span class="line">            guard let acc = args?[0] , let pass = args?[1]</span><br><span class="line">                else &#123;</span><br><span class="line">                    XCTAssert(false)</span><br><span class="line">                    return</span><br><span class="line">            &#125;</span><br><span class="line">            LoginPage().inputData(acc, pass)</span><br><span class="line">            LoginPage().clickLogin()</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Then(&quot;I should see \&quot;([^\\\&quot;]*)\&quot;&quot;)&#123;(args,userInfo)-&gt;Void in</span><br><span class="line">            </span><br><span class="line">            guard let expectedResult = args?[0]</span><br><span class="line">                else &#123;</span><br><span class="line">                XCTAssert(false)</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            if expectedResult == &quot;success&quot; &#123;</span><br><span class="line">                HomePage().checkPage()</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                LoginPage().clickAlert(expectedResult)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class func setup(_ application: XCUIApplication)</span><br><span class="line">    &#123;</span><br><span class="line">        StepDefinetion().setup(application)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>— 此次範例的 <a href="https://github.com/ios-taipei/TestMe" target="_blank" rel="noopener">Github TestMe</a> 在此—</p><p>跑一下 UITest 看看結果</p><p><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/cucumberis-testresult.png" alt="Cucumberish01"></p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> UI Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UI Test, Record and Replay</title>
      <link href="/2018/10/13/TestStory04/"/>
      <url>/2018/10/13/TestStory04/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事04-UI-Test-，操作行為的錄製與播放"><a href="#軟體開發故事04-UI-Test-，操作行為的錄製與播放" class="headerlink" title="軟體開發故事04 - UI Test ，操作行為的錄製與播放"></a>軟體開發故事04 - UI Test ，操作行為的錄製與播放</h2><p>前情提要：工程師1把後端做好了</p><p>同時，另一位工程師2也把前端的UI也做好了，兩個前後端串接好後，直接交付由QA進行測試。</p><p>工程師2說：「前端不用測，QA會幫我們找到問題。」</p><p>如果你相信工程師2說的，那麼這章可以跳過不看。</p><a id="more"></a><h3 id="UI-要怎麼測？"><a href="#UI-要怎麼測？" class="headerlink" title="UI 要怎麼測？"></a>UI 要怎麼測？</h3><ul><li>原始時代 － 佷久很久以前，工程師自己手按一按</li><li>漁獵時代 － 使用者來按或找有空的人一起幫忙按一下</li><li>農業時代 － 找專職的QA 來按</li><li>工業時代 － 用機器來測試程式</li><li>資訊時代 － 寫測試程式來測試程式<br>A- I時代 － 用人工智慧來測試</li></ul><p>前三個時代就不講了，第四個時代的開始，其目的在減少QA的負擔（人數）</p><h3 id="怎麼用機器怎麼測試？機器能做什麼？？"><a href="#怎麼用機器怎麼測試？機器能做什麼？？" class="headerlink" title="怎麼用機器怎麼測試？機器能做什麼？？"></a>怎麼用機器怎麼測試？機器能做什麼？？</h3><p>大量、重覆、一成不變的工作，是可以由機器所取代的。<br><br>或許你用過XCode 內建的 Recorder 來錄製UITesting。<br><br>很簡單，在按下錄製鈕後，操作app，就會自動產生一堆程式碼了。看你想要重構與否，基本上就算是ui test了<br></p><p><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/uitest_record.png" alt="UI Test Record"></p><p>如果想要自己刻一個錄製機器呢？（為什麼待會會交代）<br><br>目標：做一個Mac APP，將模擬器上的操作錄製下來，儲存結束，並且可以回覆播放<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 找到模擬器</span><br><span class="line">2. 紀錄滑鼠位置與動作</span><br><span class="line">3. 儲存結果</span><br><span class="line">4. 重覆播放</span><br><span class="line">5. 紀錄結果</span><br></pre></td></tr></table></figure><p>開始吧</p><ol><li>透過pid（process id）找到模擬器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">StopwatchStart();</span><br><span class="line">CFArrayRef windowList = CGWindowListCopyWindowInfo(listOptions, kCGNullWindowID);</span><br><span class="line">StopwatchEnd(&quot;Create Window List&quot;);</span><br><span class="line"></span><br><span class="line">// Copy the returned list, further pruned, to another list. This also adds some bookkeeping</span><br><span class="line">// information to the list as well as </span><br><span class="line">NSMutableArray * prunedWindowList = [NSMutableArray array];</span><br><span class="line">   self.windowListData = [[WindowListApplierData alloc] initWindowListData:prunedWindowList];</span><br><span class="line"></span><br><span class="line">   CFArrayApplyFunction(windowList, CFRangeMake(0, CFArrayGetCount(windowList)), &amp;WindowListApplierFunction, (__bridge void *)(self.windowListData));</span><br><span class="line">CFRelease(windowList);</span><br><span class="line">   </span><br><span class="line">   for (NSInteger i = prunedWindowList.count-1; i&gt;=0; i--) &#123;</span><br><span class="line">       //iOS</span><br><span class="line">       if([[[prunedWindowList objectAtIndex:i] objectForKey:@&quot;applicationName&quot;] containsString:@&quot;Simulator&quot;])&#123;</span><br><span class="line">           </span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           [prunedWindowList removeObjectAtIndex:i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 其中 Application Name 是  Simulator， 如果你想用命令模式打開模擬器的話，可以用下面的指令玩看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xcrun instruments -s  //列出所有可用的的設備</span><br><span class="line">xcrun instruments -w &quot;iPhone XS (12.0)&quot;  //開啟模擬器</span><br><span class="line">xcrun simctl install booted &lt;app路径&gt; //安裝ipa</span><br><span class="line">xcrun simctl launch booted &lt;app identifier&gt; //打開指定的app</span><br><span class="line">xcrun simctl uninstall booted &lt;app identifier&gt; //解除安裝</span><br></pre></td></tr></table></figure><ol start="2"><li><p>模擬器開啟後，記錄模擬器的座標、尺寸、滑鼠的座標與滑鼠的動作</p></li><li><p>一連串的紀錄允許簡單的編輯修改，定義為一個action存在資料庫<br>，由許多action建構成一個 UI Test</p></li><li><p>將action用滑鼠事件回送到模擬器上，就可以重現QA的動作了 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//calculate new touch point x,y</span><br><span class="line">if(type==1)&#123;</span><br><span class="line">   [mMouseEvent mouseTouchDownWithPoint: CGPointMake(ex, ey)];</span><br><span class="line">&#125;else if(type==2)&#123;</span><br><span class="line">   [mMouseEvent mouseDragWithPoint: CGPointMake(ex, ey)];</span><br><span class="line">&#125;else if(type==3)&#123;</span><br><span class="line">   [mMouseEvent mouseTouchUpWithPoint: CGPointMake(ex, ey)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>拍畫面用以比對結果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StopwatchStart();</span><br><span class="line">CGImageRef windowImage = CGWindowListCreateImage(imageBounds, singleWindowListOptions, windowID, imageOptions);</span><br><span class="line">Profile(windowImage);</span><br><span class="line">StopwatchEnd(&quot;Single Window&quot;);</span><br><span class="line">[self setOutputImage:windowImage];</span><br><span class="line">CGImageRelease(windowImage);</span><br></pre></td></tr></table></figure><p>應用程式截圖<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/mac_recorder.png" alt="mac recorder"></p><h3 id="內建的很好用呀-為什麼不用內建的就好"><a href="#內建的很好用呀-為什麼不用內建的就好" class="headerlink" title="內建的很好用呀  為什麼不用內建的就好"></a>內建的很好用呀  為什麼不用內建的就好</h3><p>舉例來說<br></p><p>我們想要在同一個時間內跑多個裝置的ui test，或是ui test的test case太多，能不能夠分成兩組以上同時跑？</p><p>也有時候座標記錄，相對來說，可利用性比較大一些。<br></p><p>比方說</p><p>IoT 寫字機<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/writing_machine.jpeg" alt="mac recorder"></p><h3 id="價值在那裡？"><a href="#價值在那裡？" class="headerlink" title="價值在那裡？"></a>價值在那裡？</h3><p>聽話、任勞任怨<br>比一個QA工程師的薪水便宜<br>bla bla bla</p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> UI Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unit Test</title>
      <link href="/2018/10/13/TestStory03/"/>
      <url>/2018/10/13/TestStory03/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事03-單元測試-Unit-Test-與-測試趨動開發-Test-Driven-Development-TDD"><a href="#軟體開發故事03-單元測試-Unit-Test-與-測試趨動開發-Test-Driven-Development-TDD" class="headerlink" title="軟體開發故事03 - 單元測試 Unit Test 與 測試趨動開發 Test Driven Development (TDD)"></a>軟體開發故事03 - 單元測試 Unit Test 與 測試趨動開發 Test Driven Development (TDD)</h2><p>前情提要：工程師1有可能寫出一個功能，裡面的程式能通過測試用例，QA也沒測到，但是上線實測有可能會壞掉的嗎？</p><a id="more"></a><p>相信你應該有答案，那麼，為什麼要寫單元測試？<br><br>因為公司要求，因為要被code review，因為要導CI、CD，因為別人bla bla bla…<br><br>自己的想法呢？程式都沒時間寫了，不寫測試我可以多寫幾千行程式<br></p><p>大多時候工程師是一個不太好被別人說服的角色，那麼，我們來模擬一下工程師1怎麼使用SPE來同時寫出單元測試和實體程式</p><p>事前先準備好<br></p><ol><li>單元測試所需要的環境<br></li><li>實際程式的環境</li></ol><h3 id="Ready-Go"><a href="#Ready-Go" class="headerlink" title="Ready, Go!!"></a>Ready, Go!!</h3><p>第一步，看一下我們的user story，先把測試給寫出來</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假設(Given)，存在有一個可用的帳號與密碼</span><br><span class="line">當(When)，使用者開啟APP,輸入帳號 aki ,密碼 qaz，點選「登入」</span><br><span class="line">然後(Then)，要看到首頁的內容。(success)</span><br></pre></td></tr></table></figure><p>test case 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//============== Test ==================</span><br><span class="line">func testLoginSuccess() &#123;</span><br><span class="line"></span><br><span class="line">  XCTAssert(login(acc: &quot;aki&quot;, pass: &quot;qaz&quot;))     </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如上，我們寫出了第一個Test Case,此時試著跑一下Test,會得到 Test Failed，因為login函數還沒有實做。此時我們把Failed的狀態簡稱「<span style="color:red">紅燈</span>」。</p><p>接著，我們需要把紅燈的地方修到好，所以要實作一個login函數，用以檢核帳號密碼，最終回傳成功或失敗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//============== Code ==================</span><br><span class="line">func login(acc:String,pass:String)-&gt;Bool&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此時跑一下Test， 你會得到login回傳true，喔耶～～ 測試通過了，此時成功的狀態（success），我們簡稱為「<span style="color:green">綠燈</span>」。</p><p>身為工程師的你，摸一下你的xx，不用多想也知道，不管什麼東西進來都是true，所以，我們白痴地依依 Test Case 來<span style="color:blue">重構</span>一下功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//============== Code ==================</span><br><span class="line">func login(acc:String,pass:String)-&gt;Bool&#123;</span><br><span class="line">if acc==&quot;&quot; || pass==&quot;&quot; &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   return true</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白痴重構結束後，再跑一下測試，嗯嗯嗯  還是綠燈。那就可以拿下一個Test Case來做了</p><hr>第二個使用者故事 如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假設(Given)，存在有一個可用的帳號與密碼</span><br><span class="line">當(When)，使用者開啟APP,輸入帳號 aki ,密碼 123，點選「登入」</span><br><span class="line">然後(Then)，要跳出錯誤訊息（Failed）</span><br></pre></td></tr></table></figure><p>第二個Test case 如下：</p><h4 id="寫測試"><a href="#寫測試" class="headerlink" title="寫測試"></a>寫測試</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func testLoginFailed() &#123;</span><br><span class="line">    XCTAssertFalse(login(acc: &quot;aki&quot;, pass: &quot;123&quot;))     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跑測試亮紅燈"><a href="#跑測試亮紅燈" class="headerlink" title="跑測試亮紅燈"></a>跑測試亮紅燈</h4><h4 id="改code"><a href="#改code" class="headerlink" title="改code"></a>改code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//============== Code ==================</span><br><span class="line">func login(acc:String,pass:String)-&gt;Bool&#123;</span><br><span class="line">if acc==&quot;aki&quot; &#123;</span><br><span class="line">if(pass==&quot;qaz&quot;)&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;else if pass==&quot;123&quot;&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   return false</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跑一下測試，綠燈"><a href="#跑一下測試，綠燈" class="headerlink" title="跑一下測試，綠燈"></a>跑一下測試，綠燈</h4><h4 id="重構，跑一下測試，綠燈"><a href="#重構，跑一下測試，綠燈" class="headerlink" title="重構，跑一下測試，綠燈"></a>重構，跑一下測試，綠燈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//============== Code ==================</span><br><span class="line">func login(acc:String,pass:String)-&gt;Bool&#123;</span><br><span class="line">if acc==&quot;aki&quot; &#123;</span><br><span class="line">if(pass==&quot;qaz&quot;)&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   return false</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>無限loop直到所有的測試都通過，此時程式就寫好了，而且應該被完整的重構過。</p><h3 id="反思一下我們在上面的所有動作"><a href="#反思一下我們在上面的所有動作" class="headerlink" title="反思一下我們在上面的所有動作"></a>反思一下我們在上面的所有動作</h3><p>我們把上述的動作抽離出來<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Action 01: 寫好 Test Case 後,跑一下測試（嗯。。。紅燈）</span><br><span class="line">Action 02: 改code之後,跑一下測試（嗯。。。綠燈）</span><br><span class="line">Action 03: code的有沒有要重構或調整的部份，改完之後再跑一次測試，直到綠燈（重構）</span><br></pre></td></tr></table></figure><p>在01－03之間，藉由不斷地添加Test Case，跑test case，寫程式，重構，來建構一個開發的流程。</p><p>這就是 TDD 呀！！</p><h3 id="想一下，不寫測試不行嗎？"><a href="#想一下，不寫測試不行嗎？" class="headerlink" title="想一下，不寫測試不行嗎？"></a>想一下，不寫測試不行嗎？</h3><p>可以啊<br><br>那有可能會發生什麼問題？<br><br>QA會花很多力氣在做局部的測試，當一個專案愈大，就愈難完整的測到完，沒測試到的部份，頂多就是閉著眼睛上線，直接讓User幫你測試。這部份留到QA的部份再加以解釋</p><h4 id="先寫代碼，再寫測試不行嗎？"><a href="#先寫代碼，再寫測試不行嗎？" class="headerlink" title="先寫代碼，再寫測試不行嗎？"></a>先寫代碼，再寫測試不行嗎？</h4><p>可以啊<br><br>後來寫的測試可以證明這個代碼沒有bug，但是不能證明這個代碼能夠解決User使用上的問題<br></p><p>舉個例子吧。<br></p><p>我們想要寫一個function來知道一個字串是不是數字<br><br>比如說 “123” 時為true，”ABC”時為false，<br><br>於是工程師寫下了一段Code，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func isInteger(aStr:String) -&gt; Bool&#123;</span><br><span class="line">do &#123;</span><br><span class="line">   let a = try Int(aStr)</span><br><span class="line">       return true</span><br><span class="line">   &#125;catch &#123;</span><br><span class="line">   return false</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>語意是利用變數型別的轉換正確或失敗來判斷這一個變數是不是數字</p><p>如果不做測試的話，其實是不會知道問題在那裡<br><br>如果輸入了 “123” 為 true， 但是輸入了 “ABC” 一樣是true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func isInteger(aStr:String) -&gt; Bool&#123;</span><br><span class="line">        </span><br><span class="line">let number = Int(aStr)</span><br><span class="line">        </span><br><span class="line">   if number != nil &#123;</span><br><span class="line">     return true</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兩個 Test Case “123”,”ABC” 的回傳都符合我們的預期。</p><p>在一般的情況下，也許上面的code沒有問題，但是如果今天也許我們需要經營辛巴威市場時，我們加個測試看會不會過 <br><br>“1234567890123456789012345678901234567890”?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func testIsTrue()&#123;</span><br><span class="line">XCTAssert(isInteger(aStr: &quot;1234567890123456789012345678901234567890&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再次強調，在很多情況之下，我們是很相信工程師的"><a href="#再次強調，在很多情況之下，我們是很相信工程師的" class="headerlink" title="再次強調，在很多情況之下，我們是很相信工程師的"></a>再次強調，在很多情況之下，我們是很相信工程師的</h3><h3 id="工程師有沒有可能出錯？-那怕是千萬之一的機會，產品如果有問題，公司、團隊、個人能不能承擔犯錯之後的結果？"><a href="#工程師有沒有可能出錯？-那怕是千萬之一的機會，產品如果有問題，公司、團隊、個人能不能承擔犯錯之後的結果？" class="headerlink" title="工程師有沒有可能出錯？ 那怕是千萬之一的機會，產品如果有問題，公司、團隊、個人能不能承擔犯錯之後的結果？"></a>工程師有沒有可能出錯？ 那怕是千萬之一的機會，產品如果有問題，公司、團隊、個人能不能承擔犯錯之後的結果？</h3><h3 id="工程師能不能信用擔保，或者用性命擔保程式沒有什麼？"><a href="#工程師能不能信用擔保，或者用性命擔保程式沒有什麼？" class="headerlink" title="工程師能不能信用擔保，或者用性命擔保程式沒有什麼？"></a>工程師能不能信用擔保，或者用性命擔保程式沒有什麼？</h3><h3 id="寫了測試就不會出錯了嗎？"><a href="#寫了測試就不會出錯了嗎？" class="headerlink" title="寫了測試就不會出錯了嗎？"></a>寫了測試就不會出錯了嗎？</h3><p>會，人還是會犯錯的，只是在一連串的犯錯的學習中，可以透過TestCase來了解，程式為什麼這樣子寫<br>（有時候，別人也可以透過Test Case來了解程式的流程而不用深入程式實作的細節）</p><h3 id="應不應該追求所謂的100％的測試覆蓋率-100-Test-Coverage-？"><a href="#應不應該追求所謂的100％的測試覆蓋率-100-Test-Coverage-？" class="headerlink" title="應不應該追求所謂的100％的測試覆蓋率(100 Test Coverage)？"></a>應不應該追求所謂的100％的測試覆蓋率(100 Test Coverage)？</h3><p>要看投入的時間成本，和所回收的效益，才能判斷值不值得。這個判斷的點，我們晚點回過頭來探討。</p><p>註1:如果你想要做TDD的練習，那麼有一些道場(dojo、どじょ)提供一些套路（Kata、型、かた），其中一個比較有名的道場如下：<br><a href="http://www.codingdojo.org/KataCatalogue/" target="_blank" rel="noopener">http://www.codingdojo.org/KataCatalogue/</a></p><p>註2:<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/news-integer-parse.png" alt="辛巴威幣"></p><hr>想一下：有一段正則表示式是,你敢不敢直接把code推上production？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\A(?=[a-z0-9@.!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]&#123;6,254&#125;\z)(?=[a-z0-9.!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]&#123;1,64&#125;@)[a-z0-9!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\.[a-z0-9!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:(?=[a-z0-9-]&#123;1,63&#125;\.)[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+(?=[a-z0-9-]&#123;1,63&#125;\z)[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\z</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Specification By Example</title>
      <link href="/2018/10/13/TestStory02/"/>
      <url>/2018/10/13/TestStory02/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事02-實例化需求-Specification-by-Example"><a href="#軟體開發故事02-實例化需求-Specification-by-Example" class="headerlink" title="軟體開發故事02 - 實例化需求 Specification by Example"></a>軟體開發故事02 - 實例化需求 Specification by Example</h2><p>前情提要：在驗收的 D Day 當天，User發現了預期之外的驗證碼功能，覺得這項功能在手機上不需要，所以PM只好回過頭來，要求團隊再花時間把多做的功能拿掉。</p><p>請大家思考一下，那裡可能出現了問題？</p><a id="more"></a><p>不過是一個小小的使用者登入的功能，User心裡所想的，PM心裡所想的，工程師心裡所想的，QA心裡所想的，Art心裡所想的，都有可能不一樣？？？</p><p>1990年，Elizabeth Newton － 史丹福大學心理學研究生，通過研究一個簡單的遊戲，提出了「知識的詛咒」（curse of knowledge）,在遊戲的過程中（註1），會因為每個人的背景不同，教育不同，經驗的不同產生出一種認知的偏差。</p><p>以故事之中APP登入的功能為例</p><ul><li><p>User認為他對於登入的描述夠清楚了。</p></li><li><p>PM知道其他APP是怎麼登入的而User提出的需求沒有太特別，一定做得出來。</p></li><li><p>工程師1想的是APP其他型態的登入要不要做</p></li><li><p>工程師2在意的是資料欄位的檢核，也許還要先開規格給工程師1</p></li><li><p>Art只能憑過去的經驗，把猜測要出的圖出一出</p></li><li><p>QA還沒進入狀況，等開發出來之後再來看</p></li></ul><p>通常，一個團隊裡面，大多數會存在一個意見領袖，抑或是一個脾氣很大的人，或是比較強勢不讓步的人，這裡分別用工程師2的角色代入這個情境來看看。</p><ul><li>PM: 老闆說不要放驗證碼</li><li>工程師2：APP不加驗證碼的話，不就等於裸體上街一樣嗎，駭客知道你的API後一直打，後台掛掉你要負責嗎？</li><li>工程師1：沒有人在APP上放驗證碼的。</li><li>Art: （小聲）UX的確不放驗證碼比較好。</li><li>QA: 你們決定好就好。</li></ul><p>（幾個循環之後）</p><ul><li>工程師2：請尊重專業好嗎？資安你不懂啦，每個使用者登入都要檢核，放驗證碼是最簡單最基本的。(怒氣值＋10)</li><li>工程師2：舊專案的網頁有放驗證碼，後端的檢核機制是一樣的，你要給我2倍的時間把程式拉出來另外寫，當初你沒有說，所以估時間沒算到要加寫的時間。(怒氣值＋10)</li><li>工程師2：我有其他更重要的ticket，你要把一些ticket拿掉，這個當初是你沒有講清楚的，我不想加班幫你擦屁股。(怒氣值＋10)<br>（幾個循環又幾個循環之後）</li><li>工程師2：改好了。</li><li>工程師1(心想):舊的code先不砍好了，我有預感會加回來。</li><li>Art: 工程師1知道怎麼弄吧，自己砍就好了，設計沒有變，不用問我。 </li><li>QA（心想):終於….</li></ul><p>（此時生產線才開始活絡了起來，工程師1才開接後台，好了之後套圖，把之前的元件delete掉，好了QA才開始點個幾下，馬上交付給PM）</p><p>於是乎。User過了幾天後才拿到拿掉驗證碼的版本。</p><p><span style="color: gray">Scenario 檢討會議</span></p><ul><li>工程師1: PM 你要問清楚，需求不明確的話下面的人很難做事</li><li>工程師2: PM 每次都把問題丟到團隊裡，事後再來說這裡不對、那裡不對</li><li>Art: （轉筆+發呆）</li><li>QA: 不要只會說 PM, 配合 PM 本來就是職責</li><li>PM: (怒氣+100)</li></ul><p><span style="color: gray">Scenario 老闆辦公室</span></p><ul><li>PM: 老闆下次可不可以多講一些？</li><li>User: 我是老闆還是你是老闆？</li></ul><p>故事從這裡再停一停。反思一下上述已經發生的問題。</p><p>你看到了那些問題？</p><p>你覺得這個團隊的氣氛如何？是開心？還是很有凝聚力？<br><br>如果BDD、ATDD可行的話，為什麼還有這麼多問題呢？<br><br>有什麼方法可以讓這個團隊可以做出符合使用者期望的功能呢？<br></p><h3 id="實例化需求-Specification-by-Example"><a href="#實例化需求-Specification-by-Example" class="headerlink" title="實例化需求 Specification by Example"></a>實例化需求 Specification by Example</h3><p>我們來回顧一下團隊的需求金字塔</p><ul><li>User: 我說的算</li><li>PM: 準時或提早做出符合使用者期望的功能</li><li>Art: 不要違背UX和美感</li><li>QA: 做出來的東西要能夠測試</li><li>工程師2：在乎的是資料格式，檢核，串接、資安、系統穩定</li><li>工程師1：需要知道要的的範圍邊界，登入的方法很多，有無窮多種可能性的登入方法，比方說Facebook Login,指紋登入，人臉辨識登入。</li></ul><p>需求愈往下，就愈發散，創造各式各樣的可能性就愈多。</p><p>看起來，要讓需求不發散，避免各說各話，甚至是可以聚焦的一份好的規格文件。</p><p>然後，我們來看看這份好的文件要有那些優點？</p><ol><li>大家都看得懂（廢話）<br></li><li>大家看完之後不會衍生出一堆黑人問號<br></li><li>對要製做的功能與文件的描述能要夠相符，User也可以買單<br></li></ol><p>有人問我，為什麼PM寫的專案需求文件沒有人看？<br><br>裡面有scope time cost，quality… 想要找什麼，裡面都有寫了呀？(理論上是醬子沒錯)<br><br>實際上，很少有人會去看專案文件，這在軟體業裡算是常態吧，大多數軟體開發細節，或是User Story，很少會落在白紙黑字之上，通常文件寫好之後就束諸高閣，無人問津，最後連更新文件都變得是件苦差事。<br></p><p>一份沒有人看的文件，那怕製作再精美，多麼圖文並荿，也是沒有價值的廢紙。</p><p>那，有什麼好的建議呢？「舉個例子吧」</p><ul><li>OS:什麼？ 什麼意思？ 你說的是「舉個例子」？ 那你舉個例子來看看</li></ul><p>我們回到第一次的場景</p><p><span style="color:gray">Scenario 01: 地點－老闆辦公室 </span></p><ul><li><p>User： 幫我們的APP做一個登入的功能，當使用者登入後要看到首頁的內容。<br></p></li><li><p>PM: <s>好，我請團隊評估一下所需要的時間。應該一個星期可以完成。</s> 可以舉個例子嗎？</p></li><li><p>User：  (吱吱喳喳…)</p></li><li><p>PM：  (吱吱喳喳…)</p></li><li><p>PM：我整理一下，討論的結果是不是如下：</p></li></ul><ol><li>我用帳號 “aki”  密碼 “qaz” 按「登入」鈕之後，畫面會移轉到「首頁」</li><li>我用帳號 “aki”  密碼 “123” 按「登入」鈕之後，登入失敗，會跳出「帳號密碼錯誤」錯誤訊息</li></ol><p>為了方便，我們將它整理成一份表格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">As an User,</span><br><span class="line">I Want a login feature.</span><br><span class="line">When I enter @account and @password,</span><br><span class="line">So That I Can see Main Page.</span><br></pre></td></tr></table></figure><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>aki</td><td>qaz</td><td>success</td></tr><tr><td>aki</td><td>123</td><td>帳號密碼錯誤</td></tr></tbody></table><p><span style="color: gray">Scenario 02: 地點－團隊會議室</span></p><ul><li>工程師1：我想加兩條，沒有輸入帳號，或是沒有輸入密碼的都算是錯誤</li></ul><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>aki</td><td></td><td>帳號密碼錯誤</td></tr><tr><td></td><td>qaz</td><td>帳號密碼錯誤</td></tr></tbody></table><ul><li>工程師2：我想加個兩條，帳號有最短和最長的限制，太短或太長都不能讓使用者打我的api</li></ul><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>ak</td><td>qaz</td><td>帳號長度不符</td></tr><tr><td>DaijyoujitaniSaemonzaburo</td><td>qaz</td><td>帳號長度不符</td></tr></tbody></table><ul><li>團隊: (吱吱喳喳…)</li><li>PM: 我們統整一下表格如下：</li></ul><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>aki</td><td>qaz</td><td>success</td></tr><tr><td>aki</td><td>123</td><td>帳號密碼錯誤</td></tr><tr><td>aki</td><td></td><td>密碼不得為空</td></tr><tr><td></td><td>qaz</td><td>帳號不得為空</td></tr><tr><td>ak</td><td>qaz</td><td>帳號長度不符</td></tr><tr><td>DaijyoujitaniSaemonzaburo</td><td>qaz</td><td>帳號長度不符</td></tr><tr><td>（註2）</td><td></td><td></td></tr></tbody></table><ul><li>QA: 咦，Test Case竟然順便寫好了，那我可以用自動化工具來寫測試了(暗爽中)</li><li>Art: 只要三個元素呀，兩個輸入框，一個登入鈕，我就先出這幾個元素的圖</li><li>PM: 大家看一看沒問題的話，我就拿這一張表格再去和User再確認一次</li></ul><h3 id="從上面的表格中我們觀察到「有什麼」？"><a href="#從上面的表格中我們觀察到「有什麼」？" class="headerlink" title="從上面的表格中我們觀察到「有什麼」？?"></a>從上面的表格中我們觀察到「有什麼」？?</h3><ol><li>資料庫裡真的有一個帳號 aki ，密碼為 qaz</li><li>帳密未輸入的防呆有了</li><li>帳號基本的長度檢核有了</li></ol><h3 id="從上面的表格中我們觀察到「沒有什麼」？"><a href="#從上面的表格中我們觀察到「沒有什麼」？" class="headerlink" title="從上面的表格中我們觀察到「沒有什麼」？?"></a>從上面的表格中我們觀察到「沒有什麼」？?</h3><ol start="4"><li>沒有驗證碼(當PM拿著例子去和User確認時就會知道了)</li><li>密碼強度？ 一般常見的強規則是：<u>密碼最低要求8字元; 必須包含<br>至少一個大寫英文字元，至少一個小寫英文字元，至少一個數字字元，至少一個符號字元</u><br>自己試著練習一下，加上一條密碼強度檢核條件，也要順便檢查輸入的值和輸出的結果有沒有需要調整的</li></ol><h3 id="反思一下，這個團隊做了什麼樣子的改變？"><a href="#反思一下，這個團隊做了什麼樣子的改變？" class="headerlink" title="反思一下，這個團隊做了什麼樣子的改變？?"></a>反思一下，這個團隊做了什麼樣子的改變？?</h3><p>當有人為了這個流程舉了一個例子之後，所有的人都可以用這個例子放到自己心目中的流程去試一下，有什麼不對的地方，一旦發現了，再多加幾個例子來描述這個流程有什麼不足的地方，例子愈多，流程就愈完整，就愈不容易做出預期之外的功能了</p><h3 id="什麼樣的例子是好的例子？"><a href="#什麼樣的例子是好的例子？" class="headerlink" title="什麼樣的例子是好的例子？"></a>什麼樣的例子是好的例子？</h3><ol><li>愈真實的例子愈好</li><li>愈簡單愈好</li></ol><p>舉個例子</p><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>test</td><td>test</td><td>success</td></tr></tbody></table><p>工程師2拿出自己的測試資料當例子時，有沒有可能會測試通過，但是換個帳號就測試失敗了？有沒有可能有個通用密碼為test，不管什麼帳號用test當密碼都能登入。</p><p>拿真實的帳號來測，問題就自動消失了</p><p>舉第二個例子</p><table><thead><tr><th>account</th><th>password</th><th>result</th></tr></thead><tbody><tr><td>aki</td><td>qaz</td><td>success</td></tr><tr><td>DaijyoujitaniSaemonzaburo</td><td>qaz</td><td>帳號長度不符</td></tr><tr><td>DaijyoujitaniSaemonzabur</td><td>qaz</td><td>success</td></tr></tbody></table><p>帳號的長度少一個字元後就成功了<br>在邏輯上，這兩條指的是相同的一件事，就是帳號長度存在一個邊界，且邊界值為24, 第三條就顯得多餘了。</p><p>當然，你想要多加幾條測試來增加信心，也不是不行，但是生命就應該花時間在更有價值的事情上不是嗎？</p><p>註1：<br>遊戲有兩個角色，一個人是敲節奏的人（A），一個人是聽到節奏猜歌曲的人(B)。<br><br>實驗如下：<br><br>選定120首歌曲眾所能詳的歌曲，由A敲節奏，由B聽節奏猜歌曲，分別予以紀錄。<br><br>按照伊莉莎白根據實驗得出的結果:<br><br>A認為自己敲的節奏能夠讓B猜出來的機率為50%<br><br>B聽到A敲打的節奏而正確猜到歌曲的機為只有2.5%<br></p><p>註2：<br>大正寺谷 左衛門三郎</p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> SPE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Software Development Story 01 - User Story, ATDD and BDD</title>
      <link href="/2018/10/13/TestStory01/"/>
      <url>/2018/10/13/TestStory01/</url>
      <content type="html"><![CDATA[<h2 id="軟體開發故事01-使用者故事-User-Story-驗收測試動開發-ATDD-Acceptance-Test-Driven-與-行為驅動開發-BDD-Behavior-Driven-Design"><a href="#軟體開發故事01-使用者故事-User-Story-驗收測試動開發-ATDD-Acceptance-Test-Driven-與-行為驅動開發-BDD-Behavior-Driven-Design" class="headerlink" title="軟體開發故事01 - 使用者故事 User Story, 驗收測試動開發 ATDD -Acceptance Test Driven 與 行為驅動開發 BDD - Behavior Driven Design"></a>軟體開發故事01 - 使用者故事 User Story, 驗收測試動開發 ATDD -Acceptance Test Driven 與 行為驅動開發 BDD - Behavior Driven Design</h2><h3 id="很久很久以前，軟體開發的形狀是醬子的"><a href="#很久很久以前，軟體開發的形狀是醬子的" class="headerlink" title="很久很久以前，軟體開發的形狀是醬子的"></a>很久很久以前，軟體開發的形狀是醬子的</h3><p>  在大多數軟體開發的歷程中，當老闆藉由市場資訊以及用戶需求，口述軟體想要什麼樣子的操作，希望得到什麼樣子的結果，甚至對於軟體的細節，像是用辭字句，甚至是顏色等等。</p><p>  於是，使用者和工程師之間，就會不斷地在開發與驗收的過程中產生溝通的問題。<br>  <a id="more"></a><br>  為了解決使用者與工程師之間溝通(<s>雞同鴨講</s>）的問題，於是乎創造出一個職位叫做PM，擔任團隊的溝通窗口，建立一道防火牆，避免老闆因為專業度的不足，做出難以達成的目標，軟體成果無法交付，或是對於團隊直接指導棋，造成團隊向心力潰散。</p><h3 id="PM-在做什麼？"><a href="#PM-在做什麼？" class="headerlink" title="PM 在做什麼？"></a>PM 在做什麼？</h3><p>PM的出現是來解決問題的，為了向老闆報告，於是工作開始細分成一包包的工作包，介定要作的範圍、時間以及要花的成本，避免品質落差太大，所以要做品管，對內要做好團隊成員的團隊建立，團隊溝通的方式，管理風險，以及外包、採購的管理。最重要的任何一個可能會影響專案成敗的利害關係人都必須打點好，專案才有可能順利結案，老闆才能拿到如專案計劃所規劃的產出（軟體）。</p><h3 id="PM-最重要的是什麼？："><a href="#PM-最重要的是什麼？：" class="headerlink" title="PM 最重要的是什麼？："></a>PM 最重要的是什麼？：</h3><p>如果PM不懂技術，就會再長出一個System Analysis或是System Architecture的角色,如果PM不懂營運，就會再長出一個Business Analysis的角色，如果專案太大，就會再長出一些小PM，將專案分切成許多小專案。如果專案成本金額太高，財會部門會來幫忙，如果PM不懂時程規劃，就會再長出一個跟催(Expeditor)的角色，PM不懂品質管制，就會長出QA和QC，如果PM不懂任用人事，就會有Functional Manager或HR介入，如果PM不懂工具，MIS會來幫忙，如果PM不懂外包，就會由採購來介入。</p><p>一個團隊之所以變得如此偉大（真的要搞到這麼大？？），由此可見PM的重要性！！！</p><p>一個PM就要練就各式各樣的溝通模式（簡稱：見人說人話）身為一個團隊的窗口，能夠做到將老闆的表達，清楚地轉化為團隊不同成員之間可以正確理解的話語、文件或是其他形式的紀綠。管理團隊成員能夠在時程之內交付產出。</p><p>故事從這裡先停一停。反思一下可能存在的問題。</p><h3 id="要怎麼訓練大家有相同的溝通方式和基礎呢？？"><a href="#要怎麼訓練大家有相同的溝通方式和基礎呢？？" class="headerlink" title="要怎麼訓練大家有相同的溝通方式和基礎呢？？"></a>要怎麼訓練大家有相同的溝通方式和基礎呢？？</h3><p>舉個團隊日常的故事當例子吧</p><table><thead><tr><th>出場角色表</th><th align="left">職責說明</th></tr></thead><tbody><tr><td>User</td><td align="left">軟體所有權有者</td></tr><tr><td>PM</td><td align="left">出張嘴的防火牆</td></tr><tr><td>軟體工程師1</td><td align="left">前端開發者</td></tr><tr><td>軟體工程師2</td><td align="left">後端開發者</td></tr><tr><td>Art</td><td align="left">UI/UX，出圖都靠他</td></tr><tr><td>QA</td><td align="left">替User做早期驗收，對程式測試有足夠的了解，避免交付出太糟糕或是問題一堆的軟體，有時候沒有這個角色，大多是不進行測試，責任對內由工程師扛，對外由PM扛</td></tr><tr><td>用戶</td><td align="left">市場上真正的軟體操作者</td></tr></tbody></table><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p><span style="color:gray">Scenario 01: 地點－老闆辦公室 </span></p><ul><li>User： 幫我們的APP做一個登入的功能，當使用者登入後要看到首頁的內容。<br></li><li>PM: 好，我請團隊評估一下所需要的時間。應該一個星期可以完成。</li></ul><p><span style="color: gray">Scenario 02: 地點－團隊會議室</span></p><ul><li>PM: 老闆說APP要一個登入的功能，使用者登入後要看到首頁的內容。（90％老闆的表達原文轉錄）<br></li><li>工程師1: 只要登入就好？要不要Facebook Login? 要有人上去fb後台設定後，我才能串接哦<br></li><li>工程師2: 要開那些欄位？長度多少？ API那記錄那些東西？不要不自動登入？OAuth咧？JWT?<br></li><li>Art: 是不是給底圖和色碼就好了？<br></li><li>QA: 等你們做完我再測（繼續滑手機）<br></li></ul><p><span style="color: gray">!@#$%^&amp;<em>!@#$%^&amp;</em> 七嘴八舌分隔線  !@#$%^&amp;<em>!@#$%^&amp;</em>!@#$%^&amp;<em>!@#$%^&amp;</em></span><br><br><span style="color: gray">!@#$%^&amp;<em>!@#$%^&amp;</em> 七嘴八舌分隔線  !@#$%^&amp;<em>!@#$%^&amp;</em>!@#$%^&amp;<em>!@#$%^&amp;</em></span><br><br><span style="color: gray">!@#$%^&amp;<em>!@#$%^&amp;</em> 七嘴八舌分隔線  !@#$%^&amp;<em>!@#$%^&amp;</em>!@#$%^&amp;<em>!@#$%^&amp;</em></span><br></p><ul><li>PM: 我再去和 User 確定好了 <br></li></ul><hr>一天過去了，一天過去了，一天過去了，一天過去了<br>(除了PM之外，團隊都沒在忙)<hr><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><ul><li>PM: User說登入用帳號＋密碼，想要早點拿到，Facebook登入要不要做都可以，自動登入如果有的話是最好的了。User 不懂什麼是OAuth，什麼是JWT，你要用簡單的話說，不然我也不知道怎麼和User解釋<br></li><li>工程師2: 不懂不要做最好了，那帳號欄位長度多少？密碼強度呢？怎麼沒問呢？<br></li><li>PM: User才不懂那些東西，你照上次專案怎麼做就copy一份來接著做。<br></li><li>工程師1: 我畫面拉好了，等著後端做好之後，我再來串。以防萬一，我把JWT的code貼一份到程式裡放著，要用的話馬上就有了。（自信滿滿）<br></li><li>Art: (好像沒人理我，我自己出個RWD設計好了，以免被人說我沒做事)<br></li><li>QA: 等你們做完我再測（繼續滑手機）<br></li></ul><h3 id="Day-D-1）早上"><a href="#Day-D-1）早上" class="headerlink" title="Day (D-1）早上"></a>Day (D-1）早上</h3><ul><li>PM: QA東西測了沒？ 明天要交</li><li>QA: 東西還沒給我測試，誰知道他們在慢什麼，太晚給我，我又要加班測了，喂!PM,我要登記申請今天的加班。</li><li>工程師2: 我也要，如果QA測有問題的話，我也要加班來改。</li><li>工程師1: 避免你們改了什麼，要害我修改APP，原本要去約會的，只好改天了。</li><li>Art: 大家都加班了，我也加班stand by好了。</li><li>PM: ..!@#$%^&amp;<em>!@#$%^&amp;</em>…..</li></ul><h3 id="Day-D-1）晚上"><a href="#Day-D-1）晚上" class="headerlink" title="Day (D-1）晚上"></a>Day (D-1）晚上</h3><ul><li>QA: (測試中)</li><li>工程師1: (看ptt) </li><li>工程師2:（看youtube）</li><li>Art: （看pinterest）</li><li>QA: 這裡好像怪怪的，為什麼帳號輸入特殊符號也可以登入，你們在寫程式的時候自己都不測的嗎？</li><li>工程師1: 後端要擋一下呀！</li><li>工程師2: 前端為什麼不擋？</li></ul><p>(各自念個兩句後，就開程式起來改了)</p><ul><li>QA: (繼讀測試)</li><li>工程師1: (看ptt) </li><li>工程師2:（看facebook）</li><li>Art: （看Dcard）</li><li>PM: （好了沒？）</li></ul><hr>幾個循環之後，功能完善了，QA也驗完了<hr><ul><li>PM: 大家這麼努力為工作付出，有這麼好的團隊真的太幸福了。大家可以下班了。</li><li>眾人: （眼神死）很多東西一開始就講好，如果夠清楚的話，也不用最後再來一直改….</li></ul><h3 id="Day-D"><a href="#Day-D" class="headerlink" title="Day D"></a>Day D</h3><p><span style="color:gray">Scenario 01: 地點－老闆辦公室 </span></p><ul><li>User: 這..做出來的東西好像和我們一開始說的不一樣…怎麼多了一個驗證碼？</li><li>PM: 我會開一張ticket，請團隊拿掉。</li></ul><p><span style="color: gray">Scenario 02: 地點－團隊會議室</span></p><ul><li>PM: 是誰自動主張把驗證碼加上去的？</li><li>工程師2: 我們的網頁專案一直都有驗證碼的功能…</li><li>工程師1: (JWT的code這次沒用到，躺著裡面不會被發現吧)</li><li>ART: (iPad不用測呀？我有做，不過好像沒什麼人關心)</li></ul><h4 id="從上面的故事中我們觀察到了什麼？"><a href="#從上面的故事中我們觀察到了什麼？" class="headerlink" title="從上面的故事中我們觀察到了什麼？?"></a>從上面的故事中我們觀察到了什麼？?</h4><ol><li>溝通很重要  </li><li>每個人都覺得自己是個很好溝通的人（尤其是PM）</li><li>當下說好的東西不一定照著做，可能會受到以往的經驗而做出自己的判斷</li></ol><p>當然，或許你有其他的觀察，我們留到後面再說。</p><h4 id="你對於這個團隊的感覺是什麼？"><a href="#你對於這個團隊的感覺是什麼？" class="headerlink" title="你對於這個團隊的感覺是什麼？"></a>你對於這個團隊的感覺是什麼？</h4><ol><li>還算可以的團隊，至少東西有做出來了</li><li>好像還可以更好？</li></ol><h4 id="思考一下，對於這個團隊最有幫助的可能是什麼？"><a href="#思考一下，對於這個團隊最有幫助的可能是什麼？" class="headerlink" title="思考一下，對於這個團隊最有幫助的可能是什麼？"></a>思考一下，對於這個團隊最有幫助的可能是什麼？</h4><ol><li>有效的溝通</li><li>與User確認過的，一份大家都看得懂的好的規格書</li></ol><h3 id="什麼是使用者故事-User-Story"><a href="#什麼是使用者故事-User-Story" class="headerlink" title="什麼是使用者故事 User Story?"></a>什麼是使用者故事 User Story?</h3><p>回顧一下軟體開發的第一天 User說的話</p><p>「幫我們的APP做一個登入的功能，當使用者登入後要看到首頁的內容。」<br><br>這句話，其實就是一個典型的User Story。</p><p>我們稍微改一下描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">As an User,</span><br><span class="line">I Want a login feature.</span><br><span class="line">When I login,</span><br><span class="line">So That I Can see Main Page.</span><br></pre></td></tr></table></figure><p>對於User來說，完整地說出一個故事，就已經是相當盡責的User了。接著呢？PM和團隊要設法將一個個的故事拆解，變成許多工程師可以實作的功能，並且可以滿足故事的測試用例。好讓QA可以測試，一同做出使用者可以驗收的產品。</p><h3 id="由User-Story-衍生出的-ATDD、BDD"><a href="#由User-Story-衍生出的-ATDD、BDD" class="headerlink" title="由User Story 衍生出的 ATDD、BDD"></a>由User Story 衍生出的 ATDD、BDD</h3><p>拆解成可測試用例的動作就是所謂的ATDD, Acceptance Test Driven Design</p><p>關注於使用者的操作行為所需要的功能拆解就是所謂的BDD, Behavior Driven Design。</p><p>以下介紹 Gherkin 語法，用自然語言來定義與描述測試用例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Feature:</span><br><span class="line">在APP實現一個登入的功能</span><br><span class="line">Scenario:</span><br><span class="line">假設(Given)，存在有一個可用的帳號與密碼</span><br><span class="line">當(When)，使用者開啟APP,輸入帳號,密碼，點選「登入」</span><br><span class="line">然後(Then)，要看到首頁的內容。</span><br></pre></td></tr></table></figure><p>如此一來，我們就能夠將一個個的使用者故事，轉化成一個個可以讓大家容易理解的測試用例，工程師知道怎麼做，QA知道怎麼驗，使用者在驗收時就一定會買單了。</p><p>（美美的畫面如何測試與驗收，留到UI Testing時再來說，一般而言，一定也可以用Gherkin語法來闡述有關UI/UX的測試用例）</p><p>（後話）：Gherkin語法和企管學裡的 STAR 非常地像，在大公司裡，或多或少都會用STAR語法來寫HR最喜歡的績效評量(Performance Appraisal)或是在面試時用STAR來檢驗應徵者的描述是否完整。<br>S: Situation, T:Task, A:Action, R:Result</p><p>那麼要如何正確地寫出好的Acceptance Test Cases?<br>要怎麼樣做會更好？？ </p><p>&lt;未完待續&gt;</p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> User Story </tag>
            
            <tag> ATDD </tag>
            
            <tag> BDD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DUNS申請以及相關問題</title>
      <link href="/2018/06/24/duns/"/>
      <url>/2018/06/24/duns/</url>
      <content type="html"><![CDATA[<h2 id="D-U-N-S-申請以及相關問題"><a href="#D-U-N-S-申請以及相關問題" class="headerlink" title="D-U-N-S 申請以及相關問題"></a>D-U-N-S 申請以及相關問題</h2><p>Q: What is D-U-N-S?</p><a id="more"></a><p>A:   The D‑U‑N‑S Number is a unique nine-digit identifier for businesses. It is used to establish a D&amp;B® business credit file, which is often referenced by lenders and potential business partners to help predict the reliability and/or financial stability of the company in question. “D‑U‑N‑S,” which stands for data universal numbering system, is used to maintain up-to-date and timely information on more than 300 million global businesses.</p><p>大意是說，有跨國生意需求時，可以幫你做基本的徵信，以降低風險。</p><p>不知為何，被APPLE拿來當做公司帳號的初步篩選。因此，如果想要申請公司或組織的開發者計劃，或是企業方案之前，都要先有一組D-U-N-S號碼，才能夠繼續進行。</p><p>通常在台灣，如果是成立一段時間的公司，會由台灣鄧白氏主動幫你加入，申請之前，可以先查一下，看有沒有已經有號碼了</p><ul><li>點我 <a href="https://developer.apple.com/enroll/duns-lookup/#!/search" target="_blank" rel="noopener">查詢 D-U-N-S</a><ul><li><span style="color:blue">Legal</span> entity name （公司組織法律名稱）</li><li>Headquarters address (總公司地址)</li><li>Mailing address (郵件位址)</li><li><span style="color:blue">Your work contact information</span> (聯絡方式)</li></ul></li></ul><p>如果沒有的話，就必須要申請 D-U-N-S 了，一樣的流程，只是時間會久一點（據說要五個工作天，建議是多留點時間等等），這裡會由D&amp;B的真人來電話聯絡，用以確認是否為正常的公司。</p><p><span style="color:red">有可能被reject的事項為</span></p><ul><li>獨資的個人公司</li><li>無法查到公司正確的相關資訊<ul><li>DBAs - Do Business As XXX (e.g. iOS@Taipei 不是一個合法的公司名稱)</li><li>Fictitious Name - 虛擬名稱</li><li>貿易名</li><li>分公司名 （需由總公司統一申請） </li></ul></li><li>這裡會用真人打電話聯絡確認，回答如果不正確的話，可是會被reject的 </li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 教學 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>寫在程式開發之前00-1</title>
      <link href="/2018/06/24/Tutorial_00_1/"/>
      <url>/2018/06/24/Tutorial_00_1/</url>
      <content type="html"><![CDATA[<h2 id="寫在程式開發之前-00-1"><a href="#寫在程式開發之前-00-1" class="headerlink" title="寫在程式開發之前 00-1"></a>寫在程式開發之前 00-1</h2><p>Q: 什麼是 <u style="color:blue">Apple ID</u>? 什麼又是 <u style="color:blue">Developer Program</u>?</p><a id="more"></a><p>A: </p><ul><li><span style="color:#666">假設你使用過apple的任一個電子設備，並且註冊過帳號，那麼這個帳號則稱為 Apple ID</span> </li><li><span style="color:#666">假設你使用<span style="color:blue">Apple ID</span>登入<a href="http://developer.apple.com" target="_blank" rel="noopener">開發者登入</a></span> 進行操作, <ul><li>若你未入加入任何一個開發者計劃，會被提示 <span style="color:blue">Enroll in iOS Developer Program</span></li><li>若你已加入，則會顯示 <span style="color:blue">Individual</span> 和 <span style="color:blue">Company/Organization</span> 兩種不同的類型 (需支付一年$99USD的費用)，此時就可以進行後台的使用，如憑證、裝置管理、APP管理等功能，同時 <a href="http://itunesconnect.apple.com" target="_blank" rel="noopener">itunes connect</a> 也可以針對上架的APP進行管理<ul><li>獨立個人開發者 (<span style="color:blue">Individual</span>) 可以單人使用，但是無法加入第二個、第三個開發者共同開發，如果有共同協作開發需求時，只能將自身的憑證與相關檔案交付給其他人才能同步開發，或是在xcode的偏好設定中，輸入帳號密碼給第三者。</li><li>公司、組織 (<span style="color:blue">Company/Organization</span>) 則是可以加入多人共同開發，如果有人員異動時，也方便由帳號管理中加入或移除，而非由單一帳密或憑證檔案管理的方式。</li><li>要申請為公司類別，需要 <a href="https://www.dnb.com.tw/" target="_blank" rel="noopener">DUNS 鄧白氏號碼</a>，若只為了apple 開發申請的話，可以加入免費版本。如何申請 <span style="color:blue">DUNS</span>，會由另一篇文章來解釋。</li></ul></li><li>若有企業開發需求（B2B），或是 (<del style="color:red"> 無法 </del>) 不想在app store上架等等，可以申請 <span style="color:blue">Enterprise Program</span> (＄299 USD/年), 申請方式和公司類別相同，但是申請審查會更加地嚴格。申請流程會用另一篇文章來解說。</li><li><span style="color:orange">附註：Apple ID 若為Enterprise Program的話，是不能和其他 developer program混用的，在此同時，itunes connect 也會變成無法登入的狀態</span></li><li>最後，如果想要開發apple的配件的話，則是要啟用 MFi Program，繳的費用和上面都不一樣，這又是另一篇故事了。</li></ul></li></ul><hr>Q: 什麼是 <u style="color:blue">Team ID</u> ? 什麼是 <u style="color:blue"> App ID</u> ? 什麼是 <u style="color:blue"> Bundle ID</u>? 什麼是 <u style="color:blue">Product ID</u> ?<p>A:</p><ul><li><span style="color:blue"> Product ID</span><span style="color:#666"> 指的是在app store裡，用來區分不同的APP之間的差異。一些功能，如推播，就是依賴Product ID來找到你的APP，好將訊息正確送到你的手機上。Product ID是由</span> <span style="color:blue"> Team ID<span> + <span style="color:blue">Bundle ID<span><span style="color:#666">所組成的</span></span></span></span></span></li><li><span style="color:blue">Team ID</span><span style="color:#666">是在加入開發者計劃後，由系統給予的一組文字，你可以在<a href="https://developer.apple.com/account/#/membership" target="_blank" rel="noopener">開發者網站 &gt; 會員（membership）</a></span><span><span style="color:#666">裡找到這個值。(未來如果想要推播的話，這個值就會派得上用場了)</span></span></li><li><span style="color:blue"> App ID </span><span style="color:#666">通常會使用</span><span style="color:blue">域名反解</span>(reverse domain name)<span style="color:#666">的規則以避免和其他人重複，未來上架時無法新增APP。</span></li><li><span style="color:blue"> App ID </span><span style="color:#666">在 XCode裡又稱之為  </span><span style="color:blue"> Bundle Identifier</span>，<span style="color:#666">也有人寫成</span><span style="color:blue"> Bundle ID</span>，<span style="color:#666"></span></li></ul><hr>Q: 什麼是 <u style="color:blue">UUID</u> ? 什麼是 <u style="color:blue"> advertisingIdentifier</u> ? <p>A:</p><ul><li><span style="color:blue">UDID (Unique Device Identifier)</span> <span style="color:#666">指的是iOS設備上唯一的裝置識別標籤 - 和 UUID 不同 Universally Unique Identifier）</span></li><li><span style="color:orange">附註：APP刪除再重裝的時候，UDID據說是會改變的，通常會寫入一份在手機的keychain裡，在做一些統計的時候派得上。</span></li><li><span style="color:blue">advertisingIdentifier</span><span style="color:#666">是另一個辨別裝置的標籤，由AdSupport.Framework提供，如果沒有使用到廣告但是加入了advertisingIdentifier的呼叫的話，可是會被<span style="color:red">退件</span><span style="color:#666">的</span></span></li><li>自已產？！！！吃飽太閒的話，也可以啦！！</li><li><span style="color:orange">在 itunes 桌面應用程式裡，接上手機並且信任之後，可以在手機的摘要裡找到 UDID</span></li><li><span style="color:orange">XCode裡的裝置，摘要裡也找得到。</span></li><li><span style="color:orange">當然，也可以下載一些來路不明的描述檔加以信任，並且連到特殊的網站後，可以查得到UDID</span></li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 教學 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Carthage-introduction</title>
      <link href="/2018/06/21/Carthage-introduction/"/>
      <url>/2018/06/21/Carthage-introduction/</url>
      <content type="html"><![CDATA[<p>相信大家對於CocoaPods非常的熟悉，用的愛不釋手，那麼為什麼還要看一下Carthage呢？</p><a id="more"></a><p>在還沒有CocoaPods之類，大家都是用拖檔案，拖library進來，甚至是拖另一個專案到專案裡面來，記得還要<br>copy items if needed，有CocoaPods，只要幾行指令，就完成了所有的工作了，就連考試都得了一百分呢！！</p><p>Carthage與CocoaPods的不同在那裡呢？</p><p>首先，CocoaPods預設會自動產生具有dependency的workspace並且更新你的專案檔，Carthage則是使用xcodebuild來打包成framework，以方便引用，避免污染專案檔</p><p>再來，CocoaPods在每次編譯時，都會重新打包所有的pods，當使用第三方元件使用的多時，編譯就會變慢，有機會會差到幾十秒</p><p>最後，Carthage比CocoaPods好封裝多了，只要開一個Project/Framework,裡面的scheme設為shared就可以了</p><p>附帶一提的是 Carthage 的打包，可以不讓別人看到source code，這不知道要算優點還是缺點</p><p>1。安裝Carthage</p><p>Carthage提供OS X平台的pkg安裝文件，可以從Github的最新release中找到，按照指示一步步安裝即可。</p><p>2。新增framework到程式裡</p><p>安裝完Carthage後，你能够使用它来新增framework到你的專案裡。注意Carthage只支持dynamic framework(iOS8以上)。</p><p>3。執行</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage update</span><br></pre></td></tr></table></figure><p>和CocoaPods一樣，會將相依的資料抓到 Carthage/Checkouts 目錄下，並且編譯好</p><p>4。設定<br>在你的專案的target的[General][Embedded Binaries]，將framework從Carthage.build裡拉進去。<br>（如果有git，也順便push上去，醬子其他人只要執行carthage bootstrap就能使用了。</p><p>5。update<br>如果變動了Cartfile，或者想升级到最新版本，執行carthage update命令就可以了。</p><p>6。檢查<br>如果編譯失敗的話，試著在命令列執行</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -scheme <span class="type">SCHEME</span> -workspace <span class="type">WORKSPACE</span> build</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -scheme <span class="type">SCHEME</span> -project <span class="type">PROJECT</span> build</span><br></pre></td></tr></table></figure><p>其中大寫的地方要換成你的workspace或專案名稱, 有沒有很簡單？</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Dependency Management </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GCD</title>
      <link href="/2018/06/21/GCD/"/>
      <url>/2018/06/21/GCD/</url>
      <content type="html"><![CDATA[<h2 id="GCD-有許多用法，不知道你會那幾種？"><a href="#GCD-有許多用法，不知道你會那幾種？" class="headerlink" title="GCD 有許多用法，不知道你會那幾種？"></a>GCD 有許多用法，不知道你會那幾種？</h2><a id="more"></a><p><strong>1. 背景執行</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultPriority = <span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span></span><br><span class="line"><span class="keyword">let</span> backgroundQueue = dispatch_get_global_queue(defaultPriority, <span class="number">0</span>)</span><br><span class="line">dispatch_async(backgroundQueue, &#123;</span><br><span class="line">     <span class="keyword">let</span> result = doSomeExpensiveWork()</span><br><span class="line">     dispatch_async(dispatch_get_main_queue(), &#123;</span><br><span class="line">          <span class="comment">//use `result` somehow </span></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. Singleton</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype) sharedInstance &#123;</span><br><span class="line">     <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">     <span class="keyword">static</span> id sharedInstance;</span><br><span class="line">     dispatch_once(&amp;amp;amp;onceToken, ^&#123;</span><br><span class="line">          sharedInstance = [[<span class="keyword">self</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. with blocks</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">DoneBlock</span> = () -&amp;gt; ()</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">WorkBlock</span> = (<span class="type">DoneBlock</span>) -&amp;gt; ()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSerialWorker</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">let</span> serialQueue = dispatch_queue_create(<span class="string">"ios.taipei.queue"</span>, <span class="type">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">enqueueWork</span><span class="params">(work: WorkBlock)</span></span> &#123;</span><br><span class="line">          dispatch_async(serialQueue) &#123;</span><br><span class="line">               <span class="keyword">let</span> semaphore = dispatch_semaphore_create(<span class="number">0</span>)</span><br><span class="line">               work(&#123;</span><br><span class="line">                    dispatch_semaphore_signal(semaphore)</span><br><span class="line">               &#125;)</span><br><span class="line">               dispatch_semaphore_wait(semaphore, <span class="type">DISPATCH_TIME_FOREVER</span>)</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. multi-task</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t group = dispatch_group_create()</span><br><span class="line">     <span class="keyword">for</span> item <span class="keyword">in</span> someArray &#123;</span><br><span class="line">          dispatch_group_async(group, backgroundQueue, &#123;</span><br><span class="line">               performExpensiveWork(item: item)</span><br><span class="line">          &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">     dispatch_group_notify(group, dispatch_get_main_queue(), &#123;</span><br><span class="line">     <span class="comment">// all the work is complete</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpotLight 初探</title>
      <link href="/2018/06/21/Spotlight-inspect/"/>
      <url>/2018/06/21/Spotlight-inspect/</url>
      <content type="html"><![CDATA[<img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/spotlight01.png"><p>當使用者使用spotlight查詢時，總是有些app會列出內容出來，那又是怎麼樣的小技巧呢？</p><a id="more"></a><p>先把兩個必要的framework包進來</p><pre class="prettyprint">import CoreSpotlightimport MobileCoreServices</pre><p>接著，準備一個獨立的ID，避免與別的app衝突，通常會使用域名反解，與一個資料陣列,型別為 CSSearchableItem</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> domainID: <span class="type">String</span> = <span class="string">"com.yuaki.informationPlus"</span></span><br><span class="line"><span class="keyword">var</span> searchableItems: [<span class="type">CSSearchableItem</span>] = []</span><br></pre></td></tr></table></figure><p>接著，</p><p>定義每筆資料的屬性設定 (item為資料物件)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attributeSet = </span><br><span class="line"><span class="type">CSSearchableItemAttributeSet</span>(itemContentType: kUTTypeItem <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">attributeSet.title = item.title</span><br><span class="line">attributeSet.contentDescription = item.subtitle</span><br><span class="line">attributeSet.contentCreationDate = item.date</span><br></pre></td></tr></table></figure><p>接著為這個屬性設定關鍵字,以方便被搜尋</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define search keywords</span></span><br><span class="line"><span class="keyword">var</span> keywords = item.title.componentsSeparatedByString(<span class="string">" "</span>)</span><br><span class="line">keywords.appendContentsOf(item.subtitle.componentsSeparatedByString(<span class="string">" "</span>))</span><br><span class="line">attributeSet.keywords = keywords</span><br></pre></td></tr></table></figure><p>然後把屬性放到 CSSearchableItem裡 再加到陣列中備用</p><pre class="prettyprint">let searchItem = CSSearchableItem(uniqueIdentifier: "Parking", domainIdentifier: domainID, attributeSet: attributeSet)searchableItems.append(searchItem)</pre><p>最後加到index裡</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CSSearchableIndex</span>.defaultSearchableIndex().indexSearchableItems(searchableItems) &#123; (error) -&amp;gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">     <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(error?.localizedDescription)</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"items indexed witch success!"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>醬子就好了！！！</p><p>其中uniqueIdentifier可以在 continueUserActivity 的userInfo 被撈取</p><p>有沒有很方便呀</p><p>附記：index看起來沒有容量的限制，意思是…… 我可以塞爆他嗎？</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> spotlight </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode 搜尋小技巧</title>
      <link href="/2018/06/21/xcode-search/"/>
      <url>/2018/06/21/xcode-search/</url>
      <content type="html"><![CDATA[<p>茫茫碼海中，要怎麼找到你想要找的那一段程式碼？關鍵字下的不夠精準，找不到或是搜尋的資料太多，都是種苦惱。還是想找個Hex? 找Tab? 找ip？ 找url？ 找email?</p><p>好的搜尋技巧帶你上天堂，下面幾個技巧該可以能帶你上天堂</p><a id="more"></a><ol>     <li><strong>定義搜尋（只搜尋「定義」的字串）</strong></li></ol>搜尋關鍵字會把所有找到的資料帶出來（以simple為例）<img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-search-definition01.png" width="264" height="260"><p>在find的第二層，將搜尋改為definition<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-search-definition02.png" alt="定義02" width="281" height="246"></p><p>結果就只會出現「定義」裡的關鍵字搜尋了<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-search-definition03.png" alt="定義03" width="263" height="260"></p><p>&nbsp;</p><p><strong>2. Pattern </strong></p><p>在搜尋裡先打一個「”」,用以區隔 pattern之用，接著，在放大鏡裡點選 insert pattern<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-insert-pattern.png" alt="pattern01" width="263" height="132"></p><p>接著，點選「url」,再補個「”」給他<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-insert-pattern-url.png" alt="pattern02" width="277" height="310"></p><p>結果，就是我們想要的結果<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-insert-pattern-result.png" alt="pattern03" width="261" height="150"></p><p><strong>3. 指定路徑</strong></p><p>如果是已知路徑下搜尋，只要在 下方的「in Workspace」點一下</p><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-path01.png" alt="path01" width="267" height="130"><p>再點選你要搜尋的路徑就可以了</p><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-path02.png" alt="path02" width="266" height="233"><p>有興趣的人還有scope的進階版可以玩<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-path03.png" alt="path03" width="805" height="175"></p><ol start="4"><li>Call Hierarchy</li></ol><p>想知道有誰呼叫了某個函數？<br><img class="aligncenter wp-image-5 size-full" src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-call-Hierarchy.png" alt="call-hierarchy" width="260" height="189"></p><p>還有一個方法，就是當你移到函數的位置時<br><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/ios%40Taipei/xcode-call-Hierarchy02.png" alt="call-hierarchy" width="567" height="463"></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> xCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>取得手機現在正在用的語言</title>
      <link href="/2018/05/03/detectLanguage/"/>
      <url>/2018/05/03/detectLanguage/</url>
      <content type="html"><![CDATA[<p>Q: 這邊要教你取得手機現在正在用的語言 </p><a id="more"></a><h3 id="OBJC"><a href="#OBJC" class="headerlink" title="OBJC"></a>OBJC</h3><pre><code>[[NSBundle mainBundle] preferredLocalizations];</code></pre><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><pre><code>let language = NSBundle.mainBundle().preferredLocalizations.first</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移除字串中的html tag</title>
      <link href="/2018/01/23/NoHtml/"/>
      <url>/2018/01/23/NoHtml/</url>
      <content type="html"><![CDATA[<p>Q: 這邊要教你把html字串給清除掉 </p><a id="more"></a><h3 id="OBJC"><a href="#OBJC" class="headerlink" title="OBJC"></a>OBJC</h3><pre><code>-(NSString *) stringByStrippingHTML {  NSRange r;  NSString *s = [[self copy] autorelease];  while ((r = [s rangeOfString:@&quot;&lt;[^&gt;]+&gt;&quot; options:NSRegularExpressionSearch]).location != NSNotFound)    s = [s stringByReplacingCharactersInRange:r withString:@&quot;&quot;];  return s;}</code></pre><h3 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h3><pre><code>let encodedString = &quot;HTML String&quot;guard let data = htmlEncodedString.data(using: .utf8) else {    return nil}let options: [NSAttributedString.DocumentReadingOptionKey: Any] = [    .documentType: NSAttributedString.DocumentType.html,    .characterEncoding: String.Encoding.utf8.rawValue]guard let attributedString = try? NSAttributedString(data: data, options: options) else {    return nil}let decodedString = attributedString.string</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> Extension </tag>
            
            <tag> Html </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>任意角的CornerRadius</title>
      <link href="/2017/05/13/CustomizedCornerRadius/"/>
      <url>/2017/05/13/CustomizedCornerRadius/</url>
      <content type="html"><![CDATA[<p>Q: 這邊要教你把任意一個角給圓角化 </p><a id="more"></a><p>Extension</p><pre><code>extension UIView {   func roundCorners(corners: UIRectCorner, radius: CGFloat) {        let path = UIBezierPath(roundedRect: bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))        let mask = CAShapeLayer()        mask.path = path.cgPath        layer.mask = mask    }}</code></pre><p>實作</p><pre><code>override func layoutSubviews() {    super.layoutSubviews()    roundCorners(corners: [.topLeft, .topRight, .bottomLeft], radius: 3.0)}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> swift </tag>
            
            <tag> cornerradius </tag>
            
            <tag> CCLayer </tag>
            
            <tag> Extension </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何知道網路通不通？</title>
      <link href="/2017/04/12/Conectivity/"/>
      <url>/2017/04/12/Conectivity/</url>
      <content type="html"><![CDATA[<p>Q: 如何知道網路通不通？</p><a id="more"></a><h4 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h4><ol><li>將別人寫好的 Reachability 引用進來 <a href="https://github.com/ashleymills/Reachability.swift" target="_blank" rel="noopener">https://github.com/ashleymills/Reachability.swift</a></li></ol><code>    let reachability = Reachability()!<pre><code>reachability.whenReachable = { reachability in    if reachability.connection == .wifi {        print(&quot;Reachable via WiFi&quot;)    } else {        print(&quot;Reachable via Cellular&quot;)    }}reachability.whenUnreachable = { _ in    print(&quot;Not reachable&quot;)}do {    try reachability.startNotifier()} catch {    print(&quot;Unable to start notifier&quot;)}</code></pre></code><h4 id="OBJC-Reachability"><a href="#OBJC-Reachability" class="headerlink" title="OBJC Reachability"></a>OBJC Reachability</h4><ol><li><p>引用 SystemConfiguration.Framework </p></li><li><p>將別人寫好的 Reachability 引用進來 <a href="https://github.com/tonymillion/Reachability" target="_blank" rel="noopener">https://github.com/tonymillion/Reachability</a></p></li><li><p>實作 interface</p></li></ol><code><pre><code>#import &quot;Reachability.h&quot;@interface MyViewController (){    Reachability *internetReachableFoo;}@end</code></pre></code><ol start="4"><li><p>實作 .m</p><code> \- (void)testInternetConnection{    internetReachableFoo = [Reachability reachabilityWithHostname:@"www.google.com"];<pre><code>internetReachableFoo.reachableBlock = ^(Reachability*reach)</code></pre><p> {</p><pre><code>dispatch_async(dispatch_get_main_queue(), ^{    NSLog(@&quot;Yayyy, we have the interwebs!&quot;);});</code></pre><p> };</p><p> internetReachableFoo.unreachableBlock = ^(Reachability*reach)<br> {</p><pre><code>dispatch_async(dispatch_get_main_queue(), ^{    NSLog(@&quot;Someone broke the internet :(&quot;);});</code></pre><p> };</p><p> [internetReachableFoo startNotifier];<br> }    </p></code></li></ol><code></code>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> 網路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在程式裡放入字型檔</title>
      <link href="/2017/04/12/CustomizedFont/"/>
      <url>/2017/04/12/CustomizedFont/</url>
      <content type="html"><![CDATA[<p>Q: 想使用不同的字型嗎？</p><a id="more"></a><ol><li><p>將自定義字體文件以資源(resource)的形式添加到專案中</p></li><li><p>在Info.plist中增加一個key-Array，key 的名稱必須為UIAppFonts</p></li><li><p>對於每種要加入的字體，必須輸入字體文件的全名（包括副檔字）作為</p></li><li><p>記得儲存info.plist</p></li><li><p>UILabels、UITextViews或其他要使用自定義字體的地方調用[UIFont fontWithName：@“ CustomFontName” size：12] 就可以了</p></li></ol>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> 字型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UIView 截圖</title>
      <link href="/2017/04/12/screenshots/"/>
      <url>/2017/04/12/screenshots/</url>
      <content type="html"><![CDATA[<p>Q: 這邊要教你把某一個UIView 的畫面重繪成圖片</p><a id="more"></a><h3 id="objc"><a href="#objc" class="headerlink" title="objc"></a>objc</h3><pre><code>UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, self.view.opaque, 0.0);[self.myView.layer renderInContext:UIGraphicsGetCurrentContext()];UIImage *image = UIGraphicsGetImageFromCurrentImageContext();UIGraphicsEndImageContext();NSData *imageData = UIImageJPEGRepresentation(image, 1.0 ); //you can use PNG too[imageData writeToFile:@&quot;image1.jpeg&quot; atomically:YES];</code></pre><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><pre><code>func captureScreen() -&gt; UIImage{    UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, false, 0);    self.view.drawViewHierarchyInRect(view.bounds, afterScreenUpdates: true)    let image: UIImage = UIGraphicsGetImageFromCurrentImageContext()    UIGraphicsEndImageContext()    return image}    </code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> CCLayer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>APP Size</title>
      <link href="/2017/01/26/AppSize/"/>
      <url>/2017/01/26/AppSize/</url>
      <content type="html"><![CDATA[<p>冷知識，app size最大可以到多少GB？</p><a id="more"></a><p>(iOS only) App Size</p><p>iOS App binary files can be as large as 4 GB, but each executable file (app_name.app/app_name) must not exceed 60 MB. Additionally, the total uncompressed size of the app must be less than 4 billion bytes. However, consider download times when determining your app’s size. Minimize the file’s size as much as possible, keeping in mind that there is a 100 MB limit for over-the-air downloads.</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> APP Size </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浮水印效果</title>
      <link href="/2017/01/26/watermark/"/>
      <url>/2017/01/26/watermark/</url>
      <content type="html"><![CDATA[<p>這篇在描述，如何在圖片上面加文字，做出浮水印的效果</p><a id="more"></a><pre><code>func textToImage(drawText text: String, inImage image: UIImage, atPoint point: CGPoint) -&gt; UIImage {    let textColor = UIColor.white    let textFont = UIFont(name: &quot;Helvetica Bold&quot;, size: 12)!    let scale = UIScreen.main.scale    UIGraphicsBeginImageContextWithOptions(image.size, false, scale)    let textFontAttributes = [        NSAttributedStringKey.font: textFont,        NSAttributedStringKey.foregroundColor: textColor,        ] as [NSAttributedStringKey : Any]    image.draw(in: CGRect(origin: CGPoint.zero, size: image.size))    let rect = CGRect(origin: point, size: image.size)    text.draw(in: rect, withAttributes: textFontAttributes)    let newImage = UIGraphicsGetImageFromCurrentImageContext()    UIGraphicsEndImageContext()    return newImage! }</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> swift </tag>
            
            <tag> UIImage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NSZombie</title>
      <link href="/2016/10/10/NSZombie/"/>
      <url>/2016/10/10/NSZombie/</url>
      <content type="html"><![CDATA[<p>什麼是僵屍? NSZombie？</p><a id="more"></a><p>在 build scheme diagnostics 下  有一個 zombie objects 的選項</p><img src="https://github.com/nobodyyu/GraphicsBed/raw/master/NSZombie.png"><p>在勾起來後，當你有object retain count == 0 但又沒有被釋放掉時，就像僵屍一樣，狀態是死掉的，但是卻一直存活在記憶體裡面，要死不活的佔在那裡。</p><p>在不穩定的程式裡，最好都要測看看  有沒有僵屍存活在你的程式裡</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> NSZombie </tag>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AutoLayout_Programmatically</title>
      <link href="/2015/11/10/AutoLayout_Programmatically/"/>
      <url>/2015/11/10/AutoLayout_Programmatically/</url>
      <content type="html"><![CDATA[<h1 id="利用程式來加入-constraint"><a href="#利用程式來加入-constraint" class="headerlink" title="利用程式來加入 constraint"></a>利用程式來加入 constraint</h1><p>首先  加兩個測試用的view 到 self.view 之中</p><pre><code>  UIView *redBlock = [[UIView alloc] init];[redBlock setBackgroundColor:[UIColor redColor]];[redBlock setTranslatesAutoresizingMaskIntoConstraints:NO];[self.view addSubview:redBlock];UIView *blueBlock = [[UIView alloc] init];[blueBlock setBackgroundColor:[UIColor blueColor]];[blueBlock setTranslatesAutoresizingMaskIntoConstraints:NO];[self.view addSubview:blueBlock];</code></pre><p>結果圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/AutoLayout01.png" alt="AutoLayout02" style="width:310px"><p>接著  開始撰寫這次要用的constraint</p><h2 id="把握-X-Y-W-H-原則"><a href="#把握-X-Y-W-H-原則" class="headerlink" title="把握 X,Y,W,H 原則"></a>把握 X,Y,W,H 原則</h2><p>每一個物件在頁面上都有四種屬性 X,Y,Width,與Height，因此在撰寫auto layout constraint時，都要補足這四個原則，以下為範例</p><pre><code>NSLayoutConstraint *constraintHeight = [NSLayoutConstraint constraintWithItem:redBlock attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeHeight multiplier:0.25 constant:0];NSLayoutConstraint *constraintWidth = [NSLayoutConstraint constraintWithItem:redBlock attribute:NSLayoutAttributeWidth relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeWidth multiplier:0.25 constant:0];NSLayoutConstraint *constraintLeading = [NSLayoutConstraint constraintWithItem:redBlock attribute:NSLayoutAttributeLeading relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeLeading multiplier:1 constant:20];NSLayoutConstraint *constraintTop = [NSLayoutConstraint constraintWithItem:redBlock attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeTop multiplier:1 constant:40];[self.view addConstraint:constraintHeight];[self.view addConstraint:constraintWidth];[self.view addConstraint:constraintLeading];[self.view addConstraint:constraintTop];</code></pre><p>樓上大意為 為紅色區域設定寛高為self.view的0.25倍，距離頁面左邊20，距離頁面上方40</p><pre><code>NSLayoutConstraint *constraintHeight2 = [NSLayoutConstraint constraintWithItem:blueBlock attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual toItem:redBlock attribute:NSLayoutAttributeHeight multiplier:0.25 constant:0];NSLayoutConstraint *constraintWidth2 = [NSLayoutConstraint constraintWithItem:blueBlock attribute:NSLayoutAttributeWidth relatedBy:NSLayoutRelationEqual toItem:redBlock attribute:NSLayoutAttributeWidth multiplier:0.25 constant:0];NSLayoutConstraint *constraintLeading2 = [NSLayoutConstraint constraintWithItem:blueBlock attribute:NSLayoutAttributeLeading relatedBy:NSLayoutRelationEqual toItem:redBlock attribute:NSLayoutAttributeLeading multiplier:1 constant:20];NSLayoutConstraint *constraintTop2 = [NSLayoutConstraint constraintWithItem:blueBlock attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:redBlock attribute:NSLayoutAttributeTop multiplier:1 constant:40];[self.view addConstraint:constraintHeight2];[self.view addConstraint:constraintWidth2];[self.view addConstraint:constraintLeading2];[self.view addConstraint:constraintTop2];</code></pre><p>樓上大意為 為藍色區域設定寛高為紅色區域的0.25倍，距離紅色區域左邊20，距離紅色區域上方40</p><h3 id="Visual-Format"><a href="#Visual-Format" class="headerlink" title="Visual Format"></a>Visual Format</h3><p>這是一種相對於constraint 比較簡單的寫法（比較不用一直加constraint）</p><pre><code>NSMutableArray *myConstraints = [NSMutableArray array];[myConstraints addObjectsFromArray: [NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|-20-[redBlock(100)]-10-[blueBlock(&gt;=100)]-|&quot;                                         options:NSLayoutFormatDirectionLeadingToTrailing                                         metrics:nil                                           views:NSDictionaryOfVariableBindings(redBlock,blueBlock)]];[myConstraints addObjectsFromArray: [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:[redBlock(100)]-|&quot;                                         options:NSLayoutFormatDirectionLeadingToTrailing                                         metrics:nil                                           views:NSDictionaryOfVariableBindings(redBlock)]];[myConstraints addObjectsFromArray: [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:|-30-[blueBlock(&gt;=120@750)]-30-|&quot;                                         options:NSLayoutFormatDirectionLeadingToTrailing                                         metrics:nil                                           views:NSDictionaryOfVariableBindings(blueBlock,redBlock)]];[self.view addConstraints:myConstraints];</code></pre><p>其中</p><pre><code>V: &quot;、 &quot; H: &quot;</code></pre><p>分別代表由垂直或是水平方向來佈局。</p><p><br><br><br></p><pre><code>&quot; | &quot;</code></pre><p>代表 Superview 的邊界。</p><p><br><br><br></p><pre><code>&quot; [ ] &quot;</code></pre><p>代表物件本身，括號內包含物件的變數名稱與大小限制，可以使用關係運算子（&lt;＝、&gt;＝ 或 ＝＝ 等邏輯判斷）。<br><br><br><br></p><pre><code>&quot; - &quot;</code></pre><p>代表預設寬度或高度，如果在中間加上數字 “ -30- “，則代表限制 30 個單位高度或寬度。<br><br><br>兩側必需要銜接物件，以下為錯誤範例 （錯在20－20中間沒有物件相隔）</p><pre><code>[viewA]-20-20-[viewB]</code></pre><p><br><br><br></p><pre><code>&quot; @ &quot;</code></pre><p>優先權，1 至 1000 的整數，優先權較大的條件會優先被滿足，例如 ，<br>[viewA(&gt;=100@1000)]，物件 viewA 不可以小於 100 個單位長度或寬度會最優先被考慮。</p><p>結果圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/AutoLayout02.png" alt="AutoLayout02" style="width:310px">]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode7-ResourceOnDemand</title>
      <link href="/2015/10/15/XCode7-ResourceOnDemand/"/>
      <url>/2015/10/15/XCode7-ResourceOnDemand/</url>
      <content type="html"><![CDATA[<h2 id="XCode7、iOS9新功能－Resource-On-Demand-資源檔分段下載"><a href="#XCode7、iOS9新功能－Resource-On-Demand-資源檔分段下載" class="headerlink" title="XCode7、iOS9新功能－Resource On Demand 資源檔分段下載"></a>XCode7、iOS9新功能－Resource On Demand 資源檔分段下載</h2><p>XCode7的專案多了一個標籤[Resource Tags]</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/resourcetag01.png" alt="resourcetag01" style="width:310px"><p>打開來看長這樣</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/resourcetag02.png" alt="resourcetag02" style="width:310px"><p>接著解說一下各自的用意</p><p>Initial Install Tags: 在一開始安裝時就包在ipa裡讓人下載的資源檔</p><p>Prefetched Tag Order: 第一次開啟app時才下載資源檔</p><p>Download Only On Demand: 以程式判斷，需要下載時才下載（這段好像由apple代理，只要寫程式去抓資源檔回來）</p><p>##套用情境<br>假設我寫了一個電子書app，全部資源檔包一包上傳到store，結果有30MB，此時手機如果在3G模式下，是沒有辦法下載這個app的（上限20MB），此時若將資源檔移至 [Prefetched Tag Order] 把主程式壓在20MB以下的話，3G模式下的使用者就可以下載了，另外的10MB，則是使用者第一次開啟時才會將這10MB下載回來。</p><p>內容的部份，我有10本書，每本10MB，如果在[Prefetched Tag Order]一口氣全下載回來的話，會慢到讓user以為是當機吧。所以內容可以等到使用者單獨開啟某一本書時再去下載，就可以放在[Download Only On Demand]，再用程式去判斷。</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="設定資源檔的tag"><a href="#設定資源檔的tag" class="headerlink" title="設定資源檔的tag"></a>設定資源檔的tag</h3><p>在Images.xcassets找到需要設定的圖檔，並在且右方屬性的地方找找[On Demand Resources Tags]，如圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/resourcetag03.png" alt="resourcetag03" style="width:310px"><p>打入[book1]，看起來很像標籤雲，實際上一個資源檔可以輸入多個tag，如圖<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/resourcetag04.png" alt="resourcetag04" style="width:310px"></p><p>輸入完成後，回到[Resource Tags]看一眼，發現檔案自動出現在[Download Only On Demand]<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/resourcetag05.png" alt="resourcetag05" style="width:310px"></p><h3 id="呼叫程式下載資源檔"><a href="#呼叫程式下載資源檔" class="headerlink" title="呼叫程式下載資源檔"></a>呼叫程式下載資源檔</h3><p>iOS9 提供了兩個方法呼叫  看程式，bj4</p><h4 id="beginAccessingResourcesWithCompletionHandler"><a href="#beginAccessingResourcesWithCompletionHandler" class="headerlink" title="beginAccessingResourcesWithCompletionHandler"></a>beginAccessingResourcesWithCompletionHandler</h4><pre><code>-(void)preloadResourceWithTags:(NSArray *)tagArray{    NSSet *tagSet = [NSSet setWithArray:tagArray];    NSBundleResourceRequest *resourceRequest = [[NSBundleResourceRequest alloc] initWithTags:tagSet];    [resourceRequest beginAccessingResourcesWithCompletionHandler:^(NSError * _Nullable error) {        NSLog(@&quot;%@&quot;,error);    }];}</code></pre><h4 id="conditionallyBeginAccessingResourcesWithCompletionHandler"><a href="#conditionallyBeginAccessingResourcesWithCompletionHandler" class="headerlink" title="conditionallyBeginAccessingResourcesWithCompletionHandler"></a>conditionallyBeginAccessingResourcesWithCompletionHandler</h4><pre><code>-(void)loadResourceWithTags:(NSArray *)tagArray{    NSSet *tagSet = [NSSet setWithArray:tagArray];    NSBundleResourceRequest *resourceRequest = [[NSBundleResourceRequest alloc] initWithTags:tagSet];    [resourceRequest conditionallyBeginAccessingResourcesWithCompletionHandler:^(BOOL resourcesAvailable) {        if(resourcesAvailable){            NSLog(@&quot;Resources Available&quot;);        }    }];}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>漫談手機的存儲方式</title>
      <link href="/2015/08/17/%E6%BC%AB%E8%AB%87%E6%89%8B%E6%A9%9F%E7%9A%84%E5%AD%98%E5%84%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/2015/08/17/%E6%BC%AB%E8%AB%87%E6%89%8B%E6%A9%9F%E7%9A%84%E5%AD%98%E5%84%B2%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>如何在手機上存資料是我常常被問到的問題，因此開一篇文章來討論一下實務上幾個比較常見的到資料存儲方式，不過，這裡不會提到CoreData，原因在於－－－大部份的手機專案都是iOS／Android兩個手機專案在並行，因此大部份的owner會想要兩邊的流程是一致的，因此在選擇資料存儲的方式時，大多選擇兩個手機台平能夠共用的方式，sqlite就是一個比較好說服owner的方式。當然coredata也有他的好處和便捷性，這邊就不多解釋了。<br><br>這裡要介紹的是 NSUserDefault、File與SQLite<br><br>如果有人有更好的存儲方式，也請不吝告知。</p><h3 id="NSUserDefault"><a href="#NSUserDefault" class="headerlink" title="NSUserDefault"></a>NSUserDefault</h3><p>有許多型別可以使用，這裡使用比較常用的object當範例，其他類似的就不一一介紹。</p><h4 id="regist-Data"><a href="#regist-Data" class="headerlink" title="regist Data"></a>regist Data</h4><pre><code>[[NSUserDefaults standardUserDefaults] registerDefaults:&lt;#(NSDictionary *)#&gt;][[NSUserDefaults standardUserDefaults] synchronize];</code></pre><h4 id="write-Data"><a href="#write-Data" class="headerlink" title="write Data"></a>write Data</h4><pre><code>[[NSUserDefaults standardUserDefaults] setObject:data forKey:@&quot;key&quot;];[[NSUserDefaults standardUserDefaults] synchronize];</code></pre><h4 id="remove-Data"><a href="#remove-Data" class="headerlink" title="remove Data"></a>remove Data</h4><pre><code>[[NSUserDefaults standardUserDefaults] removeObjectForKey:@&quot;key&quot;]    [[NSUserDefaults standardUserDefaults] synchronize];</code></pre><p>或是</p><pre><code>[[NSUserDefaults standardUserDefaults] setObject:nil forKey:@&quot;key&quot;];[[NSUserDefaults standardUserDefaults] synchronize];</code></pre><h4 id="read-Data"><a href="#read-Data" class="headerlink" title="read Data"></a>read Data</h4><pre><code>[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;key&quot;];[[NSUserDefaults standardUserDefaults] synchronize];</code></pre><h3 id="實體檔案存取-NSFileManager"><a href="#實體檔案存取-NSFileManager" class="headerlink" title="實體檔案存取(NSFileManager)"></a>實體檔案存取(NSFileManager)</h3><h4 id="Create-File"><a href="#Create-File" class="headerlink" title="Create File"></a>Create File</h4><pre><code>- (void)createFileWithName:(NSString *)fileName{    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    NSString *filePath = [documentsDirectory stringByAppendingPathComponent:fileName];    NSFileManager *manager = [NSFileManager defaultManager];    if ([manager createFileAtPath:filePath contents:nil attributes:nil]) {        NSLog(@&quot;Created the File Successfully.&quot;);    } else {        NSLog(@&quot;Failed to Create the File&quot;);    }}</code></pre><h4 id="Read-File"><a href="#Read-File" class="headerlink" title="Read File"></a>Read File</h4><pre><code>- (void)readFileWithName:(NSString *)fileName{    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    NSString *filePath = [documentsDirectory stringByAppendingPathComponent:fileName];    NSFileManager *manager = [NSFileManager defaultManager];    if ([manager fileExistsAtPath:filePath]) {        NSError *error = nil;        NSString *content = [NSString stringWithContentsOfFile:filePath encoding:NSStringEncodingConversionAllowLossy error:&amp;error];        NSLog(@&quot;File Content: %@&quot;, content);        if (error) {            NSLog(@&quot;There is an Error: %@&quot;, error);        }    } else {        NSLog(@&quot;File %@ doesn&apos;t exists&quot;, fileName);    }}</code></pre><h4 id="Write-File"><a href="#Write-File" class="headerlink" title="Write File"></a>Write File</h4><pre><code>- (void)writeString:(NSString *)content toFile:(NSString *)fileName{    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    NSString *filePath = [documentsDirectory stringByAppendingPathComponent:fileName];    NSFileManager *manager = [NSFileManager defaultManager];    if ([manager fileExistsAtPath:filePath]) {        NSError *error = nil;        [content writeToFile:filePath atomically:YES encoding:NSStringEncodingConversionAllowLossy error:&amp;error];        if (error) {            NSLog(@&quot;There is an Error: %@&quot;, error);        }    } else {        NSLog(@&quot;File %@ doesn&apos;t exists&quot;, fileName);    }}</code></pre><h4 id="delete-File"><a href="#delete-File" class="headerlink" title="delete File"></a>delete File</h4><pre><code>- (void)deleteFileWithName:(NSString *)fileName{    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    NSString *filePath = [documentsDirectory stringByAppendingPathComponent:fileName];    NSFileManager *manager = [NSFileManager defaultManager];    // Need to check if the to be deleted file exists.    if ([manager fileExistsAtPath:filePath]) {        NSError *error = nil;       [manager removeItemAtPath:filePath error:&amp;error];        if (error) {            NSLog(@&quot;There is an Error: %@&quot;, error);        }    } else {        NSLog(@&quot;File %@ doesn&apos;t exists&quot;, fileName);    }}</code></pre><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p>這裡我使用最常用的FMDB來當做範例<br><a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">FMDB on GitHub</a></p><h4 id="首先你要先把-libsqlite3-dylib-加進library"><a href="#首先你要先把-libsqlite3-dylib-加進library" class="headerlink" title="首先你要先把 libsqlite3.dylib 加進library"></a>首先你要先把 libsqlite3.dylib 加進library</h4><p>不解釋</p><h4 id="OpenDB"><a href="#OpenDB" class="headerlink" title="OpenDB"></a>OpenDB</h4><pre><code>NSURL *appUrl = [[[NSFileManager defaultManager]      URLsForDirectory:NSDocumentDirectory             inDomains:NSUserDomainMask] lastObject];NSString *dbPath = [[appUrl path] stringByAppendingPathComponent:@&quot;MyDatabase.db&quot;];   FMDatabase* db = [FMDatabase databaseWithPath:dbPath];if (![db open]) {        NSLog(@&quot;Could not open db&quot;);      return;  }</code></pre><h4 id="insertData"><a href="#insertData" class="headerlink" title="insertData"></a>insertData</h4><pre><code>if(![db executeUpdate:@&quot;INSERT INTO user (name, description) VALUES (?,?)&quot;, name, description]){ NSLog(@&quot;Could not insert data: %@&quot;, [db lastErrorMessage]);}</code></pre><p>這裡的代數是用？</p><h4 id="readData"><a href="#readData" class="headerlink" title="readData"></a>readData</h4><pre><code>NSMutableArray* items = [NSMutableArray arrayWithCapacity:0];FMResultSet *rs = [db executeQuery:@&quot;SELECT uid, name, description from user&quot;];while ([rs next]) {        int uid = [rs intForColumn:@&quot;uid&quot;]; NSString *name = [rs stringForColumn:@&quot;name&quot;];        NSString *description = [rs stringForColumn:@&quot;description&quot;];        [items addObject:[NSDictionary dictionaryWithObjectsAndKeys:       [NSNumber numberWithInt:uid], @&quot;uid&quot;,       name, @&quot;name&quot;,       description, @&quot;description&quot;,       nil]];}[rs close];   </code></pre><h4 id="updateData"><a href="#updateData" class="headerlink" title="updateData"></a>updateData</h4><pre><code>[db beginTransaction];if(![db executeUpdate:@&quot;UPDATE user set name=?, description＝? where name=&apos;?&apos;“,@&quot;1&quot;,@&quot;2&quot;,@&quot;1&quot;]);    {     NSLog(@&quot;Could not update data: %@&quot;, [db lastErrorMessage]);    }[db commit];</code></pre><h4 id="deleteData"><a href="#deleteData" class="headerlink" title="deleteData"></a>deleteData</h4><pre><code>if(![_db executeUpdate:@&quot;DELETE FROM user WHERE uid = ?&quot;, [NSNumber numberWithInt:uid]]){ NSLog(@&quot;Could not delete data: %@&quot;, [db lastErrorMessage]);}</code></pre><h4 id="CloseDB"><a href="#CloseDB" class="headerlink" title="CloseDB"></a>CloseDB</h4><pre><code>[db close]</code></pre><p>執行FMDB的指令有她的生命週期，都是<br><br><br>1.open db<br><br><br>2.執行<br><br><br>3.close db</p><p>如果沒有確實的open與close的話  是很容易造成exception而crash的<br><br><br><br><br>最後，因為sqlite是以一個檔案型態存在的，因此在multi－thread讀寫資料時很容易出現錯誤，官方說明與建議的方法如下：<br><br><br></p><pre><code>Using a single instance of FMDatabase from multiple threads at once is a bad idea. It has always been OK to make a FMDatabase object per thread. Just don&apos;t share a single instance across threads, and definitely not across multiple threads at the same time. Bad things will eventually happen and you&apos;ll eventually get something to crash, or maybe get an exception, or maybe meteorites will fall out of the sky and hit your Mac Pro. This would suck.So don&apos;t instantiate a single FMDatabase object and use it across multiple threads.Instead, use FMDatabaseQueue. It&apos;s your friend and it&apos;s here to help. Here&apos;s how to use it:First, make your queue.</code></pre><p>用FMDatabaseQueue來解決，<br><br>範例：</p><pre><code>FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];[queue inDatabase:^(FMDatabase *db) {    [db executeUpdate:@&quot;INSERT INTO myTable VALUES (?)&quot;, [NSNumber numberWithInt:1]];    [db executeUpdate:@&quot;INSERT INTO myTable VALUES (?)&quot;, [NSNumber numberWithInt:2]];    [db executeUpdate:@&quot;INSERT INTO myTable VALUES (?)&quot;, [NSNumber numberWithInt:3]];FMResultSet *rs = [db executeQuery:@&quot;select * from foo&quot;];    while ([rs next]) {        …    }}];</code></pre><br>就醬，其實不難～<br><br><br><br><br>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode debug再進化－3</title>
      <link href="/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-3/"/>
      <url>/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-3/</url>
      <content type="html"><![CDATA[<p>在xcode debug時，有些功能可能用不太到，不過既然知道了，就分享出來給大家知道，致於想不想用，什麼時候用，就端看自已的判斷了</p><p><br><br><br>這次是要介紹如何在debug模式下，做到更新 UI 的指令</p><h3 id="先中斷一下吧"><a href="#先中斷一下吧" class="headerlink" title="先中斷一下吧"></a>先中斷一下吧</h3><p>在一個範例的按鈕裡裡先拉一個 IBAction  然後給一個中斷點</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug2-01.png" alt="debug2-01" style="width:310px"><p>在debug前的 UI 長成這樣</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug2-02.png" alt="debug2-02" style="width:310px"><p>按下按鈕，被中斷後，在debug navagator的lldb裡下指令</p><pre><code>e id $myView = (id)0x154d0e9d0</code></pre><p>其中</p><pre><code>e 是 expresss 的簡寫id 是型別$myView 是變數容器0x154d0e9d0 是記憶體位址 （需要與左側的變數的記憶體位址一致）</code></pre><p>結果如下圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug2-03.png" alt="debug2-03" style="width:310px"><p>接著 可以輸入想要做的事情</p><pre><code>e (void)[$myView setBackgroundColor:[UIColor redColor]]</code></pre><p>內容就不多解釋了，只是，醬子打完後  手機是不會動的（廢話，因為還卡在中斷點）</p><br>所以，要通知 UI 做更新才行<pre><code>e (void)[CATransaction flush]</code></pre><p>你會發現，還在中斷點的debug模式下，手機的畫面更新了！！！！（如下圖）<br><br></p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug2-04.png" alt="debug2-04" style="width:310px"><p>真的太神奇了，傑克</p><p><br><br><br><br></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode debug再進化－4</title>
      <link href="/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-4/"/>
      <url>/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-4/</url>
      <content type="html"><![CDATA[<p>在xcode debug時，有些功能可能用不太到，不過既然知道了，就分享出來給大家知道，致於想不想用，什麼時候用，就端看自已的判斷了</p><p><br><br><br>這次是要介紹如何在debug模式下，新增watchpoint(監看點or監看式)</p><h3 id="一樣先中斷一下吧"><a href="#一樣先中斷一下吧" class="headerlink" title="一樣先中斷一下吧"></a>一樣先中斷一下吧</h3><p>在一個範例的按鈕裡裡先拉一個 IBAction  然後給一個中斷點</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug2-01.png" alt="debug2-01" style="width:310px"><p>按下按鈕，被中斷後，在debug navagator的lldb裡下指令</p><pre><code>watchpoint set variable i</code></pre><p>其中</p><pre><code>watchpoint 是指令  可以簡寫為 watchvariable 可以簡寫為 vari 就是你想要監看的東西</code></pre><p>然後就會出現如下的結果    </p><pre><code>Watchpoint created: Watchpoint 1: addr = 0x16fd25614 size = 4 state = enabled type = w    declare @ &apos;/Users/minghongyu/Documents/work/iphone/test3/test3/ViewController.m:28&apos;    watchpoint spec = &apos;i&apos;    new value: 02015-08-13 20:02:38.367 test3[4700:525425] 0</code></pre><p>代表監看點新增成功</p><p><br><br><br>接著如果拿掉中斷點再繼續執行的話，會發現，每次都會自動停下來，結果如下</p><pre><code>Watchpoint 1 hit:old value: 0new value: 12015-08-13 20:02:42.329 test3[4700:525425] 1Watchpoint 1 hit:old value: 1new value: 22015-08-13 20:02:45.380 test3[4700:525425] 2Watchpoint 1 hit:old value: 2new value: 32015-08-13 20:02:48.603 test3[4700:525425] 3Watchpoint 1 hit:old value: 3new value: 4</code></pre><p>就可以好好的觀察變數的變化了</p><p>如果想看到所有的監看點列表，指令為</p><pre><code>watchpoint list  也可以簡寫為 watch l  （小寫L）</code></pre><p>執行的結果如下</p><pre><code>Number of supported hardware watchpoints: 4Current watchpoints:Watchpoint 1: addr = 0x16fd25614 size = 4 state = enabled type = w    declare @ &apos;/Users/minghongyu/Documents/work/iphone/test3/test3/ViewController.m:28&apos;    watchpoint spec = &apos;i&apos;    old value: 3    new value: 4</code></pre><p><br><br><br>如果想要刪除監看點，指令為</p><pre><code>watchpoint delete 1也可以簡寫為 watch del 1</code></pre><p>其中</p><pre><code>1 是列表中的順序數</code></pre><p>執行結果如下</p><pre><code>1 watchpoints deleted.</code></pre><p>再繼續跑程式就不會停下來了！！</p><p>無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾無䭾！！！</p><p><br><br><br><br></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode debug再進化－2</title>
      <link href="/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-2/"/>
      <url>/2015/08/13/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96-2/</url>
      <content type="html"><![CDATA[<p>學海無涯，唯勤是岸，今天又要教一些xcode debug好用的小技巧了。<br><br><br><br>這次是要介紹中斷點(BreakPoint)的使用</p><h3 id="為你的程式加入中斷點"><a href="#為你的程式加入中斷點" class="headerlink" title="為你的程式加入中斷點"></a>為你的程式加入中斷點</h3><p>先來一段小程式</p><pre><code>for(int i=0;i&lt;100;i++){   NSLog(@&quot;%d&quot;,i);}</code></pre><p>接著  在旁邊的行數的區域用滑鼠點一下，就會看到中斷點的藍標跑出來<br>想要移除中斷點可以用拖曳該中斷點  到中間的編輯區時會出現X，放掉就刪除了（有點像丟垃圾桶）。</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug1-01.png" alt="debug1-01" style="width:310px"><p>接著，運行程式，會發現程式在一觸碰到中斷點時就會停下來等你debug</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug1-02.png" alt="debug1-02" style="width:310px"><p>此時下方的[Debug Navigator]會自已彈出來<br>會有一些基本的變數訊息在左邊  告訴我們此時 </p><pre><code>i=0;</code></pre><br>當然，因為一碰到中斷點時馬上就停下來，所以i＝0時就停了<p>那…….我想要在 i=49 時，來做一個debug的動作呢？</p><br>=============== Of Course YES =================<br>=============== Of Course YES =================<br>=============== Of Course YES =================<p>在breakpoint上滑鼠右鍵，並且選擇[Edit BreakPoint]<br><br><br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug1-03.png" alt="debug1-03" style="width:310px"></p><p>此時，會有幾個參數可以使用<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug1-04.png" alt="debug1-04" style="width:310px"></p><pre><code>1. Condition2. Ignore3. Action4. Options - Automatically continue after evaluating actions</code></pre><p>在上述的情境中我們可以做的是</p><pre><code>1. 在Condition 裡輸入 [ i == 49 ]或2. Ignore 48 </code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug1-05.png" alt="debug1-05" style="width:310px"><p>接著重跑一次程式，媽呀～ 太神奇了，同樣的中斷點，程式跑到第49次才停下來！！！！！</p><p>醬子的話  就可以隨心所欲的想中斷就中斷，不用一直按 [Step Over] 了</p><p><br><br><br><br></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LinkedInSDK-Walk-Through</title>
      <link href="/2015/08/04/LinkedInSDK-Walk-Through/"/>
      <url>/2015/08/04/LinkedInSDK-Walk-Through/</url>
      <content type="html"><![CDATA[<p>千呼萬喚始出來，LinkedIn終於把最後的一個ios sdk給補上了，就是這次要walk through的東西，不過很可惜的是目前只有objc版本，swift根據過往objc sdk的開發進度，我在想可能要等上個好一陣子了。</p><h3 id="下載sdk"><a href="#下載sdk" class="headerlink" title="下載sdk"></a>下載sdk</h3><p><a href="https://developer.linkedin.com/docs/ios-sdk" target="_blank" rel="noopener">SDK載點</a></p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin01.png" alt="linkedin01" style="width:310px"><h3 id="準備開發環境"><a href="#準備開發環境" class="headerlink" title="準備開發環境"></a>準備開發環境</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin02.png" alt="linkedin02" style="width:310px"><h3 id="在開發者後台建立一個新旳應用程式"><a href="#在開發者後台建立一個新旳應用程式" class="headerlink" title="在開發者後台建立一個新旳應用程式"></a>在開發者後台建立一個新旳應用程式</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin06.png" alt="linkedin06" style="width:310px"><h3 id="在開發者後台＞應用程式＞Mobile裡"><a href="#在開發者後台＞應用程式＞Mobile裡" class="headerlink" title="在開發者後台＞應用程式＞Mobile裡"></a>在開發者後台＞應用程式＞Mobile裡</h3><p>將Application Id 先記下來<br>同時填寫<br>1。iOS Bundle Identifiers<br>2。iOS URL Suffix Schemes: </p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin08.png" alt="linkedin08" style="width:310px"><h3 id="打開samplesdk的專案"><a href="#打開samplesdk的專案" class="headerlink" title="打開samplesdk的專案"></a>打開samplesdk的專案</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin03.png" alt="linkedin03" style="width:310px"><h3 id="修改info-plist"><a href="#修改info-plist" class="headerlink" title="修改info.plist"></a>修改info.plist</h3><pre><code>key：LIAppId value： [LinkedIn Application Id]</code></pre><h3 id="修改url-scheme"><a href="#修改url-scheme" class="headerlink" title="修改url scheme"></a>修改url scheme</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin10.png" alt="linkedin10" style="width:310px"><h3 id="跑跑看"><a href="#跑跑看" class="headerlink" title="跑跑看"></a>跑跑看</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin11.png" alt="linkedin11" style="width:310px"><p>沒裝linkedin native app的話會提醒安裝 （不裝不能用）</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin12.png" alt="linkedin12" style="width:310px"><p>據linkedin的開發者表示，這不會被apple reject，所以，有機會就來試看看會不會被reject吧</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/linkedin13.png" alt="linkedin13" style="width:310px"><p>導回成功  但create session失敗（據說so是iOS 8.4的問題）</p><p>不過似乎沒有管道可以REPORT BUG，就只能慢慢等了</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 奇門遁甲指北針－CoreLocation的應用</title>
      <link href="/2015/07/28/iOS%20%E5%A5%87%E9%96%80%E9%81%81%E7%94%B2%E6%8C%87%E5%8C%97%E9%87%9D%EF%BC%8DCoreLocation%E7%9A%84%E6%87%89%E7%94%A8/"/>
      <url>/2015/07/28/iOS%20%E5%A5%87%E9%96%80%E9%81%81%E7%94%B2%E6%8C%87%E5%8C%97%E9%87%9D%EF%BC%8DCoreLocation%E7%9A%84%E6%87%89%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="準備好一個新專案，以及CoreLocation-Framework"><a href="#準備好一個新專案，以及CoreLocation-Framework" class="headerlink" title="準備好一個新專案，以及CoreLocation.Framework"></a>準備好一個新專案，以及CoreLocation.Framework</h3><br><br><h3 id="應該有的素材"><a href="#應該有的素材" class="headerlink" title="應該有的素材"></a>應該有的素材</h3><pre><code>1。奇門遁甲圓盤2。旋轉用的太極(裝飾用)3。UISegment 切換「磁北」、「真北」4。四個UILabel 顯示經緯度、高度、與方向角度</code></pre><h3 id="程式的撰寫"><a href="#程式的撰寫" class="headerlink" title="程式的撰寫"></a>程式的撰寫</h3><br><br>info.plist<pre><code>NSLocationWhenInUseUsageDescriptionNSLocationAlwaysUsageDescription</code></pre><p>ViewController.h</p><pre><code>#import &lt;CoreLocation/CoreLocation.h&gt;&lt;CLLocationManagerDelegate&gt;IBOutlet UIImageView *imgCompass;@property (nonatomic,retain) CLLocationManager *locationManager;@property (nonatomic,retain) CLHeading *currentHeading;</code></pre><p>ViewController.m</p><pre><code>- (void)viewDidLoad {    [super viewDidLoad];    self.currentHeading = [[CLHeading alloc] init];    if ([CLLocationManager locationServicesEnabled]) //處理定位    {        if([CLLocationManager authorizationStatus]==kCLAuthorizationStatusDenied){            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;請先開啟定位&quot; delegate:self cancelButtonTitle:@&quot;確認&quot; otherButtonTitles:nil];            alert.tag =999;            [self.view addSubview:alert];            [alert show];            isLocation = NO;            return;        }else{            isLocation = YES;            self.locationManager = [[CLLocationManager alloc] init];            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;            self.locationManager.headingFilter = 1;            self.locationManager.delegate = self;            if([locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){                [locationManager requestWhenInUseAuthorization];            }            [self.locationManager startUpdatingLocation];        }    }    else {        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;請先開啟定位&quot; delegate:self cancelButtonTitle:@&quot;確認&quot; otherButtonTitles:nil];        alert.tag =999;        [self.view addSubview:alert];        isLocation = NO;        [alert show];        return;    }    [self.locationManager startUpdatingHeading];}-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations{    CLLocation* location = [locations objectAtIndex:0];    NSLog(@&quot;%f-%f&quot;,location.coordinate.latitude,location.coordinate.longitude);    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@&quot;%f&quot;,location.coordinate.latitude] forKey:@&quot;Lat&quot;];    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@&quot;%f&quot;,location.coordinate.longitude] forKey:@&quot;Lng&quot;];    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@&quot;%f&quot;,location.altitude] forKey:@&quot;Alt&quot;];    [[NSUserDefaults standardUserDefaults] synchronize];    lblLat.text = [NSString stringWithFormat:@&quot;%f&quot;,location.coordinate.latitude];    lblLong.text = [NSString stringWithFormat:@&quot;%f&quot;,location.coordinate.longitude];    lblAlt.text = [NSString stringWithFormat:@&quot;%f&quot;,location.altitude];}-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error{    NSLog(@&quot;%@&quot;,error);}#pragma LocationManager Delegate-(void)locationManager:(CLLocationManager *)manager didUpdateHeading:(CLHeading *)newHeading{    self.currentHeading = newHeading;    if(segNorth.selectedSegmentIndex==1){        float heading = newHeading.magneticHeading; //in degrees        float headingDegrees = (heading*M_PI/180); //assuming needle points to top of iphone. convert to radians        imgCompass.transform = CGAffineTransformMakeRotation(headingDegrees);        NSLog(@&quot;heading %f&quot;,heading);        NSLog(@&quot;heading %f&quot;,headingDegrees);    }else{        float heading = newHeading.trueHeading; //in degrees        float headingDegrees = (heading*M_PI/180); //assuming needle points to top of iphone. convert to radians        imgCompass.transform = CGAffineTransformMakeRotation(headingDegrees);        NSLog(@&quot;heading %f&quot;,heading);        NSLog(@&quot;heading %f&quot;,headingDegrees);    }}</code></pre><p>完整專案放在 <a href="https://github.com/nobodyyu/ChimenCompass" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TouchID Walk Through</title>
      <link href="/2015/07/27/TouchID/"/>
      <url>/2015/07/27/TouchID/</url>
      <content type="html"><![CDATA[<h2 id="TouchID-Walk-Through"><a href="#TouchID-Walk-Through" class="headerlink" title="TouchID Walk Through"></a>TouchID Walk Through</h2><p>每個人的心中，都有一個secrect box，用來存放一些不為人知的小秘密，然而，在iphone，也可以自已打造一倨屬於自已的secret box，接著，就是要介紹，如果打造一把只有自已能開鎖的這把鑰匙－－Touch ID</p><h3 id="1。引用"><a href="#1。引用" class="headerlink" title="1。引用"></a>1。引用</h3><pre><code>#import &lt;LocalAuthentication/LocalAuthentication.h&gt;</code></pre><h3 id="2。加入程式"><a href="#2。加入程式" class="headerlink" title="2。加入程式"></a>2。加入程式</h3><pre><code>- (IBAction)btnAuth:(id)sender {    LAContext *context = [[LAContext alloc] init];    NSError *error = nil;    if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error]) {        [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics                localizedReason:@&quot;I need your finger print?&quot;                          reply:^(BOOL success, NSError *error) {                              if (error) {                                  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Error&quot;                                                                                  message:@&quot;There was a problem verifying your identity.&quot;                                                                                 delegate:nil                                                                        cancelButtonTitle:@&quot;Ok&quot;                                                                        otherButtonTitles:nil];                                   [self.view addSubview:alert];                                  [alert show];                                  return;                              }                              if (success) {                                  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Success&quot;                                                                                  message:@&quot;You are the one I want!&quot;                                                                                 delegate:nil                                                                        cancelButtonTitle:@&quot;Ok&quot;                                                                        otherButtonTitles:nil];                                  [self.view addSubview:alert];                                  [alert show];                              } else {                                  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Error&quot;                                                                                  message:@&quot;You are not the one I want.&quot;                                                                                 delegate:nil                                                                        cancelButtonTitle:@&quot;Ok&quot;                                                                        otherButtonTitles:nil];                                   [self.view addSubview:alert];                                  [alert show];                              }                          }];    } else {        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Error&quot;                                                        message:@&quot;Your device cannot authenticate using TouchID.&quot;                                                       delegate:nil                                              cancelButtonTitle:@&quot;Ok&quot;                                              otherButtonTitles:nil];        [alert show];    }}</code></pre><p>###3。看結果</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/touchid01.png" alt="touchid01" style="width:310px"><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/touchid02.png" alt="touchid02" style="width:310px"><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/touchid03.png" alt="touchid03" style="width:310px">]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XCode debug再進化</title>
      <link href="/2015/07/02/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96/"/>
      <url>/2015/07/02/XCode-debug%E5%86%8D%E9%80%B2%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>當然，要先來個crash</p><p>謝謝 Crashlytics 可以強制造成crash</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug01.png" alt="debug01" style="width:310px"><h3 id="基礎debug-mode"><a href="#基礎debug-mode" class="headerlink" title="基礎debug mode"></a>基礎debug mode</h3><p>當crash發生時 xcode沒設定什麼東西時 程式會hang在這個讓人看不懂的地方</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug02.png" alt="debug02" style="width:310px"><p>所以  要在xcode的地方設定一下  好方便未來的debug</p><pre><code>xcode左邊的panel 左邊數第7個  右邊倒數第2個頁籤 點下去</code></pre><p>－</p><pre><code>下面的「+」 點下去</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug03.png" alt="debug03" style="width:310px"><pre><code>選擇第一個「Add Exception Breakpoint」</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug04.png" alt="debug04" style="width:310px"><p>這時候會變成這個專案專屬的exception breakpoint</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug05.png" alt="debug05" style="width:310px"><p>此時xcode有個小貼心的地方，就是可以把breakpoint設為USER，往後，每一個新增的專案都會有這個exception breakpoint</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug06.png" alt="debug06" style="width:310px"><p>結果變成</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug07.png" alt="debug07" style="width:310px"><p>再重新執行一次crash，就會停在比較易讀的位置，也可以利用下方的debug console 來進行debug了</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug08.png" alt="debug08" style="width:310px"><p>下方的debug console最常使用的指令是</p><pre><code>po xxx</code></pre><p>如果你真的很想知道有那些指令的話，可以在debug console輸入help<br><font color="red">(不過我相信你絕對不會每一個都看完的)</font></p><pre><code>(lldb) helpDebugger commands:  apropos           -- Find a list of debugger commands related to a particular                       word/subject.  breakpoint        -- A set of commands for operating on breakpoints. Also see                       _regexp-break.  command           -- A set of commands for managing or customizing the                       debugger commands.  disassemble       -- Disassemble bytes in the current function, or elsewhere                       in the executable program as specified by the user.  expression        -- Evaluate an expression (ObjC++ or Swift) in the current                       program context, using user defined variables and                       variables currently in scope.  frame             -- A set of commands for operating on the current thread&apos;s                       frames.  gdb-remote        -- Connect to a remote GDB server.  If no hostname is                       provided, localhost is assumed.  gui               -- Switch into the curses based GUI mode.  help              -- Show a list of all debugger commands, or give details                       about specific commands.  kdp-remote        -- Connect to a remote KDP server.  udp port 41139 is the                       default port number.  log               -- A set of commands for operating on logs.  memory            -- A set of commands for operating on memory.  platform          -- A set of commands to manage and create platforms.  plugin            -- A set of commands for managing or customizing plugin                       commands.  process           -- A set of commands for operating on a process.  quit              -- Quit out of the LLDB debugger.  register          -- A set of commands to access thread registers.  script            -- Pass an expression to the script interpreter for                       evaluation and return the results. Drop into the                       interactive interpreter if no expression is given.  settings          -- A set of commands for manipulating internal settable                       debugger variables.  source            -- A set of commands for accessing source file information  target            -- A set of commands for operating on debugger targets.  thread            -- A set of commands for operating on one or more threads                       within a running process.  type              -- A set of commands for operating on the type system  version           -- Show version of LLDB debugger.  watchpoint        -- A set of commands for operating on watchpoints.Current command abbreviations (type &apos;help command alias&apos; for more info):  add-dsym  -- (&apos;target symbols add&apos;)  Add a debug symbol file to one of the               target&apos;s current modules by specifying a path to a debug symbols               file, or using the options to specify a module to download               symbols for.  attach    -- (&apos;_regexp-attach&apos;)  Attach to a process id if in decimal,               otherwise treat the argument as a process name to attach to.  b         -- (&apos;_regexp-break&apos;)  Set a breakpoint using a regular expression               to specify the location, where &lt;linenum&gt; is in decimal and               &lt;address&gt; is in hex.  bt        -- (&apos;_regexp-bt&apos;)  Show a backtrace.  An optional argument is               accepted; if that argument is a number, it specifies the number               of frames to display.  If that argument is &apos;all&apos;, full               backtraces of all threads are displayed.  c         -- (&apos;process continue&apos;)  Continue execution of all threads in the               current process.  call      -- (&apos;expression --&apos;)  Evaluate an expression (ObjC++ or Swift) in               the current program context, using user defined variables and               variables currently in scope.  continue  -- (&apos;process continue&apos;)  Continue execution of all threads in the               current process.  detach    -- (&apos;process detach&apos;)  Detach from the current process being               debugged.  di        -- (&apos;disassemble&apos;)  Disassemble bytes in the current function, or               elsewhere in the executable program as specified by the user.  dis       -- (&apos;disassemble&apos;)  Disassemble bytes in the current function, or               elsewhere in the executable program as specified by the user.  display   -- (&apos;_regexp-display&apos;)  Add an expression evaluation stop-hook.  down      -- (&apos;_regexp-down&apos;)  Go down &quot;n&quot; frames in the stack (1 frame by               default).  env       -- (&apos;_regexp-env&apos;)  Implements a shortcut to viewing and setting               environment variables.  exit      -- (&apos;quit&apos;)  Quit out of the LLDB debugger.  f         -- (&apos;frame select&apos;)  Select a frame by index from within the               current thread and make it the current frame.  file      -- (&apos;target create&apos;)  Create a target using the argument as the               main executable.  finish    -- (&apos;thread step-out&apos;)  Finish executing the function of the               currently selected frame and return to its call site in               specified thread (current thread, if none specified).  image     -- (&apos;target modules&apos;)  A set of commands for accessing information               for one or more target modules.  j         -- (&apos;_regexp-jump&apos;)  Sets the program counter to a new address.  jump      -- (&apos;_regexp-jump&apos;)  Sets the program counter to a new address.  kill      -- (&apos;process kill&apos;)  Terminate the current process being debugged.  l         -- (&apos;_regexp-list&apos;)  Implements the GDB &apos;list&apos; command in all of               its forms except FILE:FUNCTION and maps them to the appropriate               &apos;source list&apos; commands.  list      -- (&apos;_regexp-list&apos;)  Implements the GDB &apos;list&apos; command in all of               its forms except FILE:FUNCTION and maps them to the appropriate               &apos;source list&apos; commands.  n         -- (&apos;thread step-over&apos;)  Source level single step in specified               thread (current thread, if none specified), stepping over calls.  next      -- (&apos;thread step-over&apos;)  Source level single step in specified               thread (current thread, if none specified), stepping over calls.  nexti     -- (&apos;thread step-inst-over&apos;)  Single step one instruction in               specified thread (current thread, if none specified), stepping               over calls.  ni        -- (&apos;thread step-inst-over&apos;)  Single step one instruction in               specified thread (current thread, if none specified), stepping               over calls.  p         -- (&apos;expression --&apos;)  Evaluate an expression (ObjC++ or Swift) in               the current program context, using user defined variables and               variables currently in scope.  po        -- (&apos;expression -O  -- &apos;)  Evaluate an expression (ObjC++ or Swift)               in the current program context, using user defined variables and               variables currently in scope.  print     -- (&apos;expression --&apos;)  Evaluate an expression (ObjC++ or Swift) in               the current program context, using user defined variables and               variables currently in scope.  q         -- (&apos;quit&apos;)  Quit out of the LLDB debugger.  r         -- (&apos;process launch -c /bin/sh --&apos;)  Launch the executable in the               debugger.  rbreak    -- (&apos;breakpoint set -r %1&apos;)  Sets a breakpoint or set of               breakpoints in the executable.  repl      -- (&apos;expression -r  -- &apos;)  Evaluate an expression (ObjC++ or Swift)               in the current program context, using user defined variables and               variables currently in scope.  run       -- (&apos;process launch -c /bin/sh --&apos;)  Launch the executable in the               debugger.  s         -- (&apos;thread step-in&apos;)  Source level single step in specified thread               (current thread, if none specified).  si        -- (&apos;thread step-inst&apos;)  Single step one instruction in specified               thread (current thread, if none specified).  step      -- (&apos;thread step-in&apos;)  Source level single step in specified thread               (current thread, if none specified).  stepi     -- (&apos;thread step-inst&apos;)  Single step one instruction in specified               thread (current thread, if none specified).  t         -- (&apos;thread select&apos;)  Select a thread as the currently active               thread.  tbreak    -- (&apos;_regexp-tbreak&apos;)  Set a one shot breakpoint using a regular               expression to specify the location, where &lt;linenum&gt; is in               decimal and &lt;address&gt; is in hex.  undisplay -- (&apos;_regexp-undisplay&apos;)  Remove an expression evaluation               stop-hook.  up        -- (&apos;_regexp-up&apos;)  Go up &quot;n&quot; frames in the stack (1 frame by               default).  x         -- (&apos;memory read&apos;)  Read from the memory of the process being           debugged.For more information on any command, type &apos;help &lt;command-name&gt;&apos;.</code></pre><h3 id="進階debug-mode"><a href="#進階debug-mode" class="headerlink" title="進階debug mode"></a>進階debug mode</h3><p>故事當然不會就醬子結束，breakpoint停在 </p><pre><code>1 [AppDelegate application:didFinishLaunchingWithOptions:] at /Users/minghongyu/Documents/work/iphone/OpenPoint/OpenPoint/AppDelegate.m:32</code></pre><p>如圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug09.png" alt="debug09" style="width:310px"><p>但是  好像還有個</p><pre><code>0 [Crashlytics crash]</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug10.png" alt="debug10" style="width:310px"><p>會停在一堆機器碼的地方，真的讓人有點難以閱讀咧</p><p>接著在 debug console裡輸入<br><font color="red">(不要問，很可怕)</font></p><pre><code>po $arg1</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug11.png" alt="debug11" style="width:310px"><p>發現他會吐出當下的crash的human－readable的解釋！！！！</p><p>很重要  所以要說三次</p><pre><code>真的是太好了！！！！！！真的是太好了！！！！！！真的是太好了！！！！！！</code></pre><p>但是  每次又要用手打 <font color="red">po ＄arg1</font> 很辛苦有沒有？？很辛苦有沒有？？</p><p>還好 xcode真的很貼心</p><pre><code>在All Exception上按右鍵  選擇編輯「Edit Breakpoint」</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug12.png" alt="debug12" style="width:310px"><pre><code>點選「Add Action」</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug13.png" alt="debug13" style="width:310px"><pre><code>輸入 po $arg1</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/debug14.png" alt="debug14" style="width:310px"><p>The End<del>~</del></p><p>有沒有很酷？  有沒有?  有沒有? </p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dungeon Generator</title>
      <link href="/2015/06/30/Dungeon%20Generator/"/>
      <url>/2015/06/30/Dungeon%20Generator/</url>
      <content type="html"><![CDATA[<p>diablo的亂數地圖是怎麼做的？還是直接用swift來寫一次</p><p>###方法：</p><p>將矩形的地圖空間以「切割法」亂數切割房間，在切割的同時留一個出口，</p><p>反覆的切割後  就會得到一個亂數生成的房間了</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>牆壁－寛1  出口－寛1</p><p><a href="https://github.com/nobodyyu/DungeonGenerator/tree/master" target="_blank" rel="noopener">GitHub下載連結</a></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dropbox practice 2015</title>
      <link href="/2015/06/16/dropbox-practice-2015/"/>
      <url>/2015/06/16/dropbox-practice-2015/</url>
      <content type="html"><![CDATA[<p>手機也能透過sdk來讀取放在dropbox雲端空間的檔案！！<br><br>利用dropbox來打造一個可以儲存讀取雲端空間的app吧<br><br>只要跟著如下的步驟做就可以了<br><br></p><h3 id="在APP-Console開一個app"><a href="#在APP-Console開一個app" class="headerlink" title="在APP Console開一個app"></a>在APP Console開一個app</h3><p><a href>https://www.dropbox.com/developers/apps</a></p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox01.png" alt="dropbox01" style="width:310px"><p>把其中的app key 和 app secret複製下來 </p><h3 id="下載sdk範例程式"><a href="#下載sdk範例程式" class="headerlink" title="下載sdk範例程式"></a>下載sdk範例程式</h3><p><a href>https://www.dropbox.com/developers/core/sdks/ios</a></p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox02.png" alt="dropbox02" style="width:310px"><h3 id="把-app-key-與-app-secret貼到範例的delegate-m-裡"><a href="#把-app-key-與-app-secret貼到範例的delegate-m-裡" class="headerlink" title="把 app key 與 app secret貼到範例的delegate.m 裡"></a>把 app key 與 app secret貼到範例的delegate.m 裡</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox03.png" alt="dropbox03" style="width:310px"><p>記得要設定根目錄 </p><pre><code>NSString *root = kDBRootDropbox;</code></pre><p>或</p><pre><code>NSString *root = kDBRootAppFolder；</code></pre><h3 id="設定url-schema-讓-dropbox-signon-可以回得來"><a href="#設定url-schema-讓-dropbox-signon-可以回得來" class="headerlink" title="設定url schema 讓 dropbox signon 可以回得來"></a>設定url schema 讓 dropbox signon 可以回得來</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox04.png" alt="dropbox04" style="width:310px"><h3 id="好了的話就把程式run起來"><a href="#好了的話就把程式run起來" class="headerlink" title="好了的話就把程式run起來"></a>好了的話就把程式run起來</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox05.png" alt="dropbox05" style="width:310px"><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox06.png" alt="dropbox06" style="width:310px"><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/dropbox07.png" alt="dropbox07" style="width:310px"><p>拍洗  照片不給看～</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google Service 2015 Walk Through</title>
      <link href="/2015/06/09/Google-Service-2015-Walk-Through/"/>
      <url>/2015/06/09/Google-Service-2015-Walk-Through/</url>
      <content type="html"><![CDATA[<p>2015 Google I/O  之後  很多東西都改了，所以來做一次walk through吧</p><p>比較特別的是 gcm也可以發ios了</p><p><a href>https://developers.google.com/cloud-messaging/</a></p><h3 id="try-it-on-iOS"><a href="#try-it-on-iOS" class="headerlink" title="try it on iOS"></a>try it on iOS</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/gcm01.png" alt="gcm01" style="width:310px"><h3 id="選擇語言-objc／swift"><a href="#選擇語言-objc／swift" class="headerlink" title="選擇語言 objc／swift"></a>選擇語言 objc／swift</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/gcm02.png" alt="gcm02" style="width:310px"><h3 id="使用cocoapods安裝-gcm／analytics"><a href="#使用cocoapods安裝-gcm／analytics" class="headerlink" title="使用cocoapods安裝 gcm／analytics"></a>使用cocoapods安裝 gcm／analytics</h3><p>Podfile</p><pre><code>pod &apos;Google/Analytics&apos;pod &apos;Google/CloudMessaging&apos;</code></pre><p>在所在目錄安裝</p><pre><code>pod install</code></pre><h4 id="pod-要確認是否為最新版本，不然安裝後會有錯誤"><a href="#pod-要確認是否為最新版本，不然安裝後會有錯誤" class="headerlink" title="pod 要確認是否為最新版本，不然安裝後會有錯誤"></a>pod 要確認是否為最新版本，不然安裝後會有錯誤</h4><p>完成之後打開workspace會看到一堆framework</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/gcm03.png" alt="gcm03" style="width:310px"><h3 id="GCM的一些code"><a href="#GCM的一些code" class="headerlink" title="GCM的一些code"></a>GCM的一些code</h3><pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    // Register for remote notifications    UIUserNotificationType allNotificationTypes =    (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);    UIUserNotificationSettings *settings =    [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];    [[UIApplication sharedApplication] registerUserNotificationSettings:settings];    [[UIApplication sharedApplication] registerForRemoteNotifications];    return YES;}-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{    NSLog(@&quot;%@&quot;,deviceToken);    [[GGLInstanceID sharedInstance] startWithConfig:[GGLInstanceIDConfig defaultConfig]];    _registrationOptions = @{kGGLInstanceIDRegisterAPNSOption:deviceToken,                             kGGLInstanceIDAPNSServerTypeSandboxOption:@YES};    [[GGLInstanceID sharedInstance] tokenWithAuthorizedEntity:@&quot;gswt-ea275&quot;                                                        scope:kGGLInstanceIDScopeGCM                                                      options:_registrationOptions                                                      handler:nil];}-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error{    NSLog(@&quot;%@&quot;,error);}</code></pre><h3 id="GA的一些code"><a href="#GA的一些code" class="headerlink" title="GA的一些code"></a>GA的一些code</h3><pre><code>-(void)GAScreen:(NSString *)name{    dispatch_queue_t myQueue = dispatch_queue_create(&quot;GAQueue&quot;,NULL);    dispatch_async(myQueue, ^{        id&lt;GAITracker&gt; tracker = [[GAI sharedInstance] defaultTracker];        [tracker set:kGAIScreenName value:name];        [tracker send:[[GAIDictionaryBuilder createScreenView] build]];    });}-(void)GAEvent:(NSString *)CATEGORY :(NSString *)ACTION :(NSString *)LABEL :(NSNumber *)Value{    dispatch_queue_t myQueue = dispatch_queue_create(&quot;GAQueue&quot;,NULL);    dispatch_async(myQueue, ^{        id&lt;GAITracker&gt; tracker = [[GAI sharedInstance] defaultTracker];        [tracker send:[[GAIDictionaryBuilder createEventWithCategory:CATEGORY action:ACTION label:LABEL value:Value] build]];    });}</code></pre><p>希望對大家有幫助</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift shuffle</title>
      <link href="/2015/05/27/swift-shuffle/"/>
      <url>/2015/05/27/swift-shuffle/</url>
      <content type="html"><![CDATA[<h3 id="為程式注入靈魂的小技巧-shuffle"><a href="#為程式注入靈魂的小技巧-shuffle" class="headerlink" title="為程式注入靈魂的小技巧 shuffle"></a>為程式注入靈魂的小技巧 shuffle</h3><pre><code>func shuffle&lt;C: MutableCollectionType where C.Index == Int&gt;(var list: C) -&gt; C {    let c = count(list)    for i in 0..&lt;(c - 1) {        let j = Int(arc4random_uniform(UInt32(c - i))) + i        swap(&amp;list[i], &amp;list[j])    }    return list}huffle([1, 2, 3, 4, 5, 6, 7, 8])        // e.g., [6, 1, 8, 3, 2, 4, 7, 5]shuffle([&quot;hello&quot;, &quot;goodbye&quot;, &quot;ciao&quot;])    // e.g., [&quot;ciao&quot;, &quot;goodbye&quot;, &quot;hello&quot;]</code></pre><h3 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h3><pre><code>extension Array {    mutating func shuffle() {        for i in 0..&lt;(count - 1) {            let j = Int(arc4random_uniform(UInt32(count - i))) + i            swap(&amp;self[i], &amp;self[j])        }    }}var numbers = [1, 2, 3, 4, 5, 6, 7, 8]numbers.shuffle()     </code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift spritekit walk through</title>
      <link href="/2015/05/26/swift-spritekit-walk-through/"/>
      <url>/2015/05/26/swift-spritekit-walk-through/</url>
      <content type="html"><![CDATA[<h3 id="新增一個遊戲專案"><a href="#新增一個遊戲專案" class="headerlink" title="新增一個遊戲專案"></a>新增一個遊戲專案</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/spritekit01.png" alt="spritekit01" style="width:310px"><p>並且設定語言為swift</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/spritekit02.png" alt="spritekit02" style="width:310px"><p>此時，可以先砍掉一些沒有必要的檔案（iOS很貼心放了一個太空船在程式的template裡）</p><h3 id="加入一些遊戲需要用到的圖檔"><a href="#加入一些遊戲需要用到的圖檔" class="headerlink" title="加入一些遊戲需要用到的圖檔"></a>加入一些遊戲需要用到的圖檔</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/spritekit03.png" alt="spritekit03" style="width:310px"><p>你可以放在images.asset或是直接拉到專案裡</p><h3 id="設一下GameViewController裡的-scene-size"><a href="#設一下GameViewController裡的-scene-size" class="headerlink" title="設一下GameViewController裡的 scene.size"></a>設一下GameViewController裡的 scene.size</h3><pre><code>scene.size = skView.bounds.size</code></pre><h3 id="了解scene的生命週期、座標系統、基本屬性"><a href="#了解scene的生命週期、座標系統、基本屬性" class="headerlink" title="了解scene的生命週期、座標系統、基本屬性"></a>了解scene的生命週期、座標系統、基本屬性</h3><h3 id="了解sprite基本屬性"><a href="#了解sprite基本屬性" class="headerlink" title="了解sprite基本屬性"></a>了解sprite基本屬性</h3><h3 id="了解texture基本屬性、打包textureAtlas-zip-file-with-altas"><a href="#了解texture基本屬性、打包textureAtlas-zip-file-with-altas" class="headerlink" title="了解texture基本屬性、打包textureAtlas(zip file with .altas)"></a>了解texture基本屬性、打包textureAtlas(zip file with .altas)</h3><h3 id="了解Action基本屬性"><a href="#了解Action基本屬性" class="headerlink" title="了解Action基本屬性"></a>了解Action基本屬性</h3><h3 id="了解Animation基本屬性"><a href="#了解Animation基本屬性" class="headerlink" title="了解Animation基本屬性"></a>了解Animation基本屬性</h3><h3 id="了解Physics"><a href="#了解Physics" class="headerlink" title="了解Physics"></a>了解Physics</h3><h3 id="game-loop？？"><a href="#game-loop？？" class="headerlink" title="game loop？？"></a>game loop？？</h3>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 遊戲 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在字串裡加上icon</title>
      <link href="/2015/05/21/%E5%9C%A8%E5%AD%97%E4%B8%B2%E8%A3%A1%E5%8A%A0%E4%B8%8Aicon/"/>
      <url>/2015/05/21/%E5%9C%A8%E5%AD%97%E4%B8%B2%E8%A3%A1%E5%8A%A0%E4%B8%8Aicon/</url>
      <content type="html"><![CDATA[<h1 id="在UILabel裡要怎麼做到呢？"><a href="#在UILabel裡要怎麼做到呢？" class="headerlink" title="在UILabel裡要怎麼做到呢？"></a>在UILabel裡要怎麼做到呢？</h1><p>ABC <img class="img-shadow" src="http://c360232.r32.cf2.rackcdn.com/blog/wp-content/uploads/2008/06/new.jpg" width="30"> CDE</p><pre><code>NSTextAttachment *attachment = [[NSTextAttachment alloc] init];attachment.image = [UIImage imageNamed:@&quot;MyIcon.png&quot;];NSAttributedString *attachmentString = [NSAttributedString attributedStringWithAttachment:attachment];NSMutableAttributedString *myString= [[NSMutableAttributedString alloc] initWithString:@&quot;My label text&quot;];[myString appendAttributedString:attachmentString];myLabel.attributedText = myString;</code></pre><p>不難懂～</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015 AudioToolBox walk through </title>
      <link href="/2015/05/15/2015-AudioToolBox-walk-through/"/>
      <url>/2015/05/15/2015-AudioToolBox-walk-through/</url>
      <content type="html"><![CDATA[<p>google出很多版本，沒幾個能用的，看官網後試出來的</p><pre><code>NSString *path  = [[NSBundle mainBundle] pathForResource:@&quot;button_click&quot; ofType:@&quot;mp3&quot;];           NSURL *filePath = [NSURL fileURLWithPath:path];           OSStatus status1 = AudioServicesCreateSystemSoundID((__bridge CFURLRef)filePath, &amp;soundFileObject);           NSLog(@&quot;%d&quot;,(int)status1);       AudioServicesPlaySystemSound (soundFileObject);</code></pre><p>話說 osstatus 好像有點新，如果有人可以分享的話，那是再好也不過的事了</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS Language ID</title>
      <link href="/2015/05/15/iOS-Language-ID/"/>
      <url>/2015/05/15/iOS-Language-ID/</url>
      <content type="html"><![CDATA[<table><thead><tr><th>Language</th><th>.lporj Language Code</th></tr></thead><tbody><tr><td>English</td><td>en</td></tr><tr><td>English (British)</td><td>en-GB</td></tr><tr><td>English (Australian)</td><td>en-AU</td></tr><tr><td>English (Canadian)</td><td>en-CA</td></tr><tr><td>English (Indian)</td><td>en-IN</td></tr><tr><td>French</td><td>fr</td></tr><tr><td>French (Canadian)</td><td>fr-CA</td></tr><tr><td>Spanish</td><td>es</td></tr><tr><td>Spanish (Mexico)</td><td>es-M</td></tr><tr><td>Portuguese</td><td>pt</td></tr><tr><td>Portuguese (Brazil)</td><td>pt-BR</td></tr><tr><td>Italian</td><td>it</td></tr><tr><td>German</td><td>de</td></tr><tr><td>Chinese</td><td></td></tr><tr><td>Chinese (Simplified)</td><td>zh-Hans</td></tr><tr><td>Chinese (Traditional)</td><td>zh-Hant</td></tr><tr><td>Chinese (Hong Kong)</td><td>zh-HK</td></tr><tr><td>Dutch</td><td>nl</td></tr><tr><td>Japanese</td><td>ja</td></tr><tr><td>Korean</td><td>ko</td></tr><tr><td>Vietnamese</td><td>vi</td></tr><tr><td>Russian</td><td>ru</td></tr><tr><td>Swedish</td><td>sv</td></tr><tr><td>Danish</td><td>da</td></tr><tr><td>Finnish</td><td>fi</td></tr><tr><td>Norwegian (Bokmal)</td><td>nb</td></tr><tr><td>Turkish</td><td>tr</td></tr><tr><td>Greek</td><td>el</td></tr><tr><td>Indonesian</td><td>id</td></tr><tr><td>Malay</td><td>ms</td></tr><tr><td>Thai</td><td>th</td></tr><tr><td>Hindi</td><td>hi</td></tr><tr><td>Hungarian</td><td>hu</td></tr><tr><td>Polish</td><td>pl</td></tr><tr><td>Czech</td><td>cs</td></tr><tr><td>Slovak</td><td>sk</td></tr><tr><td>Ukrainian</td><td>uk</td></tr><tr><td>Croatian</td><td>hr</td></tr><tr><td>Catalan</td><td>ca</td></tr><tr><td>Romanian</td><td>ro</td></tr><tr><td>Hebrew</td><td>he</td></tr><tr><td>Arabic</td><td>ar</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>inApp Purchase walkthrough</title>
      <link href="/2015/05/12/inApp-Purchase-walkthrough/"/>
      <url>/2015/05/12/inApp-Purchase-walkthrough/</url>
      <content type="html"><![CDATA[<h3 id="前言-2015-05"><a href="#前言-2015-05" class="headerlink" title="前言 2015-05"></a>前言 2015-05</h3><p>別人的walk through都有點年代了，而且關鍵的幾個點都沒有特別註明，所以只好自已來寫一個walk through</p><h1 id="unique-App-ID"><a href="#unique-App-ID" class="headerlink" title="unique App ID"></a>unique App ID</h1><p>意思是不可以使用Wildcard App ID來做APP的綁定（如果出現*是不允許的）</p><h3 id="member-center-Certificates-Identifiers-amp-Profiles-App-IDs"><a href="#member-center-Certificates-Identifiers-amp-Profiles-App-IDs" class="headerlink" title="[member center] - [Certificates, Identifiers &amp; Profiles] - [App IDs]"></a>[member center] - [Certificates, Identifiers &amp; Profiles] - [App IDs]</h3><h1 id="Provisioning-Profile"><a href="#Provisioning-Profile" class="headerlink" title="Provisioning Profile"></a>Provisioning Profile</h1><p>provision profile要與App ID匹配</p><h1 id="ItunesConnect-設定APP"><a href="#ItunesConnect-設定APP" class="headerlink" title="ItunesConnect 設定APP"></a>ItunesConnect 設定APP</h1><p>新增一個app，該填的填</p><h1 id="新增-inAPP-Product"><a href="#新增-inAPP-Product" class="headerlink" title="新增 inAPP Product"></a>新增 inAPP Product</h1><p>[APP] - [App 內購買項目] - [Create New] - [非消耗性項目]</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp01.png" alt="inapp01" style="width:310px"><p>非消耗性項目 把讓填的填一填後[儲存]</p><h1 id="ProductID-一定要是-appid-name"><a href="#ProductID-一定要是-appid-name" class="headerlink" title="ProductID 一定要是 appid.name"></a>ProductID 一定要是 appid.name</h1><p>在這裡卡關很久，很多walk through說ProdoctID只要unique，但是程式寫好，按下去就是 [StoreStateInvalidProduct]，要記得全部都要帶</p><p>(範例為) com.yuaki.No5.Remove_AD  </p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp02.png" alt="inapp02" style="width:310px"><h1 id="檢查xcode裡iap的設定是否開啟"><a href="#檢查xcode裡iap的設定是否開啟" class="headerlink" title="檢查xcode裡iap的設定是否開啟"></a>檢查xcode裡iap的設定是否開啟</h1><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp03.png" alt="inapp03" style="width:310px"><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="加入-StoreKit-Framework"><a href="#加入-StoreKit-Framework" class="headerlink" title="加入 StoreKit.Framework"></a>加入 StoreKit.Framework</h2><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp04.png" alt="inapp04" style="width:310px"><h2 id="加入三支程式-Store-h、Store-m和一支放在server的iap-php"><a href="#加入三支程式-Store-h、Store-m和一支放在server的iap-php" class="headerlink" title="加入三支程式 Store.h、Store.m和一支放在server的iap.php"></a>加入三支程式 Store.h、Store.m和一支放在server的iap.php</h2><h3 id="感謝-Paul-Wu-大大的無私分享"><a href="#感謝-Paul-Wu-大大的無私分享" class="headerlink" title="感謝 Paul Wu 大大的無私分享"></a>感謝 Paul Wu 大大的無私分享</h3><p>store.h</p><pre><code>////  Store.h//  DemoIAP////  Created by Paul Wu on 2014/11/23.//  Copyright (c) 2014年 Prodisky. All rights reserved.//#import &lt;Foundation/Foundation.h&gt;enum {    StoreStatePurchasing,    StoreStatePurchased,    StoreStateRestored,    StoreStateDeferred,    StoreStateVerifyReceipt,    StoreStateMakePaymentsFail,    StoreStateInvalidProduct,    StoreStateFailedClientInvalid,    StoreStateFailedPaymentCancelled,    StoreStateFailedPaymentInvalid,    StoreStateFailedPaymentNotAllowed,    StoreStateFailedUnknown};typedef NSUInteger StoreState;#import &lt;Foundation/Foundation.h&gt;#import &lt;StoreKit/StoreKit.h&gt;@interface Store : NSObject &lt;SKPaymentTransactionObserver, SKProductsRequestDelegate&gt;@property (nonatomic, copy) void (^updatedState) (StoreState state, NSString *productIdentifier);@property (nonatomic, copy) void (^verifyPass) (NSString *productIdentifier);@property (nonatomic, copy) void (^verifyFail) (NSString *productIdentifier);+ (Store*)shared;- (void)purchase:(NSString *)productIdentifier;- (void)restore;@end</code></pre><p>store.m<br>    //<br>    //  Store.m<br>    //  DemoIAP<br>    //<br>    //  Created by Paul Wu on 2014/11/23.<br>    //  Copyright (c) 2014年 Prodisky. All rights reserved.<br>    //</p><pre><code>#import &quot;Store.h&quot;#define verifyServerURL        @&quot;http://XXX/iap.php&quot;#pragma mark@interface URLRequest : NSMutableURLRequest@property (nonatomic, copy) void (^didFinish) (NSData* response);@property (nonatomic, copy) void (^didError) (NSError *error);- (void) startAsynchronous;@end@interface URLRequest () {    NSMutableData *responseData;    NSURLConnection *urlconnection;}@end@implementation URLRequest- (id)init {    if (self = [super init]) {        self.timeoutInterval = 3.14;        self.HTTPShouldUsePipelining = YES;    }    return self;}- (void)startAsynchronous {    urlconnection = [[NSURLConnection alloc] initWithRequest:self delegate:self];}- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {    responseData = [NSMutableData new];}- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {    [responseData appendData:data];}- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {    [urlconnection cancel];    responseData = [NSMutableData new];    if (_didError) _didError(error);}- (void)connectionDidFinishLoading:(NSURLConnection *)connection {    [urlconnection cancel];    urlconnection = nil;    if (_didFinish) _didFinish(responseData);}@end#pragma mark@implementation Storestatic Store *_shared = nil;+ (Store*)shared {    if (_shared == nil) _shared = [self new];    return _shared;}- (void)verifyReceipt:(SKPaymentTransaction *)transaction {    NSString *parameterString = [NSString stringWithFormat:@&quot;receipt=%@&quot;, [[NSBundle mainBundle] appStoreReceiptURL]];    URLRequest *request = [URLRequest new];    request.URL = [NSURL URLWithString:verifyServerURL];    request.cachePolicy = NSURLRequestReloadIgnoringLocalAndRemoteCacheData;    request.HTTPBody = [parameterString dataUsingEncoding:NSUTF8StringEncoding];    request.HTTPMethod = @&quot;POST&quot;;    [request setValue:@&quot;application/x-www-form-urlencoded&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];    request.didFinish = ^(NSData* response) {        NSError* error;        NSDictionary* json = [NSJSONSerialization                              JSONObjectWithData:response                              options:kNilOptions                              error:&amp;error];        if ([[json objectForKey:@&quot;result&quot;] integerValue] &gt; 0) {            if (_verifyPass) _verifyPass(transaction.payment.productIdentifier);        } else {            if (_verifyFail) _verifyFail(transaction.payment.productIdentifier);        }    };    request.didError = ^(NSError *error){        if (_verifyFail) _verifyFail(transaction.payment.productIdentifier);    };    [request startAsynchronous];}- (id)init {    if (self = [super init]) {        [[SKPaymentQueue defaultQueue] addTransactionObserver:self];    }    return self;}- (void)purchase:(NSString *)productIdentifier {    if ([SKPaymentQueue canMakePayments]) {        SKProductsRequest *request = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:productIdentifier]];        request.delegate = self;        [request start];    } else {        if (_updatedState) _updatedState(StoreStateMakePaymentsFail, productIdentifier);    }}- (void)restore {    [[SKPaymentQueue defaultQueue] restoreCompletedTransactions];}- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response {    if ([response.invalidProductIdentifiers count] == 0) {        for (NSUInteger i = 0; i &lt; [response.products count]; i++) {            SKProduct *product = [response.products objectAtIndex:i];            SKPayment *payment = [SKPayment paymentWithProduct:product];            [[SKPaymentQueue defaultQueue] addPayment:payment];        }    } else {        if (_updatedState)            for (NSUInteger i = 0; i &lt; [response.invalidProductIdentifiers count]; i++)                _updatedState(StoreStateInvalidProduct, [response.invalidProductIdentifiers objectAtIndex:i]);    }}- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions {    for (SKPaymentTransaction *transaction in transactions) {        if (transaction.transactionState != SKPaymentTransactionStatePurchasing)            [[SKPaymentQueue defaultQueue] finishTransaction: transaction];        if (_updatedState) {            switch (transaction.transactionState) {                case SKPaymentTransactionStatePurchasing:                    _updatedState(StoreStatePurchasing, transaction.payment.productIdentifier);                    break;                case SKPaymentTransactionStatePurchased:                    _updatedState(StoreStatePurchased, transaction.payment.productIdentifier);                    break;                case SKPaymentTransactionStateFailed:                    switch (transaction.error.code) {                        case SKErrorClientInvalid:                            _updatedState(StoreStateFailedClientInvalid, transaction.payment.productIdentifier);                            break;                        case SKErrorPaymentCancelled:                            _updatedState(StoreStateFailedPaymentCancelled, transaction.payment.productIdentifier);                            break;                        case SKErrorPaymentInvalid:                            _updatedState(StoreStateFailedPaymentInvalid, transaction.payment.productIdentifier);                            break;                        case SKErrorPaymentNotAllowed:                            _updatedState(StoreStateFailedPaymentNotAllowed, transaction.payment.productIdentifier);                            break;                        case SKErrorUnknown:                        default:                            _updatedState(StoreStateFailedUnknown, transaction.payment.productIdentifier);                            break;                    }                    break;                case SKPaymentTransactionStateRestored:                    _updatedState(StoreStateRestored, transaction.payment.productIdentifier);                    break;                case SKPaymentTransactionStateDeferred:                    //iOS 8 and later.                    _updatedState(StoreStateDeferred, transaction.payment.productIdentifier);                    break;            }        }        if (transaction.transactionState == SKPaymentTransactionStatePurchased ||            transaction.transactionState == SKPaymentTransactionStateRestored)            [self verifyReceipt:transaction];    }}@end</code></pre><p>Server code - iap.php</p><pre><code>&lt;?php    function verify($receipt) {        if (empty($receipt)) {            $result[&quot;result&quot;] = 0;            return $result;        }        $dataToPost = json_encode(array(&quot;receipt-data&quot; =&gt; $receipt));        $opts = array(&apos;http&apos; =&gt;            array(                &apos;method&apos;  =&gt; &apos;POST&apos;,                &apos;header&apos;  =&gt; &apos;Content-type: application/x-www-form-urlencoded&apos;,                &apos;content&apos; =&gt; $dataToPost            )        );        $context  = stream_context_create($opts);        $verifyResult = file_get_contents(&apos;https://buy.itunes.apple.com/verifyReceipt&apos;, false, $context);        $verifyStatus = json_decode($verifyResult);        if ($verifyStatus-&gt;{&apos;status&apos;} == 0) {            $result[&quot;result&quot;] = 1;            return $result;        }        $verifyResult = file_get_contents(&apos;https://sandbox.itunes.apple.com/verifyReceipt&apos;, false, $context);        $verifyStatus = json_decode($verifyResult);        if ($verifyStatus-&gt;{&apos;status&apos;} == 0) {            $result[&quot;result&quot;] = 2;            return $result;        }        $result[&quot;result&quot;] = -2;        return $result;    }    echo json_encode(verify($_REQUEST[&quot;receipt&quot;]));?&gt;</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>購買</p><pre><code>[[Store shared] purchase:@&quot;com.yuaki.No5.Remove_AD&quot;];</code></pre><p>回復購買產品動作<br>    [[Store shared] restore];</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><pre><code>-(void)checkStore{    [Store shared].updatedState = ^(StoreState state, NSString *productIdentifier) {        //需要顯示購買過程時使用。        switch (state) {            case StoreStatePurchasing:                NSLog(@&quot;StoreStatePurchasing %@&quot;, productIdentifier);                break;            case StoreStatePurchased:                NSLog(@&quot;StoreStatePurchased %@&quot;, productIdentifier);                break;            case StoreStateRestored:                NSLog(@&quot;StoreStateRestored %@&quot;, productIdentifier);                [self performSelector:@selector(checkStore) withObject:nil afterDelay:5.0f];                break;            case StoreStateDeferred:                NSLog(@&quot;StoreStateDeferred %@&quot;, productIdentifier);                break;            case StoreStateVerifyReceipt:                NSLog(@&quot;StoreStateVerifyReceipt %@&quot;, productIdentifier);                break;            case StoreStateMakePaymentsFail:                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;付款失敗&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                NSLog(@&quot;StoreStateMakePaymentsFail %@&quot;, productIdentifier);                break;            case StoreStateInvalidProduct:                NSLog(@&quot;StoreStateInvalidProduct %@&quot;, productIdentifier);                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;產品id無效&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                break;            case StoreStateFailedClientInvalid:                NSLog(@&quot;StoreStateFailedClientInvalid %@&quot;, productIdentifier);                break;            case StoreStateFailedPaymentCancelled:                NSLog(@&quot;StoreStateFailedPaymentCancelled %@&quot;, productIdentifier);                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;付款取消&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                break;            case StoreStateFailedPaymentInvalid:                NSLog(@&quot;StoreStateFailedPaymentInvalid %@&quot;, productIdentifier);                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;付款失效&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                break;            case StoreStateFailedPaymentNotAllowed:                NSLog(@&quot;StoreStateFailedPaymentNotAllowed %@&quot;, productIdentifier);                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;不允許付款&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                break;            case StoreStateFailedUnknown:                [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;付款有未知的錯誤&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];                NSLog(@&quot;StoreStateFailedUnknown %@&quot;, productIdentifier);                break;        }    };    [Store shared].verifyPass = ^(NSString *productIdentifier) {        [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;購買成功&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];        //remove AD    };    [Store shared].verifyFail = ^(NSString *productIdentifier) {        [[[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;購買失敗&quot; delegate:self cancelButtonTitle:@&quot;確定&quot; otherButtonTitles:nil] show];    };}</code></pre><h1 id="沙箱測試"><a href="#沙箱測試" class="headerlink" title="沙箱測試"></a>沙箱測試</h1><p>新增測試人員<br>[使用者和職能] - [測試人員] - [+]</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp06.png" alt="inapp06" style="width:310px"><p>該填的填一填<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp07.png" alt="inapp07" style="width:310px"></p><p>好玩的是，不能使用既有的appid當做沙箱測試人員，只好去申請一個新的email來測試。</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp08.png" alt="inapp08" style="width:310px"><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp09.png" alt="inapp09" style="width:310px"><p>在手機上[App Store] &gt; [精選項目] &gt; [登入] 沙箱測試人員</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/inapp10.png" alt="inapp10" style="width:310px"><p>接著就可以進行購買測試了</p><h4 id="打完收功"><a href="#打完收功" class="headerlink" title="打完收功"></a>打完收功</h4>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>add MotionEffect for your UIView</title>
      <link href="/2015/05/05/add-MotionEffect-for-your-UIView/"/>
      <url>/2015/05/05/add-MotionEffect-for-your-UIView/</url>
      <content type="html"><![CDATA[<p>為你的 UIView 加上 Motion的效果</p><pre><code>UIInterpolatingMotionEffect *xAxis = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.x&quot; type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];xAxis.maximumRelativeValue = @(40);xAxis.minimumRelativeValue = @(-40);UIInterpolatingMotionEffect *yAxis = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.y&quot; type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];yAxis.maximumRelativeValue = @(40);yAxis.minimumRelativeValue = @(-40);UIMotionEffectGroup *group = [[UIMotionEffectGroup alloc] init];group.motionEffects = @[xAxis,yAxis];[btnMap addMotionEffect:group];</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>make UIRefreshControll by your self</title>
      <link href="/2015/05/05/make-UIRefreshControll-by-your-self/"/>
      <url>/2015/05/05/make-UIRefreshControll-by-your-self/</url>
      <content type="html"><![CDATA[<p>##裡面用到了幾個技示巧</p><p>1。 旋轉的animation<br>2。 移動的animation<br>3。 移除不必要的UIActivityIndicator</p><h3 id="bikeRegreshConrtol-h"><a href="#bikeRegreshConrtol-h" class="headerlink" title="bikeRegreshConrtol.h"></a>bikeRegreshConrtol.h</h3><pre><code>#import &lt;UIKit/UIKit.h&gt;@interface bikeRegreshConrtol : UIRefreshControl-(void)makeAnimate;@end</code></pre><h3 id="bikeRegreshConrtol-m"><a href="#bikeRegreshConrtol-m" class="headerlink" title="bikeRegreshConrtol.m"></a>bikeRegreshConrtol.m</h3><p>#import “bikeRegreshConrtol.h”</p><pre><code>@implementation bikeRegreshConrtol-(instancetype)init{    self = [super init];    if (self) {    }    return  self;}-(void)makeAnimate{    for (UIView *V in self.subviews) {        if ([[V class] isSubclassOfClass:[UIImageView class]]) {            NSLog(@&quot;%@&quot;,[V class]);        }else{            [V removeFromSuperview];        }    }    UIImageView *wheel1 = [[UIImageView alloc] initWithImage:                           [UIImage imageNamed: @&quot;wheel.png&quot;]];    [wheel1 setFrame:CGRectMake(50, self.center.y, 30, 30)];    UIImageView *wheel2 = [[UIImageView alloc] initWithImage:                           [UIImage imageNamed: @&quot;wheel.png&quot;]];    [wheel2 setFrame:CGRectMake(90, self.center.y, 30, 30)];    if ([wheel1.layer animationForKey:@&quot;SpinAnimation&quot;] == nil) {        CABasicAnimation* animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];        animation.fromValue = [NSNumber numberWithFloat:0.0f];        animation.toValue = [NSNumber numberWithFloat: 2*M_PI];        animation.duration = 2.4f;        animation.repeatCount = INFINITY;        [wheel1.layer addAnimation:animation forKey:@&quot;SpinAnimation&quot;];    }    if ([wheel2.layer animationForKey:@&quot;SpinAnimation&quot;] == nil) {        CABasicAnimation* animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];        animation.fromValue = [NSNumber numberWithFloat:0.0f];        animation.toValue = [NSNumber numberWithFloat: 2*M_PI];        animation.duration = 2.2f;        animation.repeatCount = INFINITY;        [wheel2.layer addAnimation:animation forKey:@&quot;SpinAnimation&quot;];    }    [self insertSubview:wheel1 atIndex:3];    [self insertSubview:wheel2 atIndex:2];    UIImageView *back1 = [[UIImageView alloc] initWithImage:                           [UIImage imageNamed: @&quot;background.png&quot;]];    [back1 setFrame:CGRectMake(0, 0, self.bounds.size.width, self.bounds.size.height)];    [self insertSubview:back1 atIndex:1];    UIImageView *back2 = [[UIImageView alloc] initWithImage:                          [UIImage imageNamed: @&quot;background.png&quot;]];    [back2 setFrame:CGRectMake(320, 0, self.bounds.size.width, self.bounds.size.height)];    [self insertSubview:back2 atIndex:0];    [self bringSubviewToFront:wheel1];    [self bringSubviewToFront:wheel2];//        [self doAnimate:back1 :back2];}-(void)doAnimate:(UIImageView *)img :(UIImageView *)img2{    [UIView animateWithDuration:32.0f animations:^{        [img setFrame:CGRectMake(-320, 0, img.frame.size.width, img.frame.size.height)];        [img2 setFrame:CGRectMake(0, 0, img.frame.size.width, img.frame.size.height)];    } completion:^(BOOL finished) {        [img setFrame:CGRectMake(0, 0, img.frame.size.width, img.frame.size.height)];        [img2 setFrame:CGRectMake(320, 0, img.frame.size.width, img.frame.size.height)];        [self doAnimate:img :img2];    }];}</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>refreshControl = [[bikeRegreshConrtol alloc] init];[refreshControl addTarget:self action:@selector(refresh)              forControlEvents:UIControlEventValueChanged];[mTable addSubview:refreshControl];[refreshControl makeAnimate];</code></pre><h3 id="更新結束"><a href="#更新結束" class="headerlink" title="更新結束"></a>更新結束</h3><pre><code>[refreshControl endRefreshing];</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>make HUD by your self</title>
      <link href="/2015/05/04/make-HUD-by-your-self/"/>
      <url>/2015/05/04/make-HUD-by-your-self/</url>
      <content type="html"><![CDATA[<h3 id="首先，需要一個singleton來統管這個HUD，避免一次出現兩個hud以上的窘境"><a href="#首先，需要一個singleton來統管這個HUD，避免一次出現兩個hud以上的窘境" class="headerlink" title="首先，需要一個singleton來統管這個HUD，避免一次出現兩個hud以上的窘境"></a>首先，需要一個singleton來統管這個HUD，避免一次出現兩個hud以上的窘境</h3><pre><code>static LoadingView *myInstance = nil;+(LoadingView *)shared{    // check to see if an instance already exists    if (nil == myInstance) {        myInstance  = [[[self class] alloc] init];        // initialize variables here    }    // return the instance of this class    return myInstance;}</code></pre><h3 id="接著實作兩個-instanceMethod"><a href="#接著實作兩個-instanceMethod" class="headerlink" title="接著實作兩個 instanceMethod"></a>接著實作兩個 instanceMethod</h3><pre><code>+ (void)dismiss{    [[UIApplication sharedApplication] endIgnoringInteractionEvents];    [[self shared] selfHide];}+ (void)show{    [[UIApplication sharedApplication] beginIgnoringInteractionEvents];    [[self shared] selfShow];}</code></pre><h3 id="兩個class-method"><a href="#兩個class-method" class="headerlink" title="兩個class method"></a>兩個class method</h3><p>自window中找到hud並移除</p><pre><code>-(void)selfHide{    [[((AppDelegate *)([UIApplication sharedApplication].delegate)).window viewWithTag:56789] removeFromSuperview];    [[((AppDelegate *)([UIApplication sharedApplication].delegate)).window viewWithTag:56790] removeFromSuperview];}</code></pre><p>將hud加到最上層的window，範例中的hud為中間一個靜置圖片，週遭再放一個不斷旋轉的圖片</p><pre><code>-(void)selfShow{    UIImageView *mView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];    [mView setImage:[UIImage imageNamed:@&quot;loading.png&quot;]];    mView.tag = 56789;    [mView setCenter:((AppDelegate *)([UIApplication sharedApplication].delegate)).window.center];    UIImageView *mView2 = [[UIImageView alloc] initWithFrame:CGRectMake(0,0, 100, 100)];    [mView2 setImage:[UIImage imageNamed:@&quot;loading2.png&quot;]];    mView2.tag = 56790;    [mView2 setCenter:mView.center];    if ([mView2.layer animationForKey:@&quot;SpinAnimation&quot;] == nil) {        CABasicAnimation* animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];        animation.fromValue = [NSNumber numberWithFloat:0.0f];        animation.toValue = [NSNumber numberWithFloat: 2*M_PI];        animation.duration = 1.0f;        animation.repeatCount = INFINITY;        [mView2.layer addAnimation:animation forKey:@&quot;SpinAnimation&quot;];    }    [((AppDelegate *)([UIApplication sharedApplication].delegate)).window addSubview:mView];    [((AppDelegate *)([UIApplication sharedApplication].delegate)).window addSubview:mView2];}</code></pre><p>接著，在其他地方引用，再呼叫 [LoadingView show]、[LoadingView dismiss] 就可以了</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>取得MKMapView的Zoom Level</title>
      <link href="/2015/04/23/%E5%8F%96%E5%BE%97MKMapView%E7%9A%84Zoom-Level/"/>
      <url>/2015/04/23/%E5%8F%96%E5%BE%97MKMapView%E7%9A%84Zoom-Level/</url>
      <content type="html"><![CDATA[<p>定義地球弧度</p><pre><code>#define MERCATOR_RADIUS 85445659.44705395 </code></pre><p>Method</p><pre><code>- (int)getZoomLevel:(MKMapView*)_mapView {     return 21－round(log2(_mapView.region.span.longitudeDelta * MERCATOR_RADIUS * M_PI / (180.0 * _mapView.bounds.size.width))); } </code></pre><p>測試一下</p><pre><code>- (void)mapView:(MKMapView *)_mapView regionDidChangeAnimated:(BOOL)animated {     NSLog(@&quot;zoom level %d&quot;, [self getZoomLevel:_mapView]); } </code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iBeacon Scanner實作概念</title>
      <link href="/2015/04/22/iBeacon-Scanner%E5%AF%A6%E4%BD%9C%E6%A6%82%E5%BF%B5/"/>
      <url>/2015/04/22/iBeacon-Scanner%E5%AF%A6%E4%BD%9C%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h3 id="1-利用-CoreBluetoooth-來找尋附近的藍芽裝置"><a href="#1-利用-CoreBluetoooth-來找尋附近的藍芽裝置" class="headerlink" title="1. 利用 CoreBluetoooth 來找尋附近的藍芽裝置"></a>1. 利用 CoreBluetoooth 來找尋附近的藍芽裝置</h3><p>Code Snippet</p><pre><code>#import &lt;CoreBluetooth/CoreBluetooth.h&gt;@interface ViewController ()&lt;CBCentralManagerDelegate, CBPeripheralDelegate&gt;{    CBCentralManager *_manager;    CBPeripheral *_peripheral;}@end@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    _manager =  [[CBCentralManager alloc] initWithDelegate:self                                                    queue:nil];}- (void)centralManagerDidUpdateState:(CBCentralManager *)central{    switch ((int)central.state)    {        case CBCentralManagerStatePoweredOn:        {            NSDictionary *options = @{                                      CBCentralManagerScanOptionAllowDuplicatesKey: @YES                                      };            [_manager scanForPeripheralsWithServices:nil                                             options:options];            NSLog(@&quot;I just started scanning for peripherals&quot;);            break;        }    }}- (void) centralManager:(CBCentralManager *)central    didDiscoverPeripheral:(CBPeripheral *)peripheral        advertisementData:(NSDictionary *)advertisementData                     RSSI:(NSNumber *)RSSI{    if([advertisementData objectForKey:@&quot;kCBAdvDataLocalName&quot;]!=nil){        NSLog(@&quot;I see an advertisement with identifer: %@, state: %ld, name: %@, services: %@, description: %@&quot;,              [peripheral identifier],              [peripheral state],              [peripheral name],              [peripheral services],              [advertisementData description]);    }    if (_peripheral == nil)    {        NSLog(@&quot;Trying to connect to peripheral&quot;);        _peripheral = peripheral;        _peripheral.delegate = (id)self;        [central connectPeripheral:_peripheral                           options:nil];    }}- (void) centralManager:(CBCentralManager *)central    didConnectPeripheral:(CBPeripheral *)peripheral{    if (peripheral == nil)    {        NSLog(@&quot;connect callback has nil peripheral&quot;);    } else {        NSLog(@&quot;Connected to peripheral with identifer: %@, state: %ld, name: %@, services: %@&quot;,              [peripheral identifier],              [peripheral state],              [peripheral name],              [peripheral services]);        NSLog(@&quot;discovering services...&quot;);        _peripheral = peripheral;        _peripheral.delegate = (id)self;        [_peripheral discoverServices:nil];    }}- (void) peripheral:(CBPeripheral *)peripheral    didDiscoverServices:(NSArray *)serviceUuids{    NSLog(@&quot;discovered a peripheral&apos;s services: %@&quot;, serviceUuids);}</code></pre><p>其中可以過濾掉一些不會廣播的設備</p><pre><code>if([advertisementDataobjectForKey:@&quot;kCBAdvDataLocalName&quot;]!=nil){</code></pre><p>可以取該設備的UUID</p><pre><code>&lt;__NSConcreteUUID 0x17403f520&gt; 2750A093-A1C2-9953-A59F-A0769538DC15</code></pre><p>附帶一提的是，小米手環也會廣播自已的藍芽訊號</p><h3 id="2-接著利用-CLLocationManagerDelegate-對-已取得的UUID-對-iBeacon-做程式的實作"><a href="#2-接著利用-CLLocationManagerDelegate-對-已取得的UUID-對-iBeacon-做程式的實作" class="headerlink" title="2. 接著利用 CLLocationManagerDelegate 對 已取得的UUID 對 iBeacon 做程式的實作"></a>2. 接著利用 CLLocationManagerDelegate 對 已取得的UUID 對 iBeacon 做程式的實作</h3><pre><code> for (NSUUID *uuid in [APLDefaults sharedDefaults].supportedProximityUUIDs)    {        CLBeaconRegion *region = [[CLBeaconRegion alloc] initWithProximityUUID:uuid identifier:[uuid UUIDString]];        self.rangedRegions[region] = [NSArray array];    }#pragma mark - Location manager delegate- (void)locationManager:(CLLocationManager *)manager didRangeBeacons:(NSArray *)beacons inRegion:(CLBeaconRegion *)region{    // 這裡就可以取到 iBeacon 了}</code></pre><p>在這裡 小米手環 不會出現在 CLLocationManagerDelegate，所以會出現的就只剩下iBeacon了</p><h3 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h3>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[xcode6]打包自已做的framework</title>
      <link href="/2015/04/21/xcode6-%E6%89%93%E5%8C%85%E8%87%AA%E5%B7%B2%E5%81%9A%E7%9A%84framework/"/>
      <url>/2015/04/21/xcode6-%E6%89%93%E5%8C%85%E8%87%AA%E5%B7%B2%E5%81%9A%E7%9A%84framework/</url>
      <content type="html"><![CDATA[<p>如何把自已做的code打包成一包framework，給其他人使用</p><h3 id="1-新增一個專案，選取-Framework-amp-Library-Cocoa-Touch-Framework"><a href="#1-新增一個專案，選取-Framework-amp-Library-Cocoa-Touch-Framework" class="headerlink" title="1. 新增一個專案，選取 [Framework &amp; Library] [Cocoa Touch Framework]"></a>1. 新增一個專案，選取 [Framework &amp; Library] [Cocoa Touch Framework]</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework01.png" alt="framework01" style="width:310px"><h3 id="2-在專案中，把要放的程式加到專案中"><a href="#2-在專案中，把要放的程式加到專案中" class="headerlink" title="2. 在專案中，把要放的程式加到專案中"></a>2. 在專案中，把要放的程式加到專案中</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework02.png" alt="framework02" style="width:310px"><h3 id="3-在-Target-Build-Phase-Headers-中設定，要給人看的表頭檔-h-，和不給人看的表頭檔"><a href="#3-在-Target-Build-Phase-Headers-中設定，要給人看的表頭檔-h-，和不給人看的表頭檔" class="headerlink" title="3. 在[Target][Build Phase][Headers]中設定，要給人看的表頭檔(.h)，和不給人看的表頭檔"></a>3. 在[Target][Build Phase][Headers]中設定，要給人看的表頭檔(.h)，和不給人看的表頭檔</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework03.png" alt="framework03" style="width:310px"><h3 id="4-新增一個-Aggregate-Target"><a href="#4-新增一個-Aggregate-Target" class="headerlink" title="4. 新增一個 [Aggregate Target]"></a>4. 新增一個 [Aggregate Target]</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework04.png" alt="framework04" style="width:310px"><h3 id="5-在新的-Aggregate-Target-Build-Phases-加入-Run-Script"><a href="#5-在新的-Aggregate-Target-Build-Phases-加入-Run-Script" class="headerlink" title="5. 在新的 [Aggregate Target][Build Phases]加入 [Run Script]"></a>5. 在新的 [Aggregate Target][Build Phases]加入 [Run Script]</h3><pre><code>FMK_NAME=${PROJECT_NAME}INSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.frameworkWRK_DIR=buildDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.frameworkSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework# -configuration ${CONFIGURATION}# Clean and Building both architectures.xcodebuild -configuration &quot;Release&quot; -target &quot;${FMK_NAME}&quot; -sdk iphoneos clean buildxcodebuild -configuration &quot;Release&quot; -target &quot;${FMK_NAME}&quot; -sdk iphonesimulator clean build# Cleaning the oldest.if [ -d &quot;${INSTALL_DIR}&quot; ]thenrm -rf &quot;${INSTALL_DIR}&quot;fimkdir -p &quot;${INSTALL_DIR}&quot;cp -R &quot;${DEVICE_DIR}/&quot; &quot;${INSTALL_DIR}/&quot;# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.lipo -create &quot;${DEVICE_DIR}/${FMK_NAME}&quot; &quot;${SIMULATOR_DIR}/${FMK_NAME}&quot; -output &quot;${INSTALL_DIR}/${FMK_NAME}&quot;rm -r &quot;${WRK_DIR}&quot;open &quot;${INSTALL_DIR}&quot;</code></pre><p>如圖</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework05.png" alt="framework05" style="width:310px"><h3 id="6-最後-builde-project，會在-Products-生成你的個人的framework"><a href="#6-最後-builde-project，會在-Products-生成你的個人的framework" class="headerlink" title="6.最後 builde project，會在[Products] 生成你的個人的framework"></a>6.最後 builde project，會在[Products] 生成你的個人的framework</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework06.png" alt="framework06" style="width:210px"><h4 id="ps-如果要生成靜態的library使用，要注意一個設定"><a href="#ps-如果要生成靜態的library使用，要注意一個設定" class="headerlink" title="ps. 如果要生成靜態的library使用，要注意一個設定"></a>ps. 如果要生成靜態的library使用，要注意一個設定</h4><p>在 [Build Settings][Mach-O Type] 要選 [Static Library]</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework07.png" alt="framework07" style="width:310px"><h3 id="7-最後給別人引用時-要注意一下，除了在-Linked-Frameworks-and-Libraries-下引用之外，還要在-Targer-General-Embeded-Binies-下加入自定義的framework"><a href="#7-最後給別人引用時-要注意一下，除了在-Linked-Frameworks-and-Libraries-下引用之外，還要在-Targer-General-Embeded-Binies-下加入自定義的framework" class="headerlink" title="7. 最後給別人引用時 要注意一下，除了在[Linked Frameworks and Libraries]下引用之外，還要在[Targer][General][Embeded Binies]下加入自定義的framework"></a>7. 最後給別人引用時 要注意一下，除了在[Linked Frameworks and Libraries]下引用之外，還要在[Targer][General][Embeded Binies]下加入自定義的framework</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/framework08.png" alt="framework08" style="width:310px"><h3 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h3>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>加入 Admob 廣告</title>
      <link href="/2015/04/14/%E5%8A%A0%E5%85%A5-Admob-%E5%BB%A3%E5%91%8A/"/>
      <url>/2015/04/14/%E5%8A%A0%E5%85%A5-Admob-%E5%BB%A3%E5%91%8A/</url>
      <content type="html"><![CDATA[<h2 id="AdMob網頁設定"><a href="#AdMob網頁設定" class="headerlink" title="AdMob網頁設定"></a>AdMob網頁設定</h2><h3 id="1。註冊AdMob-帳號"><a href="#1。註冊AdMob-帳號" class="headerlink" title="1。註冊AdMob 帳號"></a>1。註冊AdMob 帳號</h3><p>不解釋</p><h3 id="2。加入新的應用程式"><a href="#2。加入新的應用程式" class="headerlink" title="2。加入新的應用程式"></a>2。加入新的應用程式</h3><p>點擊<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob01.png" alt="admob01" style="width:310px"></p><p>手動新增應用程式</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob02.png" alt="admob02" style="width:310px"><p>將廣告單編號複製起來</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob03.png" alt="admob03" style="width:310px"><h2 id="手機程式"><a href="#手機程式" class="headerlink" title="手機程式"></a>手機程式</h2><h3 id="1。pod-install"><a href="#1。pod-install" class="headerlink" title="1。pod install"></a>1。pod install</h3><p>在專案目錄下新增一個 Podfile 檔</p><pre><code>source &apos;https://github.com/CocoaPods/Specs.git&apos;platform :ios, &apos;7.0&apos;pod &apos;Google-Mobile-Ads-SDK&apos;, &apos;~&gt; 7.0&apos;</code></pre><h3 id="2。在terminal下指令進行安裝"><a href="#2。在terminal下指令進行安裝" class="headerlink" title="2。在terminal下指令進行安裝"></a>2。在terminal下指令進行安裝</h3><pre><code>pod install</code></pre><p>安裝好之後，打開新產生的專案的workspace</p><h3 id="3。在xib檔建一個UIView-並且將其class改為"><a href="#3。在xib檔建一個UIView-並且將其class改為" class="headerlink" title="3。在xib檔建一個UIView,並且將其class改為"></a>3。在xib檔建一個UIView,並且將其class改為</h3><pre><code>GADBannerView</code></pre><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob04.png" alt="admob04" style="width:310px"><p>接著拉好相對應的 IBOutlet<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob05.png" alt="admob05" style="width:310px"></p><p>記得import GoogleMobileAds （語法和一般的import不太一樣）</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob06.png" alt="admob06" style="width:310px"><h3 id="4。在-ViewDidLoad-or-anywhere-加入對應的程式碼"><a href="#4。在-ViewDidLoad-or-anywhere-加入對應的程式碼" class="headerlink" title="4。在 ViewDidLoad (or anywhere) 加入對應的程式碼"></a>4。在 ViewDidLoad (or anywhere) 加入對應的程式碼</h3><pre><code>bannerView.adUnitID = @&quot;和網頁的那串相同&quot;;  bannerView.rootViewController = self;  [bannerView loadRequest:[GADRequest request]];</code></pre><h3 id="5。看到測試用的ad出現"><a href="#5。看到測試用的ad出現" class="headerlink" title="5。看到測試用的ad出現"></a>5。看到測試用的ad出現</h3><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/admob07.png" alt="admob07" style="width:310px"><h2 id="AdMob網頁設定啟動"><a href="#AdMob網頁設定啟動" class="headerlink" title="AdMob網頁設定啟動"></a>AdMob網頁設定啟動</h2><p>據aircon解釋，在上架一週後可以搜尋得到應用程式，接著進行連結，就可以啟動admob了</p><h2 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h2>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GameKit tutorial</title>
      <link href="/2015/04/12/GameKit-tutorial/"/>
      <url>/2015/04/12/GameKit-tutorial/</url>
      <content type="html"><![CDATA[<h2 id="開始使用GAME-CENTER"><a href="#開始使用GAME-CENTER" class="headerlink" title="開始使用GAME CENTER"></a>開始使用GAME CENTER</h2><p>###1。在project裡加入 GameKit.framework</p><p>###2。在iOS Dev Center 加入對應的AppID，並且在iTunes Connect新增一個APP</p><p>###3。[My App][xxxApp][Game Center]下，設定啟用game center</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_01.png" alt="game01" style="width:310px"><p>###4。新增一個「個別排行榜」<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_02.png" alt="game02" style="width:310px"></p><p>###5。enable Game Center<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_03.png" alt="game03" style="width:310px"></p><p>###6。加上 GameKitHelper 的程式碼</p><p>####GameKitHelper.h</p><pre><code>#import &lt;Foundation/Foundation.h&gt;#import &lt;GameKit/GameKit.h&gt;@protocol GameKitHelperProtocol &lt;NSObject&gt;-(void) onScoresSubmitted:(bool)success;@end@interface GameKitHelper : NSObject&lt;GKGameCenterControllerDelegate&gt;{}@property (nonatomic, assign)id&lt;GameKitHelperProtocol&gt; delegate;// This property holds the last know error// that occured while using the Game Center API&apos;s@property (nonatomic, readonly) NSError* lastError;@property (nonatomic, assign)  BOOL gameCenterFeaturesEnabled;+(id) sharedGameKitHelper;// Player authentication, info-(void) authenticateLocalPlayer;// Scores-(void) submitScore:(int64_t)socre;// Show Leaderboard-(void) showLeaderboard;@end</code></pre><p>####GameKitHelper.m</p><pre><code>#import &quot;GameKitHelper.h&quot;#import &quot;GameKitHelper.h&quot;@interface GameKitHelper()&lt;GKGameCenterControllerDelegate, UIAlertViewDelegate&gt; {}@end@implementation GameKitHelper@synthesize gameCenterFeaturesEnabled;#pragma mark Singleton stuff+(id) sharedGameKitHelper {    static GameKitHelper *sharedGameKitHelper;    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        sharedGameKitHelper = [[GameKitHelper alloc] init];    });    return sharedGameKitHelper;}#pragma mark Player Authentication-(void) authenticateLocalPlayer {   __weak __block GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];    localPlayer.authenticateHandler =    ^(UIViewController *viewController, NSError *error) {        [self setLastError:error];        // Player already authenticated        if ( localPlayer.authenticated) {            gameCenterFeaturesEnabled = YES;        } else if (viewController) {            [self presentViewController:viewController];        } else {            gameCenterFeaturesEnabled = NO;        }    };}#pragma mark Property setters-(void) setLastError:(NSError *)error {    _lastError = [error copy];    if (_lastError) {        NSLog(@&quot;GameKitHelper ERROR: [%@] [%@]&quot;, [[_lastError userInfo] description], [_lastError localizedDescription]);        /*         UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@&quot;Game Center Error&quot; message:[_lastError localizedDescription] delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];         [alert show];         [alert release];         */    }}#pragma mark UIViewController stuff-(UIViewController*) getRootViewController {    return [UIApplication sharedApplication].keyWindow.rootViewController;}-(void) presentViewController:(UIViewController*)vc {    UIViewController* rootVC = [self getRootViewController];    [rootVC presentViewController:vc animated:YES completion:nil];}-(void) submitScore:(int64_t)score{    // 1: Check if Game Center    // features are enabled    if (!gameCenterFeaturesEnabled) {        NSLog(@&quot;Player not authenticated&quot;);        return;    }    // 2: Create a GKScore object    GKScore* gkScore = [[GKScore alloc]initWithLeaderboardIdentifier:@&quot;yuaki_No5&quot;];    // 3: Set the score value    gkScore.value = score;    [GKScore reportScores:@[gkScore] withCompletionHandler:^(NSError *error) {        if (error) {            [self setLastError:error];            BOOL success = (error == nil);            if ([_delegate respondsToSelector:@selector(onScoresSubmitted:)]) {                [_delegate onScoresSubmitted:success];            }        }    }];}-(void) showLeaderboard{    if (!gameCenterFeaturesEnabled) {        NSLog(@&quot;Player not authenticated&quot;);        return;    }    GKGameCenterViewController* gameCenterViewController = [[GKGameCenterViewController alloc] init];    gameCenterViewController.viewState = GKGameCenterViewControllerStateLeaderboards;    gameCenterViewController.gameCenterDelegate = self;    [[self getRootViewController] presentViewController:gameCenterViewController animated:YES completion:nil];}-(void) gameCenterViewControllerDidFinish:(GKGameCenterViewController *)gameCenterViewController {    [[self getRootViewController] dismissViewControllerAnimated:YES completion:nil];}@end</code></pre><p>###7。確認Bundle identifier是否一致</p><p>###8。確認Capabilities － GameCenter 是否無錯誤</p><p>###9。確認info.plist 有無gamekit的Capabilities</p><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_04.png" alt="game04" style="width:310px"><p>###10。在程式的啟動點加入 authenticateLocalPlayer</p><pre><code>[[GameKitHelper sharedGameKitHelper] authenticateLocalPlayer];</code></pre><p>###11。Submit Score</p><pre><code>[[GameKitHelper sharedGameKitHelper] submitScore:[lblScore.text integerValue]];</code></pre><p>###12。Show LeaderBoard</p><pre><code>[[GameKitHelper sharedGameKitHelper] showLeaderboard];</code></pre><p>###13。在手機上測試</p><p>這裡有個小地方要注意一下 iOS8必需要在手機上開啟sandox mode，才能進行開發測試</p><h4 id="設定-Game-Center-Sandbox-設為開啟"><a href="#設定-Game-Center-Sandbox-設為開啟" class="headerlink" title="[設定] [Game Center] [Sandbox] 設為開啟"></a>[設定] [Game Center] [Sandbox] 設為開啟</h4><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_05.PNG" alt="game05" style="width:310px"><p>####xcode 執行 debug 啟動進入程式後會出現 Game Center Sandbox，依序完成</p><p>輸入 AppID<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_06.PNG" alt="game06" style="width:310px"></p><p>確認 Terms and Conditions<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_07.PNG" alt="game07" style="width:310px"></p><p>Create NickName<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_08.PNG" alt="game08" style="width:310px"><br>Privacy<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_09.PNG" alt="game09" style="width:310px"></p><p>回到遊戲後即可看到 Game Center的歡迎訊息<br><img class="img-shadow" src="https://raw.githubusercontent.com/nobodyyu/GraphicsBed/master/game_center_10.PNG" alt="game10" style="width:310px"></p><p>#打完收功</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>objc-AirMonitor</title>
      <link href="/2015/04/08/objc-AirMonitor/"/>
      <url>/2015/04/08/objc-AirMonitor/</url>
      <content type="html"><![CDATA[<p>原始資料來源：<br><a href="http://taqm.epa.gov.tw/pm25/tw/PM25A.aspx?area=10" target="_blank" rel="noopener">http://taqm.epa.gov.tw/pm25/tw/PM25A.aspx?area=10</a></p><p>##<a href="https://itunes.apple.com/us/app/tai-wan-kong-qi-wu-ran-jian-ce/id983539259?l=zh&ls=1&mt=8" target="_blank" rel="noopener">載點</a> </p><hr><p>##說明</p><p>為台灣空氣污染監測設計的app </p><p>主要監測細懸浮微粒(pm2.5)的單位濃度<br>許多研究已證實細懸浮微粒(pm2.5)會對呼吸系統和心血管系統造成傷害<br>導致哮喘 肺癌 心血管疾病 出生缺陷和過早死亡</p><p>功能<br>－即時pm2.5資訊查詢<br>－列表顯示<br>－在今天的畫面可定義監控的顯示區域</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Symbol - English</title>
      <link href="/2015/04/08/Symbol-English/"/>
      <url>/2015/04/08/Symbol-English/</url>
      <content type="html"><![CDATA[<p>&amp;　Ampersand (And 符號)</p><p>*　Asterisk (星號)</p><p>@　At sign, at (At 符號，At)</p><p>\　Backslash (反斜線)</p><p>[　Open bracket (左中括弧)</p><p>^　Caret (插入號)</p><p>]　Close bracket (右中括弧)</p><p>(　Open parenthesis (左括弧)</p><p>)　Close parenthesis (右括弧)</p><p>:　Colon (冒號)</p><p>,　Comma (逗號)</p><p>$　Dollar sign (錢符號)</p><p>–　Double dash (雙破折號)</p><p>…　Ellipsis (省略符號)</p><p>‘　Single quote (單引號)</p><p>“　Quote (雙引號)</p><p>=　Equals (等號)</p><p>+　Plus, plus sign (加，加號)</p><p>!　Exclamation point (驚歎號)</p><p>&gt;　Greater than (大於)</p><p>&lt;　Less than (小於)</p><p>#　Pound sign (井字號)</p><p>?　Question mark (問號)</p><p>.　Period, dot (句號，點)</p><p>;　Semicolon (分號)</p><p>-　Hyphen (連字號)</p><p>—　Dash (破折號)</p><p>_　Underscore (底線)</p><p>|　Vertical bar (垂直線)</p><p>{　Open brace (左大括弧)</p><p>}　Close brace (右大括弧)</p><p>%　Percent, percent sign (百分比，百分比符號)</p><p>/　Slash (斜線)</p><p>//　Double slash (雙斜線)</p><p>~　Tilde (取代符號，毛毛蟲)</p>]]></content>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - Boy Scout Rule</title>
      <link href="/2015/04/08/Clean-Code-Boy-Scout-Rule/"/>
      <url>/2015/04/08/Clean-Code-Boy-Scout-Rule/</url>
      <content type="html"><![CDATA[<p>##Leave the campground cleaner than you found it. </p><p>###整理好code再離開，不管是誰留下來的</p>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - Naming</title>
      <link href="/2015/04/08/Clean-Code-Naming/"/>
      <url>/2015/04/08/Clean-Code-Naming/</url>
      <content type="html"><![CDATA[<ol><li><p>Use Intention-Revealing Names</p></li><li><p>Avoid Disinformation</p></li><li><p>Make Meaningful Distinctions</p></li><li><p>Use Pronounceable Names</p></li><li><p>Use Searchable Names</p></li><li><p>Avoid Encodings</p></li><li><p>Avoid Mental Mapping</p></li><li><p>Class Names - should have noun or noun phase names</p></li><li><p>Method Names - should have verb or verb phase names</p></li><li><p>Don’t be cute</p></li><li><p>Pick one word per concept</p></li><li><p>Don’t pun - don’t use the same word for two purposes</p></li><li><p>Use solution domain names</p></li><li><p>Use problem domain names</p></li><li><p>Add meaningful context</p></li><li><p>Don’t add gratuitous context</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - function</title>
      <link href="/2015/04/08/Clean-Code-function/"/>
      <url>/2015/04/08/Clean-Code-function/</url>
      <content type="html"><![CDATA[<ol><li><p>Small</p></li><li><p>Blocks and Indenting</p></li><li><p>Do one thing</p></li><li><p>One level of abstraction per function</p></li><li><p>Reading code from top to bottom: the Step Down Rule</p></li><li><p>Switch statements</p></li><li><p>Use descriptive names</p></li><li><p>Function arguments - the less the better</p></li><li><p>Common monadic forms *,Dyadic functions, Triads, Argument objects, Agrument Lists,</p></li><li><p>Flag arguments - passing a boolean into a function is a terrible practice</p></li><li><p>Verbs and keywords</p></li><li><p>Have no side effects - do not lie in function</p></li><li><p>Command Query Separation - don’t return different meaning in one function</p></li><li><p>Prefer exceptions to return error codes</p></li><li><p>Extract try/catch blocks</p></li><li><p>Error handling is one thing</p></li><li><p>Dependency magnet. don’t enum the errors</p></li><li><p>Don’t repeat yourself</p></li><li><p>Structured programming</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - Error Handling</title>
      <link href="/2015/04/08/Clean-Code-Error-Handling/"/>
      <url>/2015/04/08/Clean-Code-Error-Handling/</url>
      <content type="html"><![CDATA[<ol><li><p>Use Exceptions rather than Return Codes</p></li><li><p>Write Your Try-Catch-Finally Statement First</p></li><li><p>Use un-checked exceptions ＊</p></li><li><p>Provide context with eceptions</p></li><li><p>Define exception classes in terms of a caller’s needs</p></li><li><p>Define the normal flow</p></li><li><p>Don’t return null</p></li><li><p>Don’t pass null</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - TDDs 3 laws</title>
      <link href="/2015/04/08/Clean-Code-TDDs-3-laws/"/>
      <url>/2015/04/08/Clean-Code-TDDs-3-laws/</url>
      <content type="html"><![CDATA[<ol><li><p>First Law - You may not write production code until you have written a failing unit test.</p></li><li><p>Second Law - You may not write more of a unit test than is sufficient to fail, and not compiling is failing.</p></li><li><p>Third Law - You may not write more production code than is sufficient to pass the currently failing test.</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Clean Code - System</title>
      <link href="/2015/04/08/Clean-Code-System/"/>
      <url>/2015/04/08/Clean-Code-System/</url>
      <content type="html"><![CDATA[<ol><li><p>Separate Constructing a System from Using It</p></li><li><p>Separation of Main</p></li><li><p>Factories</p></li><li><p>Dependency Injection</p></li><li><p>Scaling Up</p></li><li><p>Cross-Cutting Concerns</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Clean Code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android-leap-code-01</title>
      <link href="/2015/04/08/Android-leap-code-01/"/>
      <url>/2015/04/08/Android-leap-code-01/</url>
      <content type="html"><![CDATA[<p>##河內塔<br>    public static void Move(int disks, int from, int to)<br>    {<br>        if(disks == 1)<br>        {<br>            System.out.println(“Move from “ + from + “ to “ + to);<br>            return;<br>        }<br>        int relay = 6 - from - to;<br>        Move(disks - 1, from, relay);<br>        Move(1, from, to);<br>        Move(disks - 1, relay, to);<br>    }<br>##Fibonacci</p><pre><code>public class DivideAndConquer {    public static long Fibonacci(int n)    {        if (n == 0)            return 0;        if (n == 1)            return 1;        return Fibonacci(n - 1) + Fibonacci(n - 2);    }}</code></pre><p>##Merge sort<br>###TopDown<br>    public class TopDown {<br>       public static void Sort(int[] array)<br>       {<br>           int[] workArray = new int[array.length];<br>           Sort(array, workArray, 0, array.length);<br>       } </p><pre><code>   private static void Sort(int[] array, int[] workArray, int start, int count)    {        if (count &lt; 2)            return;        Sort(array, workArray, start, count / 2);        Sort(array, workArray, start + count / 2, count - count / 2);        Merge(array, workArray, start, count / 2, start + count / 2, count - count / 2); }  private static void Merge(int[] array, int[] workArray, int leftStart, int leftCount, int rightStart, int rightCount) {     int i = leftStart, j = rightStart, leftBound = leftStart + leftCount, rightBound = rightStart + rightCount, index = leftStart;    while (i &lt; leftBound || j &lt; rightBound)    {        if (i &lt; leftBound &amp;&amp; j &lt; rightBound)        {            if (array[j] &lt; array[i])                workArray[index] = array[j++];            else               workArray[index] = array[i++];        }        else if (i &lt; leftBound)            workArray[index] = array[i++];        else           workArray[index] = array[j++];        ++index;    }    for (i = leftStart; i &lt; index; ++i)        array[i] = workArray[i];    }}</code></pre><p>##BottomUp</p><pre><code>public class BottomUp {    public static void Sort(int[] array)     {         int[] workArray = new int[array.length];         for (int count = 1; count &lt; array.length; count *= 2)             for (int leftStart = 0; leftStart &lt; array.length; leftStart += 2 * count)             {                 if (count &gt; array.length - leftStart)                     break;                 Merge(array, workArray, leftStart, count, leftStart + count, Math.min(count, array.length - leftStart - count));             }     }     private static void Merge(int[] array, int[] workArray, int leftStart, int leftCount, int rightStart, int rightCount)     {         int i = leftStart, j = rightStart, leftBound = leftStart + leftCount, rightBound = rightStart + rightCount, index = leftStart;         while (i &lt; leftBound || j &lt; rightBound)         {             if (i &lt; leftBound &amp;&amp; j &lt; rightBound)             {                 if (array[j] &lt; array[i])                     workArray[index] = array[j++];                 else                    workArray[index] = array[i++];             }             else if (i &lt; leftBound)                 workArray[index] = array[i++];             else                workArray[index] = array[j++];             ++index;         }         for (i = leftStart; i &lt; index; ++i)             array[i] = workArray[i];     }}</code></pre><p>##Quick Sort</p><pre><code>import java.util.List;import java.util.Random;import java.util.ArrayList;public class ObjectOriented {    static Random random = new Random();    public static void Sort(int[] array) {        List list = new ArrayList();        for (int n : array)            list.add(n);        list = Sort(list);        for (int i = 0;i &lt; array.length;++i)            array[i] = list.get(i);    }    public static List Sort(List list)    {        if (list.size() &lt; 2)            return list;        // random pivot        //int pivot = list.get(random.nextInt(list.size() - 1));        // middle pivot        int pivot = list.get(list.size() / 2);        list.remove(list.size() / 2);        List less = new ArrayList();        List greater = new ArrayList();        List result = new ArrayList();        for (Integer n : list)        {            if (n &gt; pivot)                greater.add(n);            else                less.add(n);        }        result.addAll(Sort(less));        result.add(pivot);        result.addAll(Sort(greater));        return result;    }}</code></pre><p>##Binary Search<br>    public class DivideAndConquer {<br>        static public int Search(int[] array, int num)<br>        {<br>            return Search(array, num, 0, array.length - 1);<br>        }</p><pre><code>    static public int Search(int[] array, int num, int left, int right)    {        if (left &gt; right)            return -1;        int middle = (right + left) / 2;        if (array[middle] == num)            return middle;        if (array[middle] &gt; num)            return Search(array, num, left, middle - 1);        return Search(array, num, middle + 1, right);    }}</code></pre><p>##下樓梯<br>    public class Iterative {<br>        public static long DownStairs(int n)<br>        {<br>            long v1 = 1;<br>            long v2 = 2;<br>            long result = n;<br>            for (int i = 2; i &lt;= n; ++i)<br>            {<br>                result = v2 + v1;<br>                v1 = v2;<br>                v2 = result;<br>            }<br>            return result;<br>        }<br>    }</p><p>##總和遞迴<br>       int sum(int n)<br>    {<br>        if(n &lt; 1)<br>            return 0;<br>        return n + sum(n - 1);<br>    }</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android-Thread-Save Singleton</title>
      <link href="/2015/04/08/Android-Thread-Save-Singleton/"/>
      <url>/2015/04/08/Android-Thread-Save-Singleton/</url>
      <content type="html"><![CDATA[<h2 id="Android-Thread-Save-Singleton"><a href="#Android-Thread-Save-Singleton" class="headerlink" title="Android Thread-Save Singleton"></a>Android Thread-Save Singleton</h2><pre><code>public class ThreadSafeSingleton {    private static final Object instance = new Object();    protected ThreadSafeSingleton() {    }    // Runtime initialization    // By defualt ThreadSafe    public static Object getInstance() {        return instance;    }}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android-shrinkTextView</title>
      <link href="/2015/04/08/Android-shrinkTextView/"/>
      <url>/2015/04/08/Android-shrinkTextView/</url>
      <content type="html"><![CDATA[<h2 id="自動縮小字型的TextView"><a href="#自動縮小字型的TextView" class="headerlink" title="自動縮小字型的TextView"></a>自動縮小字型的TextView</h2><pre><code>private void shrinkText(final TextView wv, final String word) {    wv.setTextSize(defaultTextSize);    new Thread(new Runnable() {        @Override        public void run() {                while (wv.getWidth()&gt;0 &amp;&amp; wv.getPaint().measureText(word) &gt; wv.getWidth()) {                Logg.d(&quot;word too big. Shrink from &quot; + wv.getTextSize()/density + &quot; to &quot; + (wv.getTextSize()/density-1.0f));                wv.post(new Runnable() {                   public void run() {                      wv.setTextSize(wv.getTextSize() / density - 1.0f);                   }               });        }    }).start();}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>objc-因為版本不同出現no interface的解法</title>
      <link href="/2015/04/08/objc-%E5%9B%A0%E7%82%BA%E7%89%88%E6%9C%AC%E4%B8%8D%E5%90%8C%E5%87%BA%E7%8F%BEno-interface%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
      <url>/2015/04/08/objc-%E5%9B%A0%E7%82%BA%E7%89%88%E6%9C%AC%E4%B8%8D%E5%90%8C%E5%87%BA%E7%8F%BEno-interface%E7%9A%84%E8%A7%A3%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>##Send Action</p><pre><code>if ([self.locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){     [[UIApplication sharedApplication] sendAction:@selector(requestWhenInUseAuthorization) to:self.locationManager from:self forEvent:nil];}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>objc-增加UIButton的點擊範圍 - objc_setAssociatedObject 的應用</title>
      <link href="/2015/04/08/objc-%E5%A2%9E%E5%8A%A0UIButton%E7%9A%84%E9%BB%9E%E6%93%8A%E7%AF%84%E5%9C%8D-objc-setAssociatedObject-%E7%9A%84%E6%87%89%E7%94%A8/"/>
      <url>/2015/04/08/objc-%E5%A2%9E%E5%8A%A0UIButton%E7%9A%84%E9%BB%9E%E6%93%8A%E7%AF%84%E5%9C%8D-objc-setAssociatedObject-%E7%9A%84%E6%87%89%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="UIButton的進階使用"><a href="#UIButton的進階使用" class="headerlink" title="UIButton的進階使用"></a>UIButton的進階使用</h2><p>一般人比較少接觸到的runtime programming 以下為其中之一objc_setAssociatedObject 的應用</p><pre><code>@interface UIButton(EnlargeTouchArea)@end@implementation UIButton(EnlargeTouchArea)static char topNameKey;static char rightNameKey;static char bottomNameKey;static char leftNameKey;- (void) setEnlargeEdgeWithTop:(CGFloat) top right:(CGFloat) right bottom:(CGFloat) bottom left:(CGFloat) left{    objc_setAssociatedObject(self, &amp;topNameKey, [NSNumber numberWithFloat:top], OBJC_ASSOCIATION_COPY_NONATOMIC);    objc_setAssociatedObject(self, &amp;rightNameKey, [NSNumber numberWithFloat:right], OBJC_ASSOCIATION_COPY_NONATOMIC);    objc_setAssociatedObject(self, &amp;bottomNameKey, [NSNumber numberWithFloat:bottom], OBJC_ASSOCIATION_COPY_NONATOMIC);    objc_setAssociatedObject(self, &amp;leftNameKey, [NSNumber numberWithFloat:left], OBJC_ASSOCIATION_COPY_NONATOMIC);}- (CGRect) enlargedRect{    NSNumber* topEdge = objc_getAssociatedObject(self, &amp;topNameKey);    NSNumber* rightEdge = objc_getAssociatedObject(self, &amp;rightNameKey);    NSNumber* bottomEdge = objc_getAssociatedObject(self, &amp;bottomNameKey);    NSNumber* leftEdge = objc_getAssociatedObject(self, &amp;leftNameKey);    if (topEdge &amp;&amp; rightEdge &amp;&amp; bottomEdge &amp;&amp; leftEdge)    {        return CGRectMake(self.bounds.origin.x - leftEdge.floatValue,                          self.bounds.origin.y - topEdge.floatValue,                          self.bounds.size.width + leftEdge.floatValue + rightEdge.floatValue,                          self.bounds.size.height + topEdge.floatValue + bottomEdge.floatValue);    }    else    {        return self.bounds;    }}- (UIView*) hitTest:(CGPoint) point withEvent:(UIEvent*) event{    CGRect rect = [self enlargedRect];    if (CGRectEqualToRect(rect, self.bounds))    {        return [super hitTest:point withEvent:event];    }    return CGRectContainsPoint(rect, point) ? self : nil;}@end</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>objc-Thread-Save Singleton</title>
      <link href="/2015/04/08/objc-Thread-Save-Singleton/"/>
      <url>/2015/04/08/objc-Thread-Save-Singleton/</url>
      <content type="html"><![CDATA[<h2 id="Thread-Save-Singleton"><a href="#Thread-Save-Singleton" class="headerlink" title="Thread-Save Singleton"></a>Thread-Save Singleton</h2><pre><code>@implementation SingletonClass+ (id)sharedInstance{    static SingletonClass *sharedMyInstance = nil;    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{    sharedMyInstance = [[super allocWithZone:nil] init];    });    return sharedMyInstance;}@end+ (id)allocWithZone:(NSZone *)zone{    return [self sharedInstance];}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to Hexo</title>
      <link href="/2015/04/07/How-to-Hexo/"/>
      <url>/2015/04/07/How-to-Hexo/</url>
      <content type="html"><![CDATA[<p>##1.本機環境設定</p><hr><p>首先你要有<a href="http://www.nodejs.org/" target="_blank" rel="noopener">node.js</a>，這是一套快速、簡單且功能強大的 Node.js 網誌框架。</p><p>接著你要用 npm install -g hexo 來安裝</p><p>理論上這樣就完成了，發現前面加上 sudo 就可以解決資料夾控制權的問題。</p><p>##2.github帳號設定</p><hr><p>有自已的github帳號</p><p>在主頁右上方創建一個新的 [repo] [create new repo]</p><p>Repository name 填入 github帳號.github.io 用來創建github page</p><p>##3.開始使用hexo</p><hr><p>第一次建立hexo時要先將hexo初始化（建議建立一個hexo資料夾存放資料）</p><pre><code>hexo init</code></pre><p>如果有提示要輸入 npm install的話  也要</p><pre><code>npm install</code></pre><p>接著  需要安裝 deployer</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>建立一篇文章，將會是Markdown形式，可以到source/_post/title.md去修改</p><pre><code>hexo new &quot;title&quot;</code></pre><p>編輯md檔，增添你要的文章與tag，建議使用 <a href="http://25.io/mou/" target="_blank" rel="noopener">MOU</a> 編輯，可以很快地看到自已編寫的內容格式是否正確</p><p>接著，生成public檔案</p><pre><code>hexo generate</code></pre><p>可以在本機事先預覽（chrome需要用localhost來取代0.0.0.0）</p><pre><code>hexo server</code></pre><p>##4.上傳至github</p><hr><p>修改 hexo的資料夾裡的 _config.yml 檔案</p><p>比對一下，原始檔，填入自已的資料</p><pre><code># Sitetitle: 沒有人的地盤subtitle: mobile app developmentdescription: author: AKI YU－－－－－－中間省略－－－－－－－－－－－－deploy:  type: git  repository: git@github.com:github帳號/github帳號.github.io.git  branch: master</code></pre><p>編輯存檔後發佈</p><pre><code>hexo deploy</code></pre><p>成功的話可以用瀏覽器看一下</p><pre><code>http://github帳號.github.io</code></pre><p>打完收功</p>]]></content>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift-xmlParser之使用</title>
      <link href="/2015/04/07/swift-xmlParser%E4%B9%8B%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/04/07/swift-xmlParser%E4%B9%8B%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ol><li>在ViewController後引用所需要的 delegate</li></ol><pre><code>class ViewController: ViewController,NSXMLParserDelegate </code></pre><ol start="2"><li><p>加入delegate所需要的function</p><pre><code>func parser(parser: NSXMLParser!, didStartElement elementName: String!, namespaceURI: String!, qualifiedName qName: String!, attributes attributeDict: [NSObject : AnyObject]!) {println(&quot;Element&apos;s name is \(elementName)&quot;)println(&quot;Element&apos;s attributes are \(attributeDict)&quot;)}func parser(parser: NSXMLParser!, foundCharacters string: String!) {}func parser(parser: NSXMLParser!, didEndElement elementName: String!, namespaceURI: String!, qualifiedName qName: String!) {println(&quot;End&quot;)</code></pre><p> }</p></li></ol><ol start="3"><li><p>在接收到資料後，轉為nsdata，並使用parser去執行（以下為範例）</p><pre><code>  let xml = (&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&lt;rsp stat=\&quot;fail\&quot;&gt;&lt;err code=\&quot;123\&quot; msg=\&quot;Failed\&quot; desc=\&quot;錯誤\&quot;/&gt;&lt;/rsp&gt;&quot;).dataUsingEncoding(NSUTF8StringEncoding)var xmlParser: NSXMLParser = NSXMLParser(data: xml)xmlParser.delegate = selfxmlParser.parse()</code></pre></li></ol><ol start="4"><li><p>跑跑看結果是否正確</p><pre><code>Element&apos;s name is rspElement&apos;s attributes are [stat: fail]Element&apos;s name is errElement&apos;s attributes are [msg: Failed, desc: 錯誤, code: 123]EndEnd</code></pre></li><li><p>收工</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>objc-WaterMonitor</title>
      <link href="/2015/04/07/objc-WaterMonitor/"/>
      <url>/2015/04/07/objc-WaterMonitor/</url>
      <content type="html"><![CDATA[<p>原始資料來源：<br><a href="http://fhy.wra.gov.tw/ReservoirPage_2011/StorageCapacity.aspx" target="_blank" rel="noopener">http://fhy.wra.gov.tw/ReservoirPage_2011/StorageCapacity.aspx</a></p><p>##<a href="https://github.com/AKI-YU/WaterMonitor/" target="_blank" rel="noopener">原始碼</a></p><p>##<a href="https://itunes.apple.com/us/app/tai-wan-shui-ku-shui-wei-jian/id940353315?l=zh&ls=1&mt=8" target="_blank" rel="noopener">載點</a> </p><hr><p>##說明</p><p>有許多資訊人對於週遭環境的關心，但是少了objc的版本，於此補上一份</p><p>內容有</p><p>1） html parser</p><p>2） 動畫</p><p>3） today extension</p><p>4） vpon</p><p>5） 其他小技巧</p><hr><h3 id="html-parser-TFHpple"><a href="#html-parser-TFHpple" class="headerlink" title="html parser - TFHpple"></a>html parser - TFHpple</h3><h3 id="water-effect-VWWater"><a href="#water-effect-VWWater" class="headerlink" title="water effect - VWWater"></a>water effect - VWWater</h3><hr><p><a href="https://github.com/jarvislin/Water-Restriction-Info" target="_blank" rel="noopener">https://github.com/jarvislin/Water-Restriction-Info</a></p><p>向上面這個專案致敬.</p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PlaceHolder of UITextview</title>
      <link href="/2014/07/02/UIPlaceHolderTextView./"/>
      <url>/2014/07/02/UIPlaceHolderTextView./</url>
      <content type="html"><![CDATA[<p>Q: UITextView 沒有 placeholder， 那就自己做一個吧 </p><a id="more"></a><h4 id="UIPlaceHolderTextView-h"><a href="#UIPlaceHolderTextView-h" class="headerlink" title="UIPlaceHolderTextView.h:"></a>UIPlaceHolderTextView.h:</h4><pre><code>#import &lt;Foundation/Foundation.h&gt;IB_DESIGNABLE@interface UIPlaceHolderTextView : UITextView@property (nonatomic, retain) IBInspectable NSString *placeholder;@property (nonatomic, retain) IBInspectable UIColor *placeholderColor;-(void)textChanged:(NSNotification*)notification;@end</code></pre><h4 id="UIPlaceHolderTextView-m"><a href="#UIPlaceHolderTextView-m" class="headerlink" title="UIPlaceHolderTextView.m:"></a>UIPlaceHolderTextView.m:</h4><pre><code>#import &quot;UIPlaceHolderTextView.h&quot;@interface UIPlaceHolderTextView ()@property (nonatomic, retain) UILabel *placeHolderLabel;@end@implementation UIPlaceHolderTextViewCGFloat const UI_PLACEHOLDER_TEXT_CHANGED_ANIMATION_DURATION = 0.25;- (void)dealloc{    [[NSNotificationCenter defaultCenter] removeObserver:self];#if __has_feature(objc_arc)#else    [_placeHolderLabel release]; _placeHolderLabel = nil;    [_placeholderColor release]; _placeholderColor = nil;    [_placeholder release]; _placeholder = nil;    [super dealloc];#endif}- (void)awakeFromNib{    [super awakeFromNib];    // Use Interface Builder User Defined Runtime Attributes to set    // placeholder and placeholderColor in Interface Builder.    if (!self.placeholder) {        [self setPlaceholder:@&quot;&quot;];    }    if (!self.placeholderColor) {        [self setPlaceholderColor:[UIColor lightGrayColor]];    }    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChanged:) name:UITextViewTextDidChangeNotification object:nil];}- (id)initWithFrame:(CGRect)frame{    if( (self = [super initWithFrame:frame]) )    {        [self setPlaceholder:@&quot;&quot;];        [self setPlaceholderColor:[UIColor lightGrayColor]];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChanged:) name:UITextViewTextDidChangeNotification object:nil];    }    return self;}- (void)textChanged:(NSNotification *)notification{    if([[self placeholder] length] == 0)    {        return;    }    [UIView animateWithDuration:UI_PLACEHOLDER_TEXT_CHANGED_ANIMATION_DURATION animations:^{    if([[self text] length] == 0)    {        [[self viewWithTag:999] setAlpha:1];    }    else    {        [[self viewWithTag:999] setAlpha:0];    }    }];}- (void)setText:(NSString *)text {    [super setText:text];    [self textChanged:nil];}- (void)drawRect:(CGRect)rect{    if( [[self placeholder] length] &gt; 0 )    {        if (_placeHolderLabel == nil )        {            _placeHolderLabel = [[UILabel alloc] initWithFrame:CGRectMake(8,8,self.bounds.size.width - 16,0)];            _placeHolderLabel.lineBreakMode = NSLineBreakByWordWrapping;            _placeHolderLabel.numberOfLines = 0;            _placeHolderLabel.font = self.font;            _placeHolderLabel.backgroundColor = [UIColor clearColor];            _placeHolderLabel.textColor = self.placeholderColor;            _placeHolderLabel.alpha = 0;            _placeHolderLabel.tag = 999;            [self addSubview:_placeHolderLabel];        }        _placeHolderLabel.text = self.placeholder;        [_placeHolderLabel sizeToFit];        [self sendSubviewToBack:_placeHolderLabel];    }    if( [[self text] length] == 0 &amp;&amp; [[self placeholder] length] &gt; 0 )    {        [[self viewWithTag:999] setAlpha:1];    }    [super drawRect:rect];}@end</code></pre><h4 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h4><pre><code>import UIKitclass PlaceholderTextView: UITextView {    @IBInspectable var placeholderColor: UIColor = UIColor.lightGray    @IBInspectable var placeholderText: String = &quot;&quot;    override var font: UIFont? {        didSet {            setNeedsDisplay()        }    }    override var contentInset: UIEdgeInsets {        didSet {            setNeedsDisplay()        }    }    override var textAlignment: NSTextAlignment {        didSet {            setNeedsDisplay()        }    }    override var text: String? {        didSet {            setNeedsDisplay()        }    }    override var attributedText: NSAttributedString? {        didSet {            setNeedsDisplay()        }    }    required init?(coder aDecoder: NSCoder) {        super.init(coder: aDecoder)        setUp()    }    override init(frame: CGRect, textContainer: NSTextContainer?) {        super.init(frame: frame, textContainer: textContainer)    }    private func setUp() {        NotificationCenter.default.addObserver(self,         selector: #selector(self.textChanged(notification:)),         name: Notification.Name(&quot;UITextViewTextDidChangeNotification&quot;),         object: nil)    }    @objc func textChanged(notification: NSNotification) {        setNeedsDisplay()    }    func placeholderRectForBounds(bounds: CGRect) -&gt; CGRect {        var x = contentInset.left + 4.0        var y = contentInset.top  + 9.0        let w = frame.size.width - contentInset.left - contentInset.right - 16.0        let h = frame.size.height - contentInset.top - contentInset.bottom - 16.0        if let style = self.typingAttributes[NSAttributedString.Key.paragraphStyle] as? NSParagraphStyle {            x += style.headIndent            y += style.firstLineHeadIndent        }        return CGRect(x: x, y: y, width: w, height: h)    }    override func draw(_ rect: CGRect) {        if text!.isEmpty &amp;&amp; !placeholderText.isEmpty {            let paragraphStyle = NSMutableParagraphStyle()            paragraphStyle.alignment = textAlignment            let attributes: [NSAttributedString.Key: Any] = [            NSAttributedString.Key(rawValue: NSAttributedString.Key.font.rawValue) : font!,            NSAttributedString.Key(rawValue: NSAttributedString.Key.foregroundColor.rawValue) : placeholderColor,            NSAttributedString.Key(rawValue: NSAttributedString.Key.paragraphStyle.rawValue)  : paragraphStyle]            placeholderText.draw(in: placeholderRectForBounds(bounds: bounds), withAttributes: attributes)        }        super.draw(rect)    }}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> swift </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>圖片的裁切</title>
      <link href="/2013/06/13/ImageCrop/"/>
      <url>/2013/06/13/ImageCrop/</url>
      <content type="html"><![CDATA[<p>Q: 這邊要教你把某一個UIImage 重新裁切</p><a id="more"></a><p>實作一個category</p><pre><code>@implementation UIImage (Crop)- (UIImage *)crop:(CGRect)rect {    rect = CGRectMake(rect.origin.x*self.scale,                       rect.origin.y*self.scale,                       rect.size.width*self.scale,                       rect.size.height*self.scale);           CGImageRef imageRef = CGImageCreateWithImageInRect([self CGImage], rect);    UIImage *result = [UIImage imageWithCGImage:imageRef                                           scale:self.scale                                     orientation:self.imageOrientation];     CGImageRelease(imageRef);    return result;}@end</code></pre><p>使用</p><pre><code>UIImage *imageToCrop = &lt;yourImageToCrop&gt;;CGRect cropRect = &lt;areaYouWantToCrop&gt;;   UIImage *croppedImage = [imageToCrop crop:cropRect];</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> CCLayer </tag>
            
            <tag> crop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 ViewConrtoller 之間傳遞值</title>
      <link href="/2011/03/12/PassDataBetweenVCs/"/>
      <url>/2011/03/12/PassDataBetweenVCs/</url>
      <content type="html"><![CDATA[<p>Q: 在ViewController之間有那些傳遞值的方法呢？</p><a id="more"></a><h2 id="VC-A-將值塞入下一個-VC-B"><a href="#VC-A-將值塞入下一個-VC-B" class="headerlink" title="VC A 將值塞入下一個 VC B"></a>VC A 將值塞入下一個 VC B</h2><h3 id="利用-property-當做是變數來存放值"><a href="#利用-property-當做是變數來存放值" class="headerlink" title="利用 property 當做是變數來存放值"></a>利用 property 當做是變數來存放值</h3><p>在 VC B 寫一個 property BOOL 值 isOpen 為例</p><pre><code>@property (nonatomic, assign) BOOL isOpen;</code></pre><p>由 VC A 將 VC B 建立起來的同時，將值塞入 VC B</p><pre><code>ViewControllerB *vcB = [[ViewControllerB alloc] initWithNib:@&quot;vcB&quot; bundle:nil];vcB.isOpen = YES;[[[self navigationController]] pushViewController:vcB animated:YES]; </code></pre><p>不使用push 的話 可以放入 Segue</p><pre><code>-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{ if([segue.identifier isEqualToString:@&quot;showDetailSegue&quot;]){    ViewControllerB *vcB = (ViewControllerB *)segue.destinationViewController;    vcB.isOpen = YES;  }}</code></pre><h2 id="VC-A-將-VC-B-的值-透過-delegate-取回"><a href="#VC-A-將-VC-B-的值-透過-delegate-取回" class="headerlink" title="VC A 將 VC B 的值 透過 delegate 取回"></a>VC A 將 VC B 的值 透過 delegate 取回</h2><p>為 VC B 建立一個protocol 和 delegate</p><h4 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h4><pre><code>@class ViewControllerB;@protocol ViewControllerBDelegate &lt;NSObject&gt;- (void)didEnteringItem:(NSString *)item;@end</code></pre><h4 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h4><pre><code>@property (nonatomic, weak) id &lt;ViewControllerBDelegate&gt; delegate;</code></pre><p>VC A 要使用 VC B 的 deletegate時，必須在自己的interface上將delegate引用進來</p><pre><code>@interface ViewControllerA : UIViewController &lt;ViewControllerBDelegate&gt;</code></pre><p>並且在 .m 裡實作 protocol 需要的函數</p><pre><code>- (void)didEnteringItem:(NSString *)item{    NSLog(@&quot;Value from VC B %@&quot;,item);}</code></pre><p>最後 在 VC B 建立的同時，告訴他 delegate是 vc A</p><pre><code>ViewControllerB *vcB = [[ViewControllerB alloc] initWithNib:@&quot;vcB&quot; bundle:nil];vcB.delegate = self[[self navigationController] pushViewController:vcB animated:YES];</code></pre><p>在 vc B 操作的時候，只要呼叫</p><pre><code>[self.delegate didEnteringItem:@&quot;test&quot;];</code></pre><p>vc A 就收到值了</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 新手村 </tag>
            
            <tag> OBJC </tag>
            
            <tag> 資料 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
